/*
 * iaxxx-register-defs-stmr.h
 *
 * Copyright (c) 2018 Knowles, inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/**********************************************************
 * This file is generated by running a format script
 * on header files shared by Firmware.
 *
 * DO NOT EDIT.
 *
 *********************************************************/

#ifndef __IAXXX_REGISTER_DEFS_STMR_H__
#define __IAXXX_REGISTER_DEFS_STMR_H__

/*** The base address for this set of registers ***/
#define IAXXX_STMR_REGS_ADDR (0x40004000)

/*** STMR_ENABLE (0x40004000) ***/
/*
 * When set, enables the Sensor Timer Unit.  When clear, these subsystems are
 * disabled and consume minimal power.  When enabled, the STMR Wall Clock
 * begins counting at WALL_CLOCK.VAL register value.
 */
#define IAXXX_STMR_ENABLE_ADDR (0x40004000)
#define IAXXX_STMR_ENABLE_MASK_VAL 0x00000001
#define IAXXX_STMR_ENABLE_RMASK_VAL 0x00000001
#define IAXXX_STMR_ENABLE_WMASK_VAL 0x00000001
#define IAXXX_STMR_ENABLE_RESET_VAL 0x00000000

/*
 * Enables STMR Unit.
 */
#define IAXXX_STMR_ENABLE_E_MASK 0x00000001
#define IAXXX_STMR_ENABLE_E_RESET_VAL 0x0
#define IAXXX_STMR_ENABLE_E_POS 0
#define IAXXX_STMR_ENABLE_E_SIZE 1
#define IAXXX_STMR_ENABLE_E_DECL 0

/*** STMR_MISC_CTRL (0x40004004) ***/
/*
 * When set, the STMR Wall Clock Master Counter will not increment.
 */
#define IAXXX_STMR_MISC_CTRL_ADDR (0x40004004)
#define IAXXX_STMR_MISC_CTRL_MASK_VAL 0x00000001
#define IAXXX_STMR_MISC_CTRL_RMASK_VAL 0x00000001
#define IAXXX_STMR_MISC_CTRL_WMASK_VAL 0x00000001
#define IAXXX_STMR_MISC_CTRL_RESET_VAL 0x00000000

/*
 * Disable increment for STMR Wall Clock Counter.
 */
#define IAXXX_STMR_MISC_CTRL_INC_DIS_MASK 0x00000001
#define IAXXX_STMR_MISC_CTRL_INC_DIS_RESET_VAL 0x0
#define IAXXX_STMR_MISC_CTRL_INC_DIS_POS 0
#define IAXXX_STMR_MISC_CTRL_INC_DIS_SIZE 1
#define IAXXX_STMR_MISC_CTRL_INC_DIS_DECL 0

/*** STMR_PT_ENAB (0x40004008) ***/
/*
 * When set, enables the corresponding Presentation Timer, allowing a request
 * a presentation time "time stamp".  When clear, the subsystem is disabled
 * and consumes minimal power.  Note that timer 8 and 9 are muxed between
 * serial sources.  See SER_CTL for details.
 */
#define IAXXX_STMR_PT_ENAB_ADDR (0x40004008)
#define IAXXX_STMR_PT_ENAB_MASK_VAL 0x000007ff
#define IAXXX_STMR_PT_ENAB_RMASK_VAL 0x000007ff
#define IAXXX_STMR_PT_ENAB_WMASK_VAL 0x000007ff
#define IAXXX_STMR_PT_ENAB_RESET_VAL 0x00000000

/*
 * Enable Presentation Timer 0.
 */
#define IAXXX_STMR_PT_ENAB_E_0_MASK 0x00000001
#define IAXXX_STMR_PT_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_0_POS 0
#define IAXXX_STMR_PT_ENAB_E_0_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_0_DECL 0

/*
 * Enable Presentation Timer 1.
 */
#define IAXXX_STMR_PT_ENAB_E_1_MASK 0x00000002
#define IAXXX_STMR_PT_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_1_POS 1
#define IAXXX_STMR_PT_ENAB_E_1_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_1_DECL 1

/*
 * Enable Presentation Timer 2.
 */
#define IAXXX_STMR_PT_ENAB_E_2_MASK 0x00000004
#define IAXXX_STMR_PT_ENAB_E_2_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_2_POS 2
#define IAXXX_STMR_PT_ENAB_E_2_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_2_DECL 2

/*
 * Enable Presentation Timer 3.
 */
#define IAXXX_STMR_PT_ENAB_E_3_MASK 0x00000008
#define IAXXX_STMR_PT_ENAB_E_3_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_3_POS 3
#define IAXXX_STMR_PT_ENAB_E_3_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_3_DECL 3

/*
 * Enable Presentation Timer 4.
 */
#define IAXXX_STMR_PT_ENAB_E_4_MASK 0x00000010
#define IAXXX_STMR_PT_ENAB_E_4_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_4_POS 4
#define IAXXX_STMR_PT_ENAB_E_4_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_4_DECL 4

/*
 * Enable Presentation Timer 5.
 */
#define IAXXX_STMR_PT_ENAB_E_5_MASK 0x00000020
#define IAXXX_STMR_PT_ENAB_E_5_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_5_POS 5
#define IAXXX_STMR_PT_ENAB_E_5_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_5_DECL 5

/*
 * Enable Presentation Timer 6.
 */
#define IAXXX_STMR_PT_ENAB_E_6_MASK 0x00000040
#define IAXXX_STMR_PT_ENAB_E_6_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_6_POS 6
#define IAXXX_STMR_PT_ENAB_E_6_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_6_DECL 6

/*
 * Enable Presentation Timer 7.
 */
#define IAXXX_STMR_PT_ENAB_E_7_MASK 0x00000080
#define IAXXX_STMR_PT_ENAB_E_7_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_7_POS 7
#define IAXXX_STMR_PT_ENAB_E_7_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_7_DECL 7

/*
 * Enable Presentation Timer 8.
 */
#define IAXXX_STMR_PT_ENAB_E_8_MASK 0x00000100
#define IAXXX_STMR_PT_ENAB_E_8_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_8_POS 8
#define IAXXX_STMR_PT_ENAB_E_8_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_8_DECL 8

/*
 * Enable Presentation Timer 9.
 */
#define IAXXX_STMR_PT_ENAB_E_9_MASK 0x00000200
#define IAXXX_STMR_PT_ENAB_E_9_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_9_POS 9
#define IAXXX_STMR_PT_ENAB_E_9_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_9_DECL 9

/*
 * Enable Presentation Timer 10.
 */
#define IAXXX_STMR_PT_ENAB_E_10_MASK 0x00000400
#define IAXXX_STMR_PT_ENAB_E_10_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_E_10_POS 10
#define IAXXX_STMR_PT_ENAB_E_10_SIZE 1
#define IAXXX_STMR_PT_ENAB_E_10_DECL 10

/*** STMR_EDGE_TYPE (0x4000400c) ***/
/*
 * Each field here has the edge detection type for the event that captures
 * each presentation time value.
 */
#define IAXXX_STMR_EDGE_TYPE_ADDR (0x4000400c)
#define IAXXX_STMR_EDGE_TYPE_MASK_VAL 0x003fffff
#define IAXXX_STMR_EDGE_TYPE_RMASK_VAL 0x003fffff
#define IAXXX_STMR_EDGE_TYPE_WMASK_VAL 0x003fffff
#define IAXXX_STMR_EDGE_TYPE_RESET_VAL 0x00000000

/*
 * Type of edge detected for the Presentation Timer 0 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_0_MASK 0x00000003
#define IAXXX_STMR_EDGE_TYPE_PT_0_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_0_POS 0
#define IAXXX_STMR_EDGE_TYPE_PT_0_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_0_DECL (1:0)

/*
 * Type of edge detected for the Presentation Timer 1 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_1_MASK 0x0000000c
#define IAXXX_STMR_EDGE_TYPE_PT_1_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_1_POS 2
#define IAXXX_STMR_EDGE_TYPE_PT_1_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_1_DECL (3:2)

/*
 * Type of edge detected for the Presentation Timer 2 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_2_MASK 0x00000030
#define IAXXX_STMR_EDGE_TYPE_PT_2_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_2_POS 4
#define IAXXX_STMR_EDGE_TYPE_PT_2_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_2_DECL (5:4)

/*
 * Type of edge detected for the Presentation Timer 3 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_3_MASK 0x000000c0
#define IAXXX_STMR_EDGE_TYPE_PT_3_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_3_POS 6
#define IAXXX_STMR_EDGE_TYPE_PT_3_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_3_DECL (7:6)

/*
 * Type of edge detected for the Presentation Timer 4 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_4_MASK 0x00000300
#define IAXXX_STMR_EDGE_TYPE_PT_4_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_4_POS 8
#define IAXXX_STMR_EDGE_TYPE_PT_4_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_4_DECL (9:8)

/*
 * Type of edge detected for the Presentation Timer 5 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_5_MASK 0x00000c00
#define IAXXX_STMR_EDGE_TYPE_PT_5_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_5_POS 10
#define IAXXX_STMR_EDGE_TYPE_PT_5_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_5_DECL (11:10)

/*
 * Type of edge detected for the Presentation Timer 6 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_6_MASK 0x00003000
#define IAXXX_STMR_EDGE_TYPE_PT_6_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_6_POS 12
#define IAXXX_STMR_EDGE_TYPE_PT_6_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_6_DECL (13:12)

/*
 * Type of edge detected for the Presentation Timer 7 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_7_MASK 0x0000c000
#define IAXXX_STMR_EDGE_TYPE_PT_7_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_7_POS 14
#define IAXXX_STMR_EDGE_TYPE_PT_7_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_7_DECL (15:14)

/*
 * Type of edge detected for the Presentation Timer 8 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_8_MASK 0x00030000
#define IAXXX_STMR_EDGE_TYPE_PT_8_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_8_POS 16
#define IAXXX_STMR_EDGE_TYPE_PT_8_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_8_DECL (17:16)

/*
 * Type of edge detected for the Presentation Timer 9 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_9_MASK 0x000c0000
#define IAXXX_STMR_EDGE_TYPE_PT_9_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_9_POS 18
#define IAXXX_STMR_EDGE_TYPE_PT_9_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_9_DECL (19:18)

/*
 * Type of edge detected for the Presentation Timer 10 event.
 * 00 - Rising edge detection.
 * 01 - Falling edge detection.
 * 10 - Both edges.
 * 11 - Both edges.
 */
#define IAXXX_STMR_EDGE_TYPE_PT_10_MASK 0x00300000
#define IAXXX_STMR_EDGE_TYPE_PT_10_RESET_VAL 0x0
#define IAXXX_STMR_EDGE_TYPE_PT_10_POS 20
#define IAXXX_STMR_EDGE_TYPE_PT_10_SIZE 2
#define IAXXX_STMR_EDGE_TYPE_PT_10_DECL (21:20)

/*** STMR_SER_CTL (0x40004010) ***/
/*
 * This registers selects between the 7 SERial sources-> I2C, SPI, DMX, HMDP,
 * and GPIO Interrupt.  These allow these 7 to be muxed onto the PT 8, PT_9
 * and PT 10 timestamp.
 */
#define IAXXX_STMR_SER_CTL_ADDR (0x40004010)
#define IAXXX_STMR_SER_CTL_MASK_VAL 0x00000fff
#define IAXXX_STMR_SER_CTL_RMASK_VAL 0x00000fff
#define IAXXX_STMR_SER_CTL_WMASK_VAL 0x00000fff
#define IAXXX_STMR_SER_CTL_RESET_VAL 0x00000fff

/*
 * Post-sync mux select for SERial sources onto the PT 8 timestamp.
 * x0 - x1 Selects between I20 - I2C1.
 * x2 - x7 Reserved.
 * x8 - x9 Selects between SPI0, and SPI1.
 * xA      Reserved.
 * xB      Selects DMX interrupt..
 * xC      Selects HMDP interrupt.
 * xD      Reserved.
 * xE      Selects GPIO interrupt.
 * xF      No SERial source selected.
 */
#define IAXXX_STMR_SER_CTL_SEL_8_MASK 0x0000000f
#define IAXXX_STMR_SER_CTL_SEL_8_RESET_VAL 0xf
#define IAXXX_STMR_SER_CTL_SEL_8_POS 0
#define IAXXX_STMR_SER_CTL_SEL_8_SIZE 4
#define IAXXX_STMR_SER_CTL_SEL_8_DECL (3:0)

/*
 * Post-sync mux select for SERial sources onto the PT 9 timestamp.
 * x0 - x1 Selects between I20 - I2C1.
 * x2 - x7 Reserved.
 * x8 - x9 Selects between SPI0, and SPI1.
 * xA      Reserved.
 * xB      Selects DMX interrupt..
 * xC      Selects HMDP interrupt.
 * xD      Reserved.
 * xE      Selects GPIO interrupt.
 * xF      No SERial source selected.
 */
#define IAXXX_STMR_SER_CTL_SEL_9_MASK 0x000000f0
#define IAXXX_STMR_SER_CTL_SEL_9_RESET_VAL 0xf
#define IAXXX_STMR_SER_CTL_SEL_9_POS 4
#define IAXXX_STMR_SER_CTL_SEL_9_SIZE 4
#define IAXXX_STMR_SER_CTL_SEL_9_DECL (7:4)

/*
 * Post-sync mux select for SERial sources onto the PT 10 timestamp.
 * x0 - x1 Selects between I20 - I2C1.
 * x2 - x7 Reserved.
 * x8 - x9 Selects between SPI0, and SPI1.
 * xA      Reserved.
 * xB      Selects DMX interrupt..
 * xC      Selects HMDP interrupt.
 * xD      Reserved.
 * xE      Selects GPIO interrupt.
 * xF      No SERial source selected.
 */
#define IAXXX_STMR_SER_CTL_SEL_10_MASK 0x00000f00
#define IAXXX_STMR_SER_CTL_SEL_10_RESET_VAL 0xf
#define IAXXX_STMR_SER_CTL_SEL_10_POS 8
#define IAXXX_STMR_SER_CTL_SEL_10_SIZE 4
#define IAXXX_STMR_SER_CTL_SEL_10_DECL (11:8)

/*** STMR_PT_VLD (0x40004014) ***/
/*
 * These are all the VLD (valid) bits for each presentation time stamp 0-9.
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.
 */
#define IAXXX_STMR_PT_VLD_ADDR (0x40004014)
#define IAXXX_STMR_PT_VLD_MASK_VAL 0x000007ff
#define IAXXX_STMR_PT_VLD_RMASK_VAL 0x000007ff
#define IAXXX_STMR_PT_VLD_WMASK_VAL 0x000007ff
#define IAXXX_STMR_PT_VLD_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp 0 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_0_MASK 0x00000001
#define IAXXX_STMR_PT_VLD_VLD_0_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_0_POS 0
#define IAXXX_STMR_PT_VLD_VLD_0_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_0_DECL 0

/*
 * Presentation Time Stamp 1 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_1_MASK 0x00000002
#define IAXXX_STMR_PT_VLD_VLD_1_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_1_POS 1
#define IAXXX_STMR_PT_VLD_VLD_1_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_1_DECL 1

/*
 * Presentation Time Stamp 2 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_2_MASK 0x00000004
#define IAXXX_STMR_PT_VLD_VLD_2_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_2_POS 2
#define IAXXX_STMR_PT_VLD_VLD_2_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_2_DECL 2

/*
 * Presentation Time Stamp 3 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_3_MASK 0x00000008
#define IAXXX_STMR_PT_VLD_VLD_3_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_3_POS 3
#define IAXXX_STMR_PT_VLD_VLD_3_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_3_DECL 3

/*
 * Presentation Time Stamp 4 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_4_MASK 0x00000010
#define IAXXX_STMR_PT_VLD_VLD_4_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_4_POS 4
#define IAXXX_STMR_PT_VLD_VLD_4_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_4_DECL 4

/*
 * Presentation Time Stamp 5 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_5_MASK 0x00000020
#define IAXXX_STMR_PT_VLD_VLD_5_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_5_POS 5
#define IAXXX_STMR_PT_VLD_VLD_5_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_5_DECL 5

/*
 * Presentation Time Stamp 6 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_6_MASK 0x00000040
#define IAXXX_STMR_PT_VLD_VLD_6_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_6_POS 6
#define IAXXX_STMR_PT_VLD_VLD_6_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_6_DECL 6

/*
 * Presentation Time Stamp 7 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_7_MASK 0x00000080
#define IAXXX_STMR_PT_VLD_VLD_7_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_7_POS 7
#define IAXXX_STMR_PT_VLD_VLD_7_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_7_DECL 7

/*
 * Presentation Time Stamp 8 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_8_MASK 0x00000100
#define IAXXX_STMR_PT_VLD_VLD_8_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_8_POS 8
#define IAXXX_STMR_PT_VLD_VLD_8_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_8_DECL 8

/*
 * Presentation Time Stamp 9 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_9_MASK 0x00000200
#define IAXXX_STMR_PT_VLD_VLD_9_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_9_POS 9
#define IAXXX_STMR_PT_VLD_VLD_9_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_9_DECL 9

/*
 * Presentation Time Stamp 10 is valid when this bit is 1.  In addition, if
 * set, then the Presentation Time Stamp will not change, and any timestamp
 * request will be dropped.
 */
#define IAXXX_STMR_PT_VLD_VLD_10_MASK 0x00000400
#define IAXXX_STMR_PT_VLD_VLD_10_RESET_VAL 0x0
#define IAXXX_STMR_PT_VLD_VLD_10_POS 10
#define IAXXX_STMR_PT_VLD_VLD_10_SIZE 1
#define IAXXX_STMR_PT_VLD_VLD_10_DECL 10

/*** STMR_PT_0 (0x40004018) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_0_ADDR (0x40004018)
#define IAXXX_STMR_PT_0_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_0_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_0_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_0_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_0_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_0_MISS_POS 0
#define IAXXX_STMR_PT_0_MISS_SIZE 1
#define IAXXX_STMR_PT_0_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_0_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_0_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_0_OVR_POS 1
#define IAXXX_STMR_PT_0_OVR_SIZE 1
#define IAXXX_STMR_PT_0_OVR_DECL 1

/*
 * Presentation Time Stamp 0
 */
#define IAXXX_STMR_PT_0_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_0_VAL_POS 8
#define IAXXX_STMR_PT_0_VAL_SIZE 24
#define IAXXX_STMR_PT_0_VAL_DECL (31:8)

/*** STMR_PT_1 (0x4000401c) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_1_ADDR (0x4000401c)
#define IAXXX_STMR_PT_1_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_1_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_1_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_1_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_1_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_1_MISS_POS 0
#define IAXXX_STMR_PT_1_MISS_SIZE 1
#define IAXXX_STMR_PT_1_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_1_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_1_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_1_OVR_POS 1
#define IAXXX_STMR_PT_1_OVR_SIZE 1
#define IAXXX_STMR_PT_1_OVR_DECL 1

/*
 * Presentation Time Stamp 1
 */
#define IAXXX_STMR_PT_1_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_1_VAL_POS 8
#define IAXXX_STMR_PT_1_VAL_SIZE 24
#define IAXXX_STMR_PT_1_VAL_DECL (31:8)

/*** STMR_PT_2 (0x40004020) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_2_ADDR (0x40004020)
#define IAXXX_STMR_PT_2_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_2_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_2_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_2_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_2_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_2_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_2_MISS_POS 0
#define IAXXX_STMR_PT_2_MISS_SIZE 1
#define IAXXX_STMR_PT_2_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_2_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_2_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_2_OVR_POS 1
#define IAXXX_STMR_PT_2_OVR_SIZE 1
#define IAXXX_STMR_PT_2_OVR_DECL 1

/*
 * Presentation Time Stamp 2
 */
#define IAXXX_STMR_PT_2_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_2_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_2_VAL_POS 8
#define IAXXX_STMR_PT_2_VAL_SIZE 24
#define IAXXX_STMR_PT_2_VAL_DECL (31:8)

/*** STMR_PT_3 (0x40004024) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_3_ADDR (0x40004024)
#define IAXXX_STMR_PT_3_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_3_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_3_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_3_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_3_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_3_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_3_MISS_POS 0
#define IAXXX_STMR_PT_3_MISS_SIZE 1
#define IAXXX_STMR_PT_3_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_3_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_3_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_3_OVR_POS 1
#define IAXXX_STMR_PT_3_OVR_SIZE 1
#define IAXXX_STMR_PT_3_OVR_DECL 1

/*
 * Presentation Time Stamp 3
 */
#define IAXXX_STMR_PT_3_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_3_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_3_VAL_POS 8
#define IAXXX_STMR_PT_3_VAL_SIZE 24
#define IAXXX_STMR_PT_3_VAL_DECL (31:8)

/*** STMR_PT_4 (0x40004028) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_4_ADDR (0x40004028)
#define IAXXX_STMR_PT_4_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_4_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_4_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_4_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_4_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_4_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_4_MISS_POS 0
#define IAXXX_STMR_PT_4_MISS_SIZE 1
#define IAXXX_STMR_PT_4_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_4_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_4_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_4_OVR_POS 1
#define IAXXX_STMR_PT_4_OVR_SIZE 1
#define IAXXX_STMR_PT_4_OVR_DECL 1

/*
 * Presentation Time Stamp 4
 */
#define IAXXX_STMR_PT_4_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_4_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_4_VAL_POS 8
#define IAXXX_STMR_PT_4_VAL_SIZE 24
#define IAXXX_STMR_PT_4_VAL_DECL (31:8)

/*** STMR_PT_5 (0x4000402c) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_5_ADDR (0x4000402c)
#define IAXXX_STMR_PT_5_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_5_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_5_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_5_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_5_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_5_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_5_MISS_POS 0
#define IAXXX_STMR_PT_5_MISS_SIZE 1
#define IAXXX_STMR_PT_5_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_5_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_5_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_5_OVR_POS 1
#define IAXXX_STMR_PT_5_OVR_SIZE 1
#define IAXXX_STMR_PT_5_OVR_DECL 1

/*
 * Presentation Time Stamp 5
 */
#define IAXXX_STMR_PT_5_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_5_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_5_VAL_POS 8
#define IAXXX_STMR_PT_5_VAL_SIZE 24
#define IAXXX_STMR_PT_5_VAL_DECL (31:8)

/*** STMR_PT_6 (0x40004030) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_6_ADDR (0x40004030)
#define IAXXX_STMR_PT_6_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_6_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_6_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_6_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_6_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_6_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_6_MISS_POS 0
#define IAXXX_STMR_PT_6_MISS_SIZE 1
#define IAXXX_STMR_PT_6_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_6_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_6_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_6_OVR_POS 1
#define IAXXX_STMR_PT_6_OVR_SIZE 1
#define IAXXX_STMR_PT_6_OVR_DECL 1

/*
 * Presentation Time Stamp 6
 */
#define IAXXX_STMR_PT_6_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_6_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_6_VAL_POS 8
#define IAXXX_STMR_PT_6_VAL_SIZE 24
#define IAXXX_STMR_PT_6_VAL_DECL (31:8)

/*** STMR_PT_7 (0x40004034) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_7_ADDR (0x40004034)
#define IAXXX_STMR_PT_7_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_7_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_7_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_7_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_7_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_7_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_7_MISS_POS 0
#define IAXXX_STMR_PT_7_MISS_SIZE 1
#define IAXXX_STMR_PT_7_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_7_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_7_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_7_OVR_POS 1
#define IAXXX_STMR_PT_7_OVR_SIZE 1
#define IAXXX_STMR_PT_7_OVR_DECL 1

/*
 * Presentation Time Stamp 7
 */
#define IAXXX_STMR_PT_7_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_7_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_7_VAL_POS 8
#define IAXXX_STMR_PT_7_VAL_SIZE 24
#define IAXXX_STMR_PT_7_VAL_DECL (31:8)

/*** STMR_PT_8 (0x40004038) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_8_ADDR (0x40004038)
#define IAXXX_STMR_PT_8_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_8_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_8_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_8_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_8_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_8_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_8_MISS_POS 0
#define IAXXX_STMR_PT_8_MISS_SIZE 1
#define IAXXX_STMR_PT_8_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_8_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_8_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_8_OVR_POS 1
#define IAXXX_STMR_PT_8_OVR_SIZE 1
#define IAXXX_STMR_PT_8_OVR_DECL 1

/*
 * Presentation Time Stamp 8
 */
#define IAXXX_STMR_PT_8_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_8_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_8_VAL_POS 8
#define IAXXX_STMR_PT_8_VAL_SIZE 24
#define IAXXX_STMR_PT_8_VAL_DECL (31:8)

/*** STMR_PT_9 (0x4000403c) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_9_ADDR (0x4000403c)
#define IAXXX_STMR_PT_9_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_9_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_9_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_9_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_9_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_9_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_9_MISS_POS 0
#define IAXXX_STMR_PT_9_MISS_SIZE 1
#define IAXXX_STMR_PT_9_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_9_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_9_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_9_OVR_POS 1
#define IAXXX_STMR_PT_9_OVR_SIZE 1
#define IAXXX_STMR_PT_9_OVR_DECL 1

/*
 * Presentation Time Stamp 9
 */
#define IAXXX_STMR_PT_9_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_9_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_9_VAL_POS 8
#define IAXXX_STMR_PT_9_VAL_SIZE 24
#define IAXXX_STMR_PT_9_VAL_DECL (31:8)

/*** STMR_PT_10 (0x40004040) ***/
/*
 * When the associated VLD bit is 1, provides the Wall Clock value when the
 * most recent Time Stamp request bit occurred.  A write of 1 to the field
 * will restore the VLD bit to 0 (invalid) to be ready for a subsequent
 * request.  The MISS and OVR also provide additional status.
 */
#define IAXXX_STMR_PT_10_ADDR (0x40004040)
#define IAXXX_STMR_PT_10_MASK_VAL 0xffffff03
#define IAXXX_STMR_PT_10_RMASK_VAL 0xffffff03
#define IAXXX_STMR_PT_10_WMASK_VAL 0x00000001
#define IAXXX_STMR_PT_10_RESET_VAL 0x00000000

/*
 * Presentation Time Stamp Missed. This indicates if a sample was missed.  It
 * is set to 1 if a timestamp requests ocurred while the VLD bit was set.
 * Cleared with a write of 1 to this bit. Associated PT_VLD bit should also
 * be cleared when MISS is seen. The missed sample status bit shall be
 * clearable upon a write of 1 to the bit.
 */
#define IAXXX_STMR_PT_10_MISS_MASK 0x00000001
#define IAXXX_STMR_PT_10_MISS_RESET_VAL 0x0
#define IAXXX_STMR_PT_10_MISS_POS 0
#define IAXXX_STMR_PT_10_MISS_SIZE 1
#define IAXXX_STMR_PT_10_MISS_DECL 0

/*
 * Presentation Time Stamp counter overflowed.  Cleared with a read to the
 * register.
 */
#define IAXXX_STMR_PT_10_OVR_MASK 0x00000002
#define IAXXX_STMR_PT_10_OVR_RESET_VAL 0x0
#define IAXXX_STMR_PT_10_OVR_POS 1
#define IAXXX_STMR_PT_10_OVR_SIZE 1
#define IAXXX_STMR_PT_10_OVR_DECL 1

/*
 * Presentation Time Stamp 10
 */
#define IAXXX_STMR_PT_10_VAL_MASK 0xffffff00
#define IAXXX_STMR_PT_10_VAL_RESET_VAL 0x0
#define IAXXX_STMR_PT_10_VAL_POS 8
#define IAXXX_STMR_PT_10_VAL_SIZE 24
#define IAXXX_STMR_PT_10_VAL_DECL (31:8)

/*** STMR_WALL_CLOCK (0x40004044) ***/
/*
 * Wall Clock Value.  Writing this register triggers the transfer.  Once
 * ENABLE.E is set, the wall clock counter will start counting from this
 * value.
 */
#define IAXXX_STMR_WALL_CLOCK_ADDR (0x40004044)
#define IAXXX_STMR_WALL_CLOCK_MASK_VAL 0xffffff00
#define IAXXX_STMR_WALL_CLOCK_RMASK_VAL 0xffffff00
#define IAXXX_STMR_WALL_CLOCK_WMASK_VAL 0xffffff00
#define IAXXX_STMR_WALL_CLOCK_RESET_VAL 0x00000000

/*
 * Wall Clock Value to write.
 */
#define IAXXX_STMR_WALL_CLOCK_VAL_MASK 0xffffff00
#define IAXXX_STMR_WALL_CLOCK_VAL_RESET_VAL 0x0
#define IAXXX_STMR_WALL_CLOCK_VAL_POS 8
#define IAXXX_STMR_WALL_CLOCK_VAL_SIZE 24
#define IAXXX_STMR_WALL_CLOCK_VAL_DECL (31:8)

/*** STMR_WALL_CLOCK_RD_0 (0x40004048) ***/
/*
 * Wall Clock Value.  This readback path is for debug only as it is
 * unsynchronized.
 */
#define IAXXX_STMR_WALL_CLOCK_RD_0_ADDR (0x40004048)
#define IAXXX_STMR_WALL_CLOCK_RD_0_MASK_VAL 0xffffff00
#define IAXXX_STMR_WALL_CLOCK_RD_0_RMASK_VAL 0xffffff00
#define IAXXX_STMR_WALL_CLOCK_RD_0_WMASK_VAL 0x00000000
#define IAXXX_STMR_WALL_CLOCK_RD_0_RESET_VAL 0x00000000

/*
 * Wall Clock Value to read
 */
#define IAXXX_STMR_WALL_CLOCK_RD_0_VAL_MASK 0xffffff00
#define IAXXX_STMR_WALL_CLOCK_RD_0_VAL_RESET_VAL 0x0
#define IAXXX_STMR_WALL_CLOCK_RD_0_VAL_POS 8
#define IAXXX_STMR_WALL_CLOCK_RD_0_VAL_SIZE 24
#define IAXXX_STMR_WALL_CLOCK_RD_0_VAL_DECL (31:8)

/*** STMR_TIMER_ENAB (0x4000404c) ***/
/*
 * For Enable, when set, the corresponding STMR Timer is enabled.  When
 * clear, the function is disabled and minimal power is consumed.
 * For Generate Reset Enable, when set, the corresponding STMR Timer Generate
 * Reset circuit is enabled.  When clear, that function is disabled.
 */
#define IAXXX_STMR_TIMER_ENAB_ADDR (0x4000404c)
#define IAXXX_STMR_TIMER_ENAB_MASK_VAL 0x000f000f
#define IAXXX_STMR_TIMER_ENAB_RMASK_VAL 0x000f000f
#define IAXXX_STMR_TIMER_ENAB_WMASK_VAL 0x000f000f
#define IAXXX_STMR_TIMER_ENAB_RESET_VAL 0x00000000

/*
 * STMR Timer 0 Enable.
 */
#define IAXXX_STMR_TIMER_ENAB_E_0_MASK 0x00000001
#define IAXXX_STMR_TIMER_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_ENAB_E_0_POS 0
#define IAXXX_STMR_TIMER_ENAB_E_0_SIZE 1
#define IAXXX_STMR_TIMER_ENAB_E_0_DECL 0

/*
 * STMR Timer 1 Enable.
 */
#define IAXXX_STMR_TIMER_ENAB_E_1_MASK 0x00000002
#define IAXXX_STMR_TIMER_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_ENAB_E_1_POS 1
#define IAXXX_STMR_TIMER_ENAB_E_1_SIZE 1
#define IAXXX_STMR_TIMER_ENAB_E_1_DECL 1

/*
 * STMR Timer 2 Enable.
 */
#define IAXXX_STMR_TIMER_ENAB_E_2_MASK 0x00000004
#define IAXXX_STMR_TIMER_ENAB_E_2_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_ENAB_E_2_POS 2
#define IAXXX_STMR_TIMER_ENAB_E_2_SIZE 1
#define IAXXX_STMR_TIMER_ENAB_E_2_DECL 2

/*
 * STMR Timer 3 Enable.
 */
#define IAXXX_STMR_TIMER_ENAB_E_3_MASK 0x00000008
#define IAXXX_STMR_TIMER_ENAB_E_3_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_ENAB_E_3_POS 3
#define IAXXX_STMR_TIMER_ENAB_E_3_SIZE 1
#define IAXXX_STMR_TIMER_ENAB_E_3_DECL 3

/*
 * STMR Timer 0 Generate Reset Enable. STMR Timer 0 Enable also needs to be
 * set.
 */
#define IAXXX_STMR_TIMER_ENAB_GRE_0_MASK 0x00010000
#define IAXXX_STMR_TIMER_ENAB_GRE_0_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_ENAB_GRE_0_POS 16
#define IAXXX_STMR_TIMER_ENAB_GRE_0_SIZE 1
#define IAXXX_STMR_TIMER_ENAB_GRE_0_DECL 16

/*
 * STMR Timer 1 Generate Reset Enable. STMR Timer 1 Enable also needs to be
 * set.
 */
#define IAXXX_STMR_TIMER_ENAB_GRE_1_MASK 0x00020000
#define IAXXX_STMR_TIMER_ENAB_GRE_1_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_ENAB_GRE_1_POS 17
#define IAXXX_STMR_TIMER_ENAB_GRE_1_SIZE 1
#define IAXXX_STMR_TIMER_ENAB_GRE_1_DECL 17

/*
 * STMR Timer 2 Generate Reset Enable. STMR Timer 2 Enable also needs to be
 * set.
 */
#define IAXXX_STMR_TIMER_ENAB_GRE_2_MASK 0x00040000
#define IAXXX_STMR_TIMER_ENAB_GRE_2_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_ENAB_GRE_2_POS 18
#define IAXXX_STMR_TIMER_ENAB_GRE_2_SIZE 1
#define IAXXX_STMR_TIMER_ENAB_GRE_2_DECL 18

/*
 * STMR Timer 3 Generate Reset Enable. STMR Timer 3 Enable also needs to be
 * set.
 */
#define IAXXX_STMR_TIMER_ENAB_GRE_3_MASK 0x00080000
#define IAXXX_STMR_TIMER_ENAB_GRE_3_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_ENAB_GRE_3_POS 19
#define IAXXX_STMR_TIMER_ENAB_GRE_3_SIZE 1
#define IAXXX_STMR_TIMER_ENAB_GRE_3_DECL 19

/*** STMR_TIMER_0 (0x40004050) ***/
/*
 * This contains the timer interrupt request and reset.  The specifics of
 * operation for the timer are indicated in the TIMER_MODE register.
 */
#define IAXXX_STMR_TIMER_0_ADDR (0x40004050)
#define IAXXX_STMR_TIMER_0_MASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_0_RMASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_0_WMASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_0_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (24 bits) for Timer 0
 */
#define IAXXX_STMR_TIMER_0_VAL_MASK 0xffffff00
#define IAXXX_STMR_TIMER_0_VAL_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_0_VAL_POS 8
#define IAXXX_STMR_TIMER_0_VAL_SIZE 24
#define IAXXX_STMR_TIMER_0_VAL_DECL (31:8)

/*** STMR_TIMER_1 (0x40004054) ***/
/*
 * This contains the timer interrupt request and reset.  The specifics of
 * operation for the timer are indicated in the TIMER_MODE register.
 */
#define IAXXX_STMR_TIMER_1_ADDR (0x40004054)
#define IAXXX_STMR_TIMER_1_MASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_1_RMASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_1_WMASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_1_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (24 bits) for Timer 1
 */
#define IAXXX_STMR_TIMER_1_VAL_MASK 0xffffff00
#define IAXXX_STMR_TIMER_1_VAL_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_1_VAL_POS 8
#define IAXXX_STMR_TIMER_1_VAL_SIZE 24
#define IAXXX_STMR_TIMER_1_VAL_DECL (31:8)

/*** STMR_TIMER_2 (0x40004058) ***/
/*
 * This contains the timer interrupt request and reset.  The specifics of
 * operation for the timer are indicated in the TIMER_MODE register.
 */
#define IAXXX_STMR_TIMER_2_ADDR (0x40004058)
#define IAXXX_STMR_TIMER_2_MASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_2_RMASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_2_WMASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_2_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (24 bits) for Timer 2
 */
#define IAXXX_STMR_TIMER_2_VAL_MASK 0xffffff00
#define IAXXX_STMR_TIMER_2_VAL_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_2_VAL_POS 8
#define IAXXX_STMR_TIMER_2_VAL_SIZE 24
#define IAXXX_STMR_TIMER_2_VAL_DECL (31:8)

/*** STMR_TIMER_3 (0x4000405c) ***/
/*
 * This contains the timer interrupt request and reset.  The specifics of
 * operation for the timer are indicated in the TIMER_MODE register.
 */
#define IAXXX_STMR_TIMER_3_ADDR (0x4000405c)
#define IAXXX_STMR_TIMER_3_MASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_3_RMASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_3_WMASK_VAL 0xffffff00
#define IAXXX_STMR_TIMER_3_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (24 bits) for Timer 3
 */
#define IAXXX_STMR_TIMER_3_VAL_MASK 0xffffff00
#define IAXXX_STMR_TIMER_3_VAL_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_3_VAL_POS 8
#define IAXXX_STMR_TIMER_3_VAL_SIZE 24
#define IAXXX_STMR_TIMER_3_VAL_DECL (31:8)

/*** STMR_WAKEUP_INTR (0x40004060) ***/
/*
 * Contains the timer wakeup interrupt status for each timer.  This
 * "interrupt" (it is not a true interrupt) is generated exactly under the
 * same condition as the STRM timer interrupt shown in the previous
 * register.  However, it is a level "interrupt", which will be used to
 * trigger the "wakeup" in the sctrl module when pd8 is off, instead of the
 * pctrl signals.  Note that since it's active high, the status of this bit
 * can be reset by de-asserting the respective TIMER_ENAB bit and then
 * enabling it before writing the STRM TIMER_0/1 registers.
 */
#define IAXXX_STMR_WAKEUP_INTR_ADDR (0x40004060)
#define IAXXX_STMR_WAKEUP_INTR_MASK_VAL 0x0000000f
#define IAXXX_STMR_WAKEUP_INTR_RMASK_VAL 0x0000000f
#define IAXXX_STMR_WAKEUP_INTR_WMASK_VAL 0x00000000
#define IAXXX_STMR_WAKEUP_INTR_RESET_VAL 0x00000000

/*
 * A timer wakeup interrupt condition has occurred for timer 0.
 */
#define IAXXX_STMR_WAKEUP_INTR_STS_0_MASK 0x00000001
#define IAXXX_STMR_WAKEUP_INTR_STS_0_RESET_VAL 0x0
#define IAXXX_STMR_WAKEUP_INTR_STS_0_POS 0
#define IAXXX_STMR_WAKEUP_INTR_STS_0_SIZE 1
#define IAXXX_STMR_WAKEUP_INTR_STS_0_DECL 0

/*
 * A timer wakeup interrupt condition has occurred for timer 1.
 */
#define IAXXX_STMR_WAKEUP_INTR_STS_1_MASK 0x00000002
#define IAXXX_STMR_WAKEUP_INTR_STS_1_RESET_VAL 0x0
#define IAXXX_STMR_WAKEUP_INTR_STS_1_POS 1
#define IAXXX_STMR_WAKEUP_INTR_STS_1_SIZE 1
#define IAXXX_STMR_WAKEUP_INTR_STS_1_DECL 1

/*
 * A timer wakeup interrupt condition has occurred for timer 2.
 */
#define IAXXX_STMR_WAKEUP_INTR_STS_2_MASK 0x00000004
#define IAXXX_STMR_WAKEUP_INTR_STS_2_RESET_VAL 0x0
#define IAXXX_STMR_WAKEUP_INTR_STS_2_POS 2
#define IAXXX_STMR_WAKEUP_INTR_STS_2_SIZE 1
#define IAXXX_STMR_WAKEUP_INTR_STS_2_DECL 2

/*
 * A timer wakeup interrupt condition has occurred for timer 3.
 */
#define IAXXX_STMR_WAKEUP_INTR_STS_3_MASK 0x00000008
#define IAXXX_STMR_WAKEUP_INTR_STS_3_RESET_VAL 0x0
#define IAXXX_STMR_WAKEUP_INTR_STS_3_POS 3
#define IAXXX_STMR_WAKEUP_INTR_STS_3_SIZE 1
#define IAXXX_STMR_WAKEUP_INTR_STS_3_DECL 3

/*** STMR_PT_ENAB_BUSY (0x40004064) ***/
/*
 * This register indicates, if not busy, that a write to PT_ENAB can be
 * safely made.
 */
#define IAXXX_STMR_PT_ENAB_BUSY_ADDR (0x40004064)
#define IAXXX_STMR_PT_ENAB_BUSY_MASK_VAL 0x00000001
#define IAXXX_STMR_PT_ENAB_BUSY_RMASK_VAL 0x00000001
#define IAXXX_STMR_PT_ENAB_BUSY_WMASK_VAL 0x00000000
#define IAXXX_STMR_PT_ENAB_BUSY_RESET_VAL 0x00000000

/*
 * 0: Write to PT_ENAB is NOT busy.
 * 1: Write to PT_ENAB is busy.
 */
#define IAXXX_STMR_PT_ENAB_BUSY_B_MASK 0x00000001
#define IAXXX_STMR_PT_ENAB_BUSY_B_RESET_VAL 0x0
#define IAXXX_STMR_PT_ENAB_BUSY_B_POS 0
#define IAXXX_STMR_PT_ENAB_BUSY_B_SIZE 1
#define IAXXX_STMR_PT_ENAB_BUSY_B_DECL 0

/*** STMR_TIMER_MODE (0x40004068) ***/
/*
 * Mode register for timers.
 */
#define IAXXX_STMR_TIMER_MODE_ADDR (0x40004068)
#define IAXXX_STMR_TIMER_MODE_MASK_VAL 0x00000f0f
#define IAXXX_STMR_TIMER_MODE_RMASK_VAL 0x00000f0f
#define IAXXX_STMR_TIMER_MODE_WMASK_VAL 0x00000f0f
#define IAXXX_STMR_TIMER_MODE_RESET_VAL 0x00000000

/*
 * STMR Timer 0 Mode.  If set to 1, then timers will operate in enhanced
 * (non-legacy) mode, which is determined by the STMR Timer OP_0 bit.
 * TIMER_MODE.M_0 is 0 : When written with a value corresponding to the LS 24
 * bits of a STMR Wall Clock value that will be achieved in the next 4.1
 * seconds, or that had been achieved in the previous 1.37 seconds, a
 * corresponding Wall Clock Timer interrupt and (if enabled) a Reset will be
 * generated -> a toggle bit for the pctrl module (for the interrupt) and
 * potentially a reset (for the reset case) .  The interrupt/Reset will occur
 * immediately for values in the past, and at the time the Wall Clock
 * achieves the written value for values in the future.  Writing a new value
 * while a previous value is pending cancels pre-empts the previous interrupt
 * request/reset.  Note that the status of this interrupt can only be seen in
 * the pctrl module.  This is the legacy mode.
 * TIMER_MODE.M_0 is 1 : Timer will operate in enhanced mode, depending on
 * the TIMER_MODE.OP_0 bit.
 */
#define IAXXX_STMR_TIMER_MODE_M_0_MASK 0x00000001
#define IAXXX_STMR_TIMER_MODE_M_0_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_MODE_M_0_POS 0
#define IAXXX_STMR_TIMER_MODE_M_0_SIZE 1
#define IAXXX_STMR_TIMER_MODE_M_0_DECL 0

/*
 * STMR Timer 1 Mode.  If set to 1, then timers will operate in enhanced
 * (non-legacy) mode, which is determined by the STMR Timer OP_1 bit.
 * TIMER_MODE.M_1 is 0 : When written with a value corresponding to the LS 24
 * bits of a STMR Wall Clock value that will be achieved in the next 4.1
 * seconds, or that had been achieved in the previous 1.37 seconds, a
 * corresponding Wall Clock Timer interrupt and (if enabled) a Reset will be
 * generated -> a toggle bit for the pctrl module (for the interrupt) and
 * potentially a reset (for the reset case) .  The interrupt/Reset will occur
 * immediately for values in the past, and at the time the Wall Clock
 * achieves the written value for values in the future.  Writing a new value
 * while a previous value is pending cancels pre-empts the previous interrupt
 * request/reset.  Note that the status of this interrupt can only be seen in
 * the pctrl module.  This is the legacy mode.
 * TIMER_MODE.M_1 is 1 : Timer will operate in enhanced mode, depending on
 * the TIMER_MODE.OP_1 bit.
 */
#define IAXXX_STMR_TIMER_MODE_M_1_MASK 0x00000002
#define IAXXX_STMR_TIMER_MODE_M_1_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_MODE_M_1_POS 1
#define IAXXX_STMR_TIMER_MODE_M_1_SIZE 1
#define IAXXX_STMR_TIMER_MODE_M_1_DECL 1

/*
 * STMR Timer 2 Mode.  If set to 1, then timers will operate in enhanced
 * (non-legacy) mode, which is determined by the STMR Timer OP_2 bit.
 * TIMER_MODE.M_2 is 0 : When written with a value corresponding to the LS 24
 * bits of a STMR Wall Clock value that will be achieved in the next 4.1
 * seconds, or that had been achieved in the previous 1.37 seconds, a
 * corresponding Wall Clock Timer interrupt and (if enabled) a Reset will be
 * generated -> a toggle bit for the pctrl module (for the interrupt) and
 * potentially a reset (for the reset case) .  The interrupt/Reset will occur
 * immediately for values in the past, and at the time the Wall Clock
 * achieves the written value for values in the future.  Writing a new value
 * while a previous value is pending cancels pre-empts the previous interrupt
 * request/reset.  Note that the status of this interrupt can only be seen in
 * the pctrl module.  This is the legacy mode.
 * TIMER_MODE.M_2 is 1 : Timer will operate in enhanced mode, depending on
 * the TIMER_MODE.OP_2 bit.
 */
#define IAXXX_STMR_TIMER_MODE_M_2_MASK 0x00000004
#define IAXXX_STMR_TIMER_MODE_M_2_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_MODE_M_2_POS 2
#define IAXXX_STMR_TIMER_MODE_M_2_SIZE 1
#define IAXXX_STMR_TIMER_MODE_M_2_DECL 2

/*
 * STMR Timer 3 Mode.  If set to 1, then timers will operate in enhanced
 * (non-legacy) mode, which is determined by the STMR Timer OP_3 bit.
 * TIMER_MODE.M_3 is 0 : When written with a value corresponding to the LS 24
 * bits of a STMR Wall Clock value that will be achieved in the next 4.1
 * seconds, or that had been achieved in the previous 1.37 seconds, a
 * corresponding Wall Clock Timer interrupt and (if enabled) a Reset will be
 * generated -> a toggle bit for the pctrl module (for the interrupt) and
 * potentially a reset (for the reset case) .  The interrupt/Reset will occur
 * immediately for values in the past, and at the time the Wall Clock
 * achieves the written value for values in the future.  Writing a new value
 * while a previous value is pending cancels pre-empts the previous interrupt
 * request/reset.  Note that the status of this interrupt can only be seen in
 * the pctrl module.  This is the legacy mode.
 * TIMER_MODE.M_3 is 1 : Timer will operate in enhanced mode, depending on
 * the TIMER_MODE.OP_3 bit.
 */
#define IAXXX_STMR_TIMER_MODE_M_3_MASK 0x00000008
#define IAXXX_STMR_TIMER_MODE_M_3_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_MODE_M_3_POS 3
#define IAXXX_STMR_TIMER_MODE_M_3_SIZE 1
#define IAXXX_STMR_TIMER_MODE_M_3_DECL 3

/*
 * STMR Timer Enhanced mode OPeration.  If M_0 was set, then value of OP_0
 * selects between two types of operation for the timers.  If M_0 was NOT
 * set, OP_0 is not used at all.
 * 0: The timer 24-bit value represents a relative offset of up to 5.47
 * seconds relative to the current Wall Clock value.  When that timer value
 * has expired, a corresponding Wall Clock Timer interrupt and (if enabled) a
 * Reset will be generated.  The timer will then begin to count again and
 * repeat the cycle.
 * 1: The timer 24-bit value represents a relative offset of up to 5.47
 * seconds relative to the current Wall Clock value.  When that timer value
 * has expired, only a corresponding Wall Clock Timer interrupt will be
 * generated . The timer will then begin to count again after which it will
 * generate a RESET if the GRE_0 is set, and after which the counter will not
 * count anymore.
 */
#define IAXXX_STMR_TIMER_MODE_OP_0_MASK 0x00000100
#define IAXXX_STMR_TIMER_MODE_OP_0_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_MODE_OP_0_POS 8
#define IAXXX_STMR_TIMER_MODE_OP_0_SIZE 1
#define IAXXX_STMR_TIMER_MODE_OP_0_DECL 8

/*
 * STMR Timer Enhanced mode OPeration.  If M_1 was set, then value of OP_1
 * selects between two types of operation for the timers.  If M_1 was NOT
 * set, OP_1 is not used at all.
 * 0: The timer 24-bit value represents a relative offset of up to 5.47
 * seconds relative to the current Wall Clock value.  When that timer value
 * has expired, a corresponding Wall Clock Timer interrupt and (if enabled) a
 * Reset will be generated.  The timer will then begin to count again and
 * repeat the cycle.
 * 1: The timer 24-bit value represents a relative offset of up to 5.47
 * seconds relative to the current Wall Clock value.  When that timer value
 * has expired, only a corresponding Wall Clock Timer interrupt will be
 * generated . The timer will then begin to count again after which it will
 * generate a RESET if the GRE_1 is set, and after which the counter will not
 * count anymore.
 */
#define IAXXX_STMR_TIMER_MODE_OP_1_MASK 0x00000200
#define IAXXX_STMR_TIMER_MODE_OP_1_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_MODE_OP_1_POS 9
#define IAXXX_STMR_TIMER_MODE_OP_1_SIZE 1
#define IAXXX_STMR_TIMER_MODE_OP_1_DECL 9

/*
 * STMR Timer Enhanced mode OPeration.  If M_2 was set, then value of OP_2
 * selects between two types of operation for the timers.  If M_2 was NOT
 * set, OP_2 is not used at all.
 * 0: The timer 24-bit value represents a relative offset of up to 5.47
 * seconds relative to the current Wall Clock value.  When that timer value
 * has expired, a corresponding Wall Clock Timer interrupt and (if enabled) a
 * Reset will be generated.  The timer will then begin to count again and
 * repeat the cycle.
 * 1: The timer 24-bit value represents a relative offset of up to 5.47
 * seconds relative to the current Wall Clock value.  When that timer value
 * has expired, only a corresponding Wall Clock Timer interrupt will be
 * generated . The timer will then begin to count again after which it will
 * generate a RESET if the GRE_2 is set, and after which the counter will not
 * count anymore.
 */
#define IAXXX_STMR_TIMER_MODE_OP_2_MASK 0x00000400
#define IAXXX_STMR_TIMER_MODE_OP_2_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_MODE_OP_2_POS 10
#define IAXXX_STMR_TIMER_MODE_OP_2_SIZE 1
#define IAXXX_STMR_TIMER_MODE_OP_2_DECL 10

/*
 * STMR Timer Enhanced mode OPeration.  If M_3 was set, then value of OP_3
 * selects between two types of operation for the timers.  If M_3 was NOT
 * set, OP_3 is not used at all.
 * 0: The timer 24-bit value represents a relative offset of up to 5.47
 * seconds relative to the current Wall Clock value.  When that timer value
 * has expired, a corresponding Wall Clock Timer interrupt and (if enabled) a
 * Reset will be generated.  The timer will then begin to count again and
 * repeat the cycle.
 * 1: The timer 24-bit value represents a relative offset of up to 5.47
 * seconds relative to the current Wall Clock value.  When that timer value
 * has expired, only a corresponding Wall Clock Timer interrupt will be
 * generated . The timer will then begin to count again after which it will
 * generate a RESET if the GRE_3 is set, and after which the counter will not
 * count anymore.
 */
#define IAXXX_STMR_TIMER_MODE_OP_3_MASK 0x00000800
#define IAXXX_STMR_TIMER_MODE_OP_3_RESET_VAL 0x0
#define IAXXX_STMR_TIMER_MODE_OP_3_POS 11
#define IAXXX_STMR_TIMER_MODE_OP_3_SIZE 1
#define IAXXX_STMR_TIMER_MODE_OP_3_DECL 11

/* Number of registers in the module */
#define IAXXX_STMR_REG_NUM 27

#endif /* __IAXXX_REGISTER_DEFS_STMR_H__*/
