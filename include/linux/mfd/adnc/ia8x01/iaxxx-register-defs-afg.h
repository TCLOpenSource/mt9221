/*
 * iaxxx-register-defs-afg.h
 *
 * Copyright (c) 2018 Knowles, inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/**********************************************************
 * This file is generated by running a format script
 * on header files shared by Firmware.
 *
 * DO NOT EDIT.
 *
 *********************************************************/

#ifndef __IAXXX_REGISTER_DEFS_AFG_H__
#define __IAXXX_REGISTER_DEFS_AFG_H__

/*** The base address for this set of registers ***/
#define IAXXX_AFG_REGS_ADDR (0x40070000)

/*** AFG_ENABLE (0x40070000) ***/
/*
 * This register is used to enable ARDBEG frame
 */
#define IAXXX_AFG_ENABLE_ADDR (0x40070000)
#define IAXXX_AFG_ENABLE_MASK_VAL 0x00000001
#define IAXXX_AFG_ENABLE_RMASK_VAL 0x00000001
#define IAXXX_AFG_ENABLE_WMASK_VAL 0x00000001
#define IAXXX_AFG_ENABLE_RESET_VAL 0x00000000

/*
 * 0 - Disable AFG module
 * 1 - Enable AFG module
 */
#define IAXXX_AFG_ENABLE_ENABLE_MASK 0x00000001
#define IAXXX_AFG_ENABLE_ENABLE_RESET_VAL 0x0
#define IAXXX_AFG_ENABLE_ENABLE_POS 0
#define IAXXX_AFG_ENABLE_ENABLE_SIZE 1
#define IAXXX_AFG_ENABLE_ENABLE_DECL 0

/*** AFG_LR_CTRL (0x40070004) ***/
/*
 * Sets the default value of Ardbeg Master data output. In this project we
 * support only zero.Added for future enhancement
 */
#define IAXXX_AFG_LR_CTRL_ADDR (0x40070004)
#define IAXXX_AFG_LR_CTRL_MASK_VAL 0x00000001
#define IAXXX_AFG_LR_CTRL_RMASK_VAL 0x00000001
#define IAXXX_AFG_LR_CTRL_WMASK_VAL 0x00000001
#define IAXXX_AFG_LR_CTRL_RESET_VAL 0x00000000

/*
 * 0 - The  Ardbeg Master data output is updated on the negative edge of the
 * clock. Only this is supported for Shapiro
 * 1 - The  Ardbeg Master data output is updated on the positive edge of the
 * clock. For future use (not to be used in Shapiro)
 */
#define IAXXX_AFG_LR_CTRL_LR_CTRL_MASK 0x00000001
#define IAXXX_AFG_LR_CTRL_LR_CTRL_RESET_VAL 0x0
#define IAXXX_AFG_LR_CTRL_LR_CTRL_POS 0
#define IAXXX_AFG_LR_CTRL_LR_CTRL_SIZE 1
#define IAXXX_AFG_LR_CTRL_LR_CTRL_DECL 0

/*** AFG_TRIGGER (0x40070008) ***/
/*
 * Trigger
 */
#define IAXXX_AFG_TRIGGER_ADDR (0x40070008)
#define IAXXX_AFG_TRIGGER_MASK_VAL 0x00000001
#define IAXXX_AFG_TRIGGER_RMASK_VAL 0x00000001
#define IAXXX_AFG_TRIGGER_WMASK_VAL 0x00000000
#define IAXXX_AFG_TRIGGER_RESET_VAL 0x00000000

/*
 * Write 1 to start ardbeg transaction. For every Ardbge transaction, this
 * should be written after the setup is done. Setup includes providing data
 * to SPI fifos and AFG registers (CMD_WINDOW, GAP_WINDOW, RSP_WINDOW). It
 * will always read back as 0.
 */
#define IAXXX_AFG_TRIGGER_TRIGGER_MASK 0x00000001
#define IAXXX_AFG_TRIGGER_TRIGGER_RESET_VAL 0x0
#define IAXXX_AFG_TRIGGER_TRIGGER_POS 0
#define IAXXX_AFG_TRIGGER_TRIGGER_SIZE 1
#define IAXXX_AFG_TRIGGER_TRIGGER_DECL 0

/*** AFG_CMD_WINDOW (0x4007000c) ***/
/*
 * Number of bytes in Ardbeg command
 */
#define IAXXX_AFG_CMD_WINDOW_ADDR (0x4007000c)
#define IAXXX_AFG_CMD_WINDOW_MASK_VAL 0x0000000f
#define IAXXX_AFG_CMD_WINDOW_RMASK_VAL 0x0000000f
#define IAXXX_AFG_CMD_WINDOW_WMASK_VAL 0x0000000f
#define IAXXX_AFG_CMD_WINDOW_RESET_VAL 0x00000000

/*
 * Number of bytes in command phase(preamble+command+data+crc).Chip select
 * will be asserted for (8*CMD_NUM_BYTES) number of clock cycles
 */
#define IAXXX_AFG_CMD_WINDOW_CMD_NUM_BYTES_MASK 0x0000000f
#define IAXXX_AFG_CMD_WINDOW_CMD_NUM_BYTES_RESET_VAL 0x0
#define IAXXX_AFG_CMD_WINDOW_CMD_NUM_BYTES_POS 0
#define IAXXX_AFG_CMD_WINDOW_CMD_NUM_BYTES_SIZE 4
#define IAXXX_AFG_CMD_WINDOW_CMD_NUM_BYTES_DECL (3:0)

/*** AFG_GAP_WINDOW (0x40070010) ***/
/*
 * Number of response latency cycles in Ardbeg transaction
 */
#define IAXXX_AFG_GAP_WINDOW_ADDR (0x40070010)
#define IAXXX_AFG_GAP_WINDOW_MASK_VAL 0x0000003f
#define IAXXX_AFG_GAP_WINDOW_RMASK_VAL 0x0000003f
#define IAXXX_AFG_GAP_WINDOW_WMASK_VAL 0x0000003f
#define IAXXX_AFG_GAP_WINDOW_RESET_VAL 0x00000000

/*
 * Number of cycles needed for response latency. If the required latency is
 * 7.5, write 6 to this register. AFG module will deassert chip select for
 * that many clock cycles
 */
#define IAXXX_AFG_GAP_WINDOW_GAP_CYCLES_MASK 0x0000003f
#define IAXXX_AFG_GAP_WINDOW_GAP_CYCLES_RESET_VAL 0x0
#define IAXXX_AFG_GAP_WINDOW_GAP_CYCLES_POS 0
#define IAXXX_AFG_GAP_WINDOW_GAP_CYCLES_SIZE 6
#define IAXXX_AFG_GAP_WINDOW_GAP_CYCLES_DECL (5:0)

/*** AFG_RSP_WINDOW (0x40070014) ***/
/*
 * Number of bytes in Ardbeg response
 */
#define IAXXX_AFG_RSP_WINDOW_ADDR (0x40070014)
#define IAXXX_AFG_RSP_WINDOW_MASK_VAL 0x0000000f
#define IAXXX_AFG_RSP_WINDOW_RMASK_VAL 0x0000000f
#define IAXXX_AFG_RSP_WINDOW_WMASK_VAL 0x0000000f
#define IAXXX_AFG_RSP_WINDOW_RESET_VAL 0x00000000

/*
 * Number of bytes in ardbeg response.Chip select will be asserted for
 * 8*RSP_NUM_BYTES number of clock cycles
 */
#define IAXXX_AFG_RSP_WINDOW_RSP_NUM_BYTES_MASK 0x0000000f
#define IAXXX_AFG_RSP_WINDOW_RSP_NUM_BYTES_RESET_VAL 0x0
#define IAXXX_AFG_RSP_WINDOW_RSP_NUM_BYTES_POS 0
#define IAXXX_AFG_RSP_WINDOW_RSP_NUM_BYTES_SIZE 4
#define IAXXX_AFG_RSP_WINDOW_RSP_NUM_BYTES_DECL (3:0)

/*** AFG_MSEL_HOLD (0x40070018) ***/
/*
 * MSEL value.
 */
#define IAXXX_AFG_MSEL_HOLD_ADDR (0x40070018)
#define IAXXX_AFG_MSEL_HOLD_MASK_VAL 0x00000001
#define IAXXX_AFG_MSEL_HOLD_RMASK_VAL 0x00000001
#define IAXXX_AFG_MSEL_HOLD_WMASK_VAL 0x00000000
#define IAXXX_AFG_MSEL_HOLD_RESET_VAL 0x00000000

/*
 * Holds the MSEL value
 */
#define IAXXX_AFG_MSEL_HOLD_MSEL_HOLD_MASK 0x00000001
#define IAXXX_AFG_MSEL_HOLD_MSEL_HOLD_RESET_VAL 0x0
#define IAXXX_AFG_MSEL_HOLD_MSEL_HOLD_POS 0
#define IAXXX_AFG_MSEL_HOLD_MSEL_HOLD_SIZE 1
#define IAXXX_AFG_MSEL_HOLD_MSEL_HOLD_DECL 0

/*** AFG_AFG_RAW_INTR (0x4007001c) ***/
/*
 * AFG raw interrupts.
 */
#define IAXXX_AFG_AFG_RAW_INTR_ADDR (0x4007001c)
#define IAXXX_AFG_AFG_RAW_INTR_MASK_VAL 0x00000007
#define IAXXX_AFG_AFG_RAW_INTR_RMASK_VAL 0x00000007
#define IAXXX_AFG_AFG_RAW_INTR_WMASK_VAL 0x00000007
#define IAXXX_AFG_AFG_RAW_INTR_RESET_VAL 0x00000000

/*
 * Sets 1 when sampled Msel rising edge detected.Write 1 to clear the
 * interrupt
 */
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_POS_EDGE_MASK 0x00000001
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_POS_EDGE_RESET_VAL 0x0
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_POS_EDGE_POS 0
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_POS_EDGE_SIZE 1
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_POS_EDGE_DECL 0

/*
 * Sets 1 when sampled Msel falling edge detected.Write 1 to clear the
 * interrupt
 */
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_NEG_EDGE_MASK 0x00000002
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_NEG_EDGE_RESET_VAL 0x0
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_NEG_EDGE_POS 1
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_NEG_EDGE_SIZE 1
#define IAXXX_AFG_AFG_RAW_INTR_SAMPLED_MSEL_NEG_EDGE_DECL 1

/*
 * sets 1 when one ardbeg transaction is completed.Write 1 to clear the
 * interrupt
 */
#define IAXXX_AFG_AFG_RAW_INTR_ARDBEG_TRANS_COMPLETED_MASK 0x00000004
#define IAXXX_AFG_AFG_RAW_INTR_ARDBEG_TRANS_COMPLETED_RESET_VAL 0x0
#define IAXXX_AFG_AFG_RAW_INTR_ARDBEG_TRANS_COMPLETED_POS 2
#define IAXXX_AFG_AFG_RAW_INTR_ARDBEG_TRANS_COMPLETED_SIZE 1
#define IAXXX_AFG_AFG_RAW_INTR_ARDBEG_TRANS_COMPLETED_DECL 2

/*** AFG_AFG_INTR_UNMASK (0x40070020) ***/
/*
 * Unmask control for AFG interrupts
 */
#define IAXXX_AFG_AFG_INTR_UNMASK_ADDR (0x40070020)
#define IAXXX_AFG_AFG_INTR_UNMASK_MASK_VAL 0x00000007
#define IAXXX_AFG_AFG_INTR_UNMASK_RMASK_VAL 0x00000007
#define IAXXX_AFG_AFG_INTR_UNMASK_WMASK_VAL 0x00000007
#define IAXXX_AFG_AFG_INTR_UNMASK_RESET_VAL 0x00000000

/*
 * 0 - Mask SAMPLED_MSEL_POS_EDGE interrupt.
 * 1 - Unmask SAMPLED_MSEL_POS_EDGE interrupt.
 */
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_POS_EDGE_MASK 0x00000001
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_POS_EDGE_RESET_VAL 0x0
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_POS_EDGE_POS 0
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_POS_EDGE_SIZE 1
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_POS_EDGE_DECL 0

/*
 * 0 - Mask SAMPLED_MSEL_NEG_EDGE interrupt.
 * 1 - Unmask SAMPLED_MSEL_NEG_EDGE interrupt.
 */
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_NEG_EDGE_MASK 0x00000002
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_NEG_EDGE_RESET_VAL 0x0
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_NEG_EDGE_POS 1
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_NEG_EDGE_SIZE 1
#define IAXXX_AFG_AFG_INTR_UNMASK_SAMPLED_MSEL_NEG_EDGE_DECL 1

/*
 * 0 - Mask COMPLETED_ARDBEG_TRANS interrupt.
 * 1 - Unmask COMPLETED_ARDBEG_TRANS interrupt.
 */
#define IAXXX_AFG_AFG_INTR_UNMASK_ARDBEG_TRANS_COMPLETED_MASK 0x00000004
#define IAXXX_AFG_AFG_INTR_UNMASK_ARDBEG_TRANS_COMPLETED_RESET_VAL 0x0
#define IAXXX_AFG_AFG_INTR_UNMASK_ARDBEG_TRANS_COMPLETED_POS 2
#define IAXXX_AFG_AFG_INTR_UNMASK_ARDBEG_TRANS_COMPLETED_SIZE 1
#define IAXXX_AFG_AFG_INTR_UNMASK_ARDBEG_TRANS_COMPLETED_DECL 2

/*** AFG_AFG_INTR (0x40070024) ***/
/*
 * The mask is ANDed with corresponding raw interrupts bit and stored in this
 * register. All these interrupts get ORed to generate single interrupt
 * output.
 */
#define IAXXX_AFG_AFG_INTR_ADDR (0x40070024)
#define IAXXX_AFG_AFG_INTR_MASK_VAL 0x00000007
#define IAXXX_AFG_AFG_INTR_RMASK_VAL 0x00000007
#define IAXXX_AFG_AFG_INTR_WMASK_VAL 0x00000000
#define IAXXX_AFG_AFG_INTR_RESET_VAL 0x00000000

/*
 * SAMPLED_MSEL_POS_EDGE interrupt.
 */
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_POS_EDGE_MASK 0x00000001
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_POS_EDGE_RESET_VAL 0x0
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_POS_EDGE_POS 0
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_POS_EDGE_SIZE 1
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_POS_EDGE_DECL 0

/*
 * SAMPLED_MSEL_NEG_EDGE interrupt.
 */
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_NEG_EDGE_MASK 0x00000002
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_NEG_EDGE_RESET_VAL 0x0
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_NEG_EDGE_POS 1
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_NEG_EDGE_SIZE 1
#define IAXXX_AFG_AFG_INTR_SAMPLED_MSEL_NEG_EDGE_DECL 1

/*
 * COMPLETED_ARDBEG_TRANS interrupt.
 */
#define IAXXX_AFG_AFG_INTR_ARDBEG_TRANS_COMPLETED_MASK 0x00000004
#define IAXXX_AFG_AFG_INTR_ARDBEG_TRANS_COMPLETED_RESET_VAL 0x0
#define IAXXX_AFG_AFG_INTR_ARDBEG_TRANS_COMPLETED_POS 2
#define IAXXX_AFG_AFG_INTR_ARDBEG_TRANS_COMPLETED_SIZE 1
#define IAXXX_AFG_AFG_INTR_ARDBEG_TRANS_COMPLETED_DECL 2

/* Number of registers in the module */
#define IAXXX_AFG_REG_NUM 10

#endif /* __IAXXX_REGISTER_DEFS_AFG_H__*/
