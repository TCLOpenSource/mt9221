/*
 * iaxxx-register-defs-srb.h
 *
 * Copyright (c) 2018 Knowles, inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/**********************************************************
 * This file is generated by running a format script
 * on header files shared by Firmware.
 *
 * DO NOT EDIT.
 *
 *********************************************************/

#ifndef __IAXXX_REGISTER_DEFS_SRB_H__
#define __IAXXX_REGISTER_DEFS_SRB_H__

/*** The base address for this set of registers ***/
#define IAXXX_SRB_REGS_ADDR (PLAT_SRB_BASE_ADDR)

/*** SRB_SYS_BLK_UPDATE (PLAT_SRB_BASE_ADDR + 0x00000000) ***/
/*
 * Block update for Control Proc
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000000)
#define IAXXX_SRB_SYS_BLK_UPDATE_MASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_RMASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_WMASK_VAL 0xc0000000
#define IAXXX_SRB_SYS_BLK_UPDATE_RESET_VAL 0x00000000

/*
 * Error code that corresponds to the latest block update.
 * ARB error codes are application specific.
 * Error codes for the SRB.
 * 0x0 - No error (Error Code: SYSRC_SUCCESS)
 * 0x1 - General Error (Error Code: SYSRC_FAIL)
 * 0x2 - Bad parameter in function call (Error Code: SYSRC_ERR_PARM)
 * 0x3 - Out of Memory condition (Error Code: SYSRC_ERR_MEM)
 * 0x4 - Busy, unable to process call (Error Code: SYSRC_ERR_BUSY)
 * 0x5 - No Error. Completion is Asynchronous (Error Code: SYSRC_ERR_PEND)
 * 0x6 - Callee in wrong state (Error Code: SYSRC_ERR_STAT)
 * 0x7 - Some limit(s) exceeded (Error Code: SYSRC_ERR_LIMIT)
 * 0x8 - Boundary violation (Error Code: SYSRC_ERR_BOUNDARY)
 * 0x9 - Input/output error (Error Code: SYSRC_ERR_IO)
 * 0xA - Plugin Error (Error Code: SYSRC_ERR_PLUGIN)
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_ERR_CODE_MASK 0x000000ff
#define IAXXX_SRB_SYS_BLK_UPDATE_ERR_CODE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_ERR_CODE_POS 0
#define IAXXX_SRB_SYS_BLK_UPDATE_ERR_CODE_SIZE 8

/*
 * Index of block that failed the latest block update.
 * Block update always aborts as soon as a block update fails.
 * 0xFF - No block update failure (success).
 * 0x00 - ARB 0 block update failure.
 * 0x01 - ARB 1 block update failure.
 * 0x02 - ARB 2 block update failure.
 * ...
 * 0x1F - ARB 31 block update failure.
 * 0x80 - SRB block update failure.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_RES_MASK 0x0000ff00
#define IAXXX_SRB_SYS_BLK_UPDATE_RES_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_RES_POS 8
#define IAXXX_SRB_SYS_BLK_UPDATE_RES_SIZE 8

/*
 * Host sets to request an event notification,
 * when block update is complete.
 * Only available in application mode.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_COMPLETE_EN_MASK 0x40000000
#define IAXXX_SRB_SYS_BLK_UPDATE_COMPLETE_EN_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_COMPLETE_EN_POS 30
#define IAXXX_SRB_SYS_BLK_UPDATE_COMPLETE_EN_SIZE 1

/*
 * Host sets to request a block update.
 * Device clears when update is complete.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_REQ_MASK 0x80000000
#define IAXXX_SRB_SYS_BLK_UPDATE_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_REQ_POS 31
#define IAXXX_SRB_SYS_BLK_UPDATE_REQ_SIZE 1

/*** SRB_SYS_BLK_UPDATE_1 (PLAT_SRB_BASE_ADDR + 0x00000004) ***/
/*
 * Block update 1
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_ADDR (PLAT_SRB_BASE_ADDR + 0x00000004)
#define IAXXX_SRB_SYS_BLK_UPDATE_1_MASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_1_RMASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_1_WMASK_VAL 0xc0000000
#define IAXXX_SRB_SYS_BLK_UPDATE_1_RESET_VAL 0x00000000

/*
 * Error code that corresponds to the latest block update.
 * ARB error codes are application specific.
 * Error codes for the SRB.
 * 0x0 - No error (Error Code: SYSRC_SUCCESS)
 * 0x1 - General Error (Error Code: SYSRC_FAIL)
 * 0x2 - Bad parameter in function call (Error Code: SYSRC_ERR_PARM)
 * 0x3 - Out of Memory condition (Error Code: SYSRC_ERR_MEM)
 * 0x4 - Busy, unable to process call (Error Code: SYSRC_ERR_BUSY)
 * 0x5 - No Error. Completion is Asynchronous (Error Code: SYSRC_ERR_PEND)
 * 0x6 - Callee in wrong state (Error Code: SYSRC_ERR_STAT)
 * 0x7 - Some limit(s) exceeded (Error Code: SYSRC_ERR_LIMIT)
 * 0x8 - Boundary violation (Error Code: SYSRC_ERR_BOUNDARY)
 * 0x9 - Input/output error (Error Code: SYSRC_ERR_IO)
 * 0xA - Plugin Error (Error Code: SYSRC_ERR_PLUGIN)
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_ERR_CODE_MASK 0x000000ff
#define IAXXX_SRB_SYS_BLK_UPDATE_1_ERR_CODE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_ERR_CODE_POS 0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_ERR_CODE_SIZE 8

/*
 * Index of block that failed the latest block update.
 * Block update always aborts as soon as a block update fails.
 * 0xFF - No block update failure (success).
 * 0x00 - ARB 0 block update failure.
 * 0x01 - ARB 1 block update failure.
 * 0x02 - ARB 2 block update failure.
 * ...
 * 0x1F - ARB 31 block update failure.
 * 0x80 - SRB block update failure.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_RES_MASK 0x0000ff00
#define IAXXX_SRB_SYS_BLK_UPDATE_1_RES_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_RES_POS 8
#define IAXXX_SRB_SYS_BLK_UPDATE_1_RES_SIZE 8

/*
 * Host sets to request an event notification,
 * when block update is complete.
 * Only available in application mode.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_COMPLETE_EN_MASK 0x40000000
#define IAXXX_SRB_SYS_BLK_UPDATE_1_COMPLETE_EN_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_COMPLETE_EN_POS 30
#define IAXXX_SRB_SYS_BLK_UPDATE_1_COMPLETE_EN_SIZE 1

/*
 * Host sets to request a block update.
 * Device clears when update is complete.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_REQ_MASK 0x80000000
#define IAXXX_SRB_SYS_BLK_UPDATE_1_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_REQ_POS 31
#define IAXXX_SRB_SYS_BLK_UPDATE_1_REQ_SIZE 1

/*** SRB_SYS_BLK_UPDATE_2 (PLAT_SRB_BASE_ADDR + 0x00000008) ***/
/*
 * Block update 2
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_ADDR (PLAT_SRB_BASE_ADDR + 0x00000008)
#define IAXXX_SRB_SYS_BLK_UPDATE_2_MASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_2_RMASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_2_WMASK_VAL 0xc0000000
#define IAXXX_SRB_SYS_BLK_UPDATE_2_RESET_VAL 0x00000000

/*
 * Error code that corresponds to the latest block update.
 * ARB error codes are application specific.
 * Error codes for the SRB.
 * 0x0 - No error (Error Code: SYSRC_SUCCESS)
 * 0x1 - General Error (Error Code: SYSRC_FAIL)
 * 0x2 - Bad parameter in function call (Error Code: SYSRC_ERR_PARM)
 * 0x3 - Out of Memory condition (Error Code: SYSRC_ERR_MEM)
 * 0x4 - Busy, unable to process call (Error Code: SYSRC_ERR_BUSY)
 * 0x5 - No Error. Completion is Asynchronous (Error Code: SYSRC_ERR_PEND)
 * 0x6 - Callee in wrong state (Error Code: SYSRC_ERR_STAT)
 * 0x7 - Some limit(s) exceeded (Error Code: SYSRC_ERR_LIMIT)
 * 0x8 - Boundary violation (Error Code: SYSRC_ERR_BOUNDARY)
 * 0x9 - Input/output error (Error Code: SYSRC_ERR_IO)
 * 0xA - Plugin Error (Error Code: SYSRC_ERR_PLUGIN)
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_ERR_CODE_MASK 0x000000ff
#define IAXXX_SRB_SYS_BLK_UPDATE_2_ERR_CODE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_ERR_CODE_POS 0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_ERR_CODE_SIZE 8

/*
 * Index of block that failed the latest block update.
 * Block update always aborts as soon as a block update fails.
 * 0xFF - No block update failure (success).
 * 0x00 - ARB 0 block update failure.
 * 0x01 - ARB 1 block update failure.
 * 0x02 - ARB 2 block update failure.
 * ...
 * 0x1F - ARB 31 block update failure.
 * 0x80 - SRB block update failure.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_RES_MASK 0x0000ff00
#define IAXXX_SRB_SYS_BLK_UPDATE_2_RES_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_RES_POS 8
#define IAXXX_SRB_SYS_BLK_UPDATE_2_RES_SIZE 8

/*
 * Host sets to request an event notification,
 * when block update is complete.
 * Only available in application mode.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_COMPLETE_EN_MASK 0x40000000
#define IAXXX_SRB_SYS_BLK_UPDATE_2_COMPLETE_EN_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_COMPLETE_EN_POS 30
#define IAXXX_SRB_SYS_BLK_UPDATE_2_COMPLETE_EN_SIZE 1

/*
 * Host sets to request a block update.
 * Device clears when update is complete.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_REQ_MASK 0x80000000
#define IAXXX_SRB_SYS_BLK_UPDATE_2_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_REQ_POS 31
#define IAXXX_SRB_SYS_BLK_UPDATE_2_REQ_SIZE 1

/*** SRB_SYS_BLK_UPDATE_RESERVED_0 (PLAT_SRB_BASE_ADDR + 0x0000000c) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_0_ADDR (PLAT_SRB_BASE_ADDR + 0x0000000c)
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_0_RESET_VAL 0x00000000

/*** SRB_SYS_BLK_UPDATE_HOST_1 (PLAT_SRB_BASE_ADDR + 0x00000010) ***/
/*
 * Control Proc Block update from Host 1
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_ADDR (PLAT_SRB_BASE_ADDR + 0x00000010)
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_MASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_RMASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_WMASK_VAL 0xc0000000
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_RESET_VAL 0x00000000

/*
 * Error code that corresponds to the latest block update.
 * ARB error codes are application specific.
 * Error codes for the SRB.
 * 0x0 - No error (Error Code: SYSRC_SUCCESS)
 * 0x1 - General Error (Error Code: SYSRC_FAIL)
 * 0x2 - Bad parameter in function call (Error Code: SYSRC_ERR_PARM)
 * 0x3 - Out of Memory condition (Error Code: SYSRC_ERR_MEM)
 * 0x4 - Busy, unable to process call (Error Code: SYSRC_ERR_BUSY)
 * 0x5 - No Error. Completion is Asynchronous (Error Code: SYSRC_ERR_PEND)
 * 0x6 - Callee in wrong state (Error Code: SYSRC_ERR_STAT)
 * 0x7 - Some limit(s) exceeded (Error Code: SYSRC_ERR_LIMIT)
 * 0x8 - Boundary violation (Error Code: SYSRC_ERR_BOUNDARY)
 * 0x9 - Input/output error (Error Code: SYSRC_ERR_IO)
 * 0xA - Plugin Error (Error Code: SYSRC_ERR_PLUGIN)
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_ERR_CODE_MASK 0x000000ff
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_ERR_CODE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_ERR_CODE_POS 0
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_ERR_CODE_SIZE 8

/*
 * Index of block that failed the latest block update.
 * Block update always aborts as soon as a block update fails.
 * 0xFF - No block update failure (success).
 * 0x00 - ARB 0 block update failure.
 * 0x01 - ARB 1 block update failure.
 * 0x02 - ARB 2 block update failure.
 * ...
 * 0x1F - ARB 31 block update failure.
 * 0x80 - SRB block update failure.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_RES_MASK 0x0000ff00
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_RES_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_RES_POS 8
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_RES_SIZE 8

/*
 * Host sets to request an event notification,
 * when block update is complete.
 * Only available in application mode.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_COMPLETE_EN_MASK 0x40000000
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_COMPLETE_EN_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_COMPLETE_EN_POS 30
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_COMPLETE_EN_SIZE 1

/*
 * Host sets to request a block update.
 * Device clears when update is complete.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_REQ_MASK 0x80000000
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_REQ_POS 31
#define IAXXX_SRB_SYS_BLK_UPDATE_HOST_1_REQ_SIZE 1

/*** SRB_SYS_BLK_UPDATE_1_HOST_1 (PLAT_SRB_BASE_ADDR + 0x00000014) ***/
/*
 * Block update 1 from Host 1
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_ADDR (PLAT_SRB_BASE_ADDR + 0x00000014)
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_MASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_RMASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_WMASK_VAL 0xc0000000
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_RESET_VAL 0x00000000

/*
 * Error code that corresponds to the latest block update.
 * ARB error codes are application specific.
 * Error codes for the SRB.
 * 0x0 - No error (Error Code: SYSRC_SUCCESS)
 * 0x1 - General Error (Error Code: SYSRC_FAIL)
 * 0x2 - Bad parameter in function call (Error Code: SYSRC_ERR_PARM)
 * 0x3 - Out of Memory condition (Error Code: SYSRC_ERR_MEM)
 * 0x4 - Busy, unable to process call (Error Code: SYSRC_ERR_BUSY)
 * 0x5 - No Error. Completion is Asynchronous (Error Code: SYSRC_ERR_PEND)
 * 0x6 - Callee in wrong state (Error Code: SYSRC_ERR_STAT)
 * 0x7 - Some limit(s) exceeded (Error Code: SYSRC_ERR_LIMIT)
 * 0x8 - Boundary violation (Error Code: SYSRC_ERR_BOUNDARY)
 * 0x9 - Input/output error (Error Code: SYSRC_ERR_IO)
 * 0xA - Plugin Error (Error Code: SYSRC_ERR_PLUGIN)
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_ERR_CODE_MASK 0x000000ff
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_ERR_CODE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_ERR_CODE_POS 0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_ERR_CODE_SIZE 8

/*
 * Index of block that failed the latest block update.
 * Block update always aborts as soon as a block update fails.
 * 0xFF - No block update failure (success).
 * 0x00 - ARB 0 block update failure.
 * 0x01 - ARB 1 block update failure.
 * 0x02 - ARB 2 block update failure.
 * ...
 * 0x1F - ARB 31 block update failure.
 * 0x80 - SRB block update failure.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_RES_MASK 0x0000ff00
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_RES_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_RES_POS 8
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_RES_SIZE 8

/*
 * Host sets to request an event notification,
 * when block update is complete.
 * Only available in application mode.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_COMPLETE_EN_MASK 0x40000000
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_COMPLETE_EN_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_COMPLETE_EN_POS 30
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_COMPLETE_EN_SIZE 1

/*
 * Host sets to request a block update.
 * Device clears when update is complete.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_REQ_MASK 0x80000000
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_REQ_POS 31
#define IAXXX_SRB_SYS_BLK_UPDATE_1_HOST_1_REQ_SIZE 1

/*** SRB_SYS_BLK_UPDATE_2_HOST_1 (PLAT_SRB_BASE_ADDR + 0x00000018) ***/
/*
 * Block update 2 from Host 1
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_ADDR (PLAT_SRB_BASE_ADDR + 0x00000018)
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_MASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_RMASK_VAL 0xc000ffff
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_WMASK_VAL 0xc0000000
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_RESET_VAL 0x00000000

/*
 * Error code that corresponds to the latest block update.
 * ARB error codes are application specific.
 * Error codes for the SRB.
 * 0x0 - No error (Error Code: SYSRC_SUCCESS)
 * 0x1 - General Error (Error Code: SYSRC_FAIL)
 * 0x2 - Bad parameter in function call (Error Code: SYSRC_ERR_PARM)
 * 0x3 - Out of Memory condition (Error Code: SYSRC_ERR_MEM)
 * 0x4 - Busy, unable to process call (Error Code: SYSRC_ERR_BUSY)
 * 0x5 - No Error. Completion is Asynchronous (Error Code: SYSRC_ERR_PEND)
 * 0x6 - Callee in wrong state (Error Code: SYSRC_ERR_STAT)
 * 0x7 - Some limit(s) exceeded (Error Code: SYSRC_ERR_LIMIT)
 * 0x8 - Boundary violation (Error Code: SYSRC_ERR_BOUNDARY)
 * 0x9 - Input/output error (Error Code: SYSRC_ERR_IO)
 * 0xA - Plugin Error (Error Code: SYSRC_ERR_PLUGIN)
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_ERR_CODE_MASK 0x000000ff
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_ERR_CODE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_ERR_CODE_POS 0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_ERR_CODE_SIZE 8

/*
 * Index of block that failed the latest block update.
 * Block update always aborts as soon as a block update fails.
 * 0xFF - No block update failure (success).
 * 0x00 - ARB 0 block update failure.
 * 0x01 - ARB 1 block update failure.
 * 0x02 - ARB 2 block update failure.
 * ...
 * 0x1F - ARB 31 block update failure.
 * 0x80 - SRB block update failure.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_RES_MASK 0x0000ff00
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_RES_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_RES_POS 8
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_RES_SIZE 8

/*
 * Host sets to request an event notification,
 * when block update is complete.
 * Only available in application mode.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_COMPLETE_EN_MASK 0x40000000
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_COMPLETE_EN_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_COMPLETE_EN_POS 30
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_COMPLETE_EN_SIZE 1

/*
 * Host sets to request a block update.
 * Device clears when update is complete.
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_REQ_MASK 0x80000000
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_REQ_POS 31
#define IAXXX_SRB_SYS_BLK_UPDATE_2_HOST_1_REQ_SIZE 1

/*** SRB_SYS_BLK_UPDATE_RESERVED_1 (PLAT_SRB_BASE_ADDR + 0x0000001c) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_1_ADDR (PLAT_SRB_BASE_ADDR + 0x0000001c)
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_BLK_UPDATE_RESERVED_1_RESET_VAL 0x00000000

/*** SRB_NUM_HOST_SUPPORT (PLAT_SRB_BASE_ADDR + 0x00000020) ***/
/*
 * Number of hosts supported.
 */
#define IAXXX_SRB_NUM_HOST_SUPPORT_ADDR (PLAT_SRB_BASE_ADDR + 0x00000020)
#define IAXXX_SRB_NUM_HOST_SUPPORT_MASK_VAL 0x00000003
#define IAXXX_SRB_NUM_HOST_SUPPORT_RMASK_VAL 0x00000003
#define IAXXX_SRB_NUM_HOST_SUPPORT_WMASK_VAL 0x00000000
#define IAXXX_SRB_NUM_HOST_SUPPORT_RESET_VAL 0x00000000

/*
 * Number of hosts supported.
 * If more than one, the second host will
 * have limited functionalities.
 */
#define IAXXX_SRB_NUM_HOST_SUPPORT_NUM_HOSTS_MASK 0x00000003
#define IAXXX_SRB_NUM_HOST_SUPPORT_NUM_HOSTS_RESET_VAL 0x0
#define IAXXX_SRB_NUM_HOST_SUPPORT_NUM_HOSTS_POS 0
#define IAXXX_SRB_NUM_HOST_SUPPORT_NUM_HOSTS_SIZE 2

/*** SRB_SYS_STATUS (PLAT_SRB_BASE_ADDR + 0x00000024) ***/
/*
 * Global system status.
 */
#define IAXXX_SRB_SYS_STATUS_ADDR (PLAT_SRB_BASE_ADDR + 0x00000024)
#define IAXXX_SRB_SYS_STATUS_MASK_VAL 0x00000003
#define IAXXX_SRB_SYS_STATUS_RMASK_VAL 0x00000003
#define IAXXX_SRB_SYS_STATUS_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_STATUS_RESET_VAL 0x00000000

/*
 * An indication of the current system mode.
 * 0: System is in reset mode.
 * 1: System is currently in bootloader mode.
 * 2: System has entered application mode.
 */
#define IAXXX_SRB_SYS_STATUS_MODE_MASK 0x00000003
#define IAXXX_SRB_SYS_STATUS_MODE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_STATUS_MODE_POS 0
#define IAXXX_SRB_SYS_STATUS_MODE_SIZE 2

/*** SRB_REGMAP_VERSION (PLAT_SRB_BASE_ADDR + 0x00000028) ***/
/*
 * Contains Rome Register Map version.
 */
#define IAXXX_SRB_REGMAP_VERSION_ADDR (PLAT_SRB_BASE_ADDR + 0x00000028)
#define IAXXX_SRB_REGMAP_VERSION_MASK_VAL 0x00ffffff
#define IAXXX_SRB_REGMAP_VERSION_RMASK_VAL 0x00ffffff
#define IAXXX_SRB_REGMAP_VERSION_WMASK_VAL 0x00000000
#define IAXXX_SRB_REGMAP_VERSION_RESET_VAL 0x00000000

/*
 * Rome Register Map Patch version.
 */
#define IAXXX_SRB_REGMAP_VERSION_PATCH_MASK 0x000000ff
#define IAXXX_SRB_REGMAP_VERSION_PATCH_RESET_VAL 0x0
#define IAXXX_SRB_REGMAP_VERSION_PATCH_POS 0
#define IAXXX_SRB_REGMAP_VERSION_PATCH_SIZE 8

/*
 * Rome Register Map Minor version.
 */
#define IAXXX_SRB_REGMAP_VERSION_MINOR_MASK 0x0000ff00
#define IAXXX_SRB_REGMAP_VERSION_MINOR_RESET_VAL 0x0
#define IAXXX_SRB_REGMAP_VERSION_MINOR_POS 8
#define IAXXX_SRB_REGMAP_VERSION_MINOR_SIZE 8

/*
 * Rome Register Map Major version.
 */
#define IAXXX_SRB_REGMAP_VERSION_MAJOR_MASK 0x00ff0000
#define IAXXX_SRB_REGMAP_VERSION_MAJOR_RESET_VAL 0x0
#define IAXXX_SRB_REGMAP_VERSION_MAJOR_POS 16
#define IAXXX_SRB_REGMAP_VERSION_MAJOR_SIZE 8

/*** SRB_SYS_FEATURE_SUPPORT (PLAT_SRB_BASE_ADDR + 0x0000002c) ***/
/*
 * Features supported in the current applicaton.
 */
#define IAXXX_SRB_SYS_FEATURE_SUPPORT_ADDR (PLAT_SRB_BASE_ADDR + 0x0000002c)
#define IAXXX_SRB_SYS_FEATURE_SUPPORT_MASK_VAL 0x00000001
#define IAXXX_SRB_SYS_FEATURE_SUPPORT_RMASK_VAL 0x00000001
#define IAXXX_SRB_SYS_FEATURE_SUPPORT_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_FEATURE_SUPPORT_RESET_VAL 0x00000000

/*
 * Bulk Transfer Support.
 */
#define IAXXX_SRB_SYS_FEATURE_SUPPORT_BULK_TRANSFER_MASK 0x00000001
#define IAXXX_SRB_SYS_FEATURE_SUPPORT_BULK_TRANSFER_RESET_VAL 0x0
#define IAXXX_SRB_SYS_FEATURE_SUPPORT_BULK_TRANSFER_POS 0
#define IAXXX_SRB_SYS_FEATURE_SUPPORT_BULK_TRANSFER_SIZE 1

/*** SRB_SYS_SPI_CONFIG (PLAT_SRB_BASE_ADDR + 0x00000030) ***/
/*
 * Contains SPI sonfigurations.
 */
#define IAXXX_SRB_SYS_SPI_CONFIG_ADDR (PLAT_SRB_BASE_ADDR + 0x00000030)
#define IAXXX_SRB_SYS_SPI_CONFIG_MASK_VAL 0x0000003f
#define IAXXX_SRB_SYS_SPI_CONFIG_RMASK_VAL 0x0000003f
#define IAXXX_SRB_SYS_SPI_CONFIG_WMASK_VAL 0x0000003f
#define IAXXX_SRB_SYS_SPI_CONFIG_RESET_VAL 0x00000003

/*
 * Determines the number of padding zeros in RegMap mode.
 */
#define IAXXX_SRB_SYS_SPI_CONFIG_PADDING_ZEROS_MASK 0x0000000f
#define IAXXX_SRB_SYS_SPI_CONFIG_PADDING_ZEROS_RESET_VAL 0x3
#define IAXXX_SRB_SYS_SPI_CONFIG_PADDING_ZEROS_POS 0
#define IAXXX_SRB_SYS_SPI_CONFIG_PADDING_ZEROS_SIZE 4

/*
 * SPI sample config.
 * 0x0: Hardware (Default for IA8508)
 * 0x1: Normal Launch Mode
 * 0x3: Early Launch Mode (Default for IA8201)
 */
#define IAXXX_SRB_SYS_SPI_CONFIG_SAMP_CFG_MASK 0x00000030
#define IAXXX_SRB_SYS_SPI_CONFIG_SAMP_CFG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_SPI_CONFIG_SAMP_CFG_POS 4
#define IAXXX_SRB_SYS_SPI_CONFIG_SAMP_CFG_SIZE 2

/*** SRB_SYS_DEVICE_ID (PLAT_SRB_BASE_ADDR + 0x00000034) ***/
/*
 * Contains the device's identification information.
 */
#define IAXXX_SRB_SYS_DEVICE_ID_ADDR (PLAT_SRB_BASE_ADDR + 0x00000034)
#define IAXXX_SRB_SYS_DEVICE_ID_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_DEVICE_ID_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_DEVICE_ID_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_DEVICE_ID_RESET_VAL 0x00000000

/*
 * Device ID. Each Knowles IA solution contains,
 * registers identifying the product, revision, etc.
 * This register can be used to positively identify
 * the product during initialization.
 */
#define IAXXX_SRB_SYS_DEVICE_ID_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_DEVICE_ID_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_DEVICE_ID_REG_POS 0
#define IAXXX_SRB_SYS_DEVICE_ID_REG_SIZE 32

/*** SRB_SYS_ROM_VER_NUM (PLAT_SRB_BASE_ADDR + 0x00000038) ***/
/*
 * Contains the version of the device's firmware in ROM in numeric format.
 */
#define IAXXX_SRB_SYS_ROM_VER_NUM_ADDR (PLAT_SRB_BASE_ADDR + 0x00000038)
#define IAXXX_SRB_SYS_ROM_VER_NUM_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_ROM_VER_NUM_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_ROM_VER_NUM_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_ROM_VER_NUM_RESET_VAL 0x00000000

/*
 * For ROM-based devices - ROM version. Exact format is application specific.
 * For non-ROM devices - unused (set to default).
 */
#define IAXXX_SRB_SYS_ROM_VER_NUM_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_ROM_VER_NUM_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_ROM_VER_NUM_REG_POS 0
#define IAXXX_SRB_SYS_ROM_VER_NUM_REG_SIZE 32

/*** SRB_SYS_ROM_VER_STR (PLAT_SRB_BASE_ADDR + 0x0000003c) ***/
/*
 * Contains the version of device's firmware in ROM in string format.
 */
#define IAXXX_SRB_SYS_ROM_VER_STR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000003c)
#define IAXXX_SRB_SYS_ROM_VER_STR_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_ROM_VER_STR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_ROM_VER_STR_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_ROM_VER_STR_RESET_VAL 0x00000000

/*
 * Address of null-terminated string that represents the ROM version.
 */
#define IAXXX_SRB_SYS_ROM_VER_STR_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_ROM_VER_STR_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_ROM_VER_STR_REG_POS 0
#define IAXXX_SRB_SYS_ROM_VER_STR_REG_SIZE 32

/*** SRB_SYS_CFG_VER_NUM (PLAT_SRB_BASE_ADDR + 0x00000040) ***/
/*
 * Contains the version of the system configuration in numeric format.
 */
#define IAXXX_SRB_SYS_CFG_VER_NUM_ADDR (PLAT_SRB_BASE_ADDR + 0x00000040)
#define IAXXX_SRB_SYS_CFG_VER_NUM_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_CFG_VER_NUM_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_CFG_VER_NUM_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_CFG_VER_NUM_RESET_VAL 0x00000000

/*
 * System configuration version.
 * Exact format is application specific.
 */
#define IAXXX_SRB_SYS_CFG_VER_NUM_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_CFG_VER_NUM_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_CFG_VER_NUM_REG_POS 0
#define IAXXX_SRB_SYS_CFG_VER_NUM_REG_SIZE 32

/*** SRB_SYS_CFG_VER_STR (PLAT_SRB_BASE_ADDR + 0x00000044) ***/
/*
 * Contains the version of the system configuration in string format.
 */
#define IAXXX_SRB_SYS_CFG_VER_STR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000044)
#define IAXXX_SRB_SYS_CFG_VER_STR_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_CFG_VER_STR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_CFG_VER_STR_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_CFG_VER_STR_RESET_VAL 0x00000000

/*
 * Address of null-terminated string
 * that represents the system configuration version.
 */
#define IAXXX_SRB_SYS_CFG_VER_STR_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_CFG_VER_STR_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_CFG_VER_STR_REG_POS 0
#define IAXXX_SRB_SYS_CFG_VER_STR_REG_SIZE 32

/*** SRB_SYS_APP_VER_NUM (PLAT_SRB_BASE_ADDR + 0x00000048) ***/
/*
 * Contains the version of the Rome application in numeric format.
 */
#define IAXXX_SRB_SYS_APP_VER_NUM_ADDR (PLAT_SRB_BASE_ADDR + 0x00000048)
#define IAXXX_SRB_SYS_APP_VER_NUM_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_APP_VER_NUM_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_APP_VER_NUM_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_APP_VER_NUM_RESET_VAL 0x00000000

/*
 * For ROM-based devices - application version.
 * Exact format is application specific.
 * For non-ROM devices - firmware version.
 */
#define IAXXX_SRB_SYS_APP_VER_NUM_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_APP_VER_NUM_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_APP_VER_NUM_REG_POS 0
#define IAXXX_SRB_SYS_APP_VER_NUM_REG_SIZE 32

/*** SRB_SYS_APP_VER_STR (PLAT_SRB_BASE_ADDR + 0x0000004c) ***/
/*
 * Contains the version of the Rome application in string format.
 */
#define IAXXX_SRB_SYS_APP_VER_STR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000004c)
#define IAXXX_SRB_SYS_APP_VER_STR_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_APP_VER_STR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_APP_VER_STR_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_APP_VER_STR_RESET_VAL 0x00000000

/*
 * Address of null-terminated string
 * that represents the application version.
 */
#define IAXXX_SRB_SYS_APP_VER_STR_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_APP_VER_STR_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_APP_VER_STR_REG_POS 0
#define IAXXX_SRB_SYS_APP_VER_STR_REG_SIZE 32

/*** SRB_SYS_PROC_CLOCK (PLAT_SRB_BASE_ADDR + 0x00000050) ***/
/*
 * System processor clock frequency.
 */
#define IAXXX_SRB_SYS_PROC_CLOCK_ADDR (PLAT_SRB_BASE_ADDR + 0x00000050)
#define IAXXX_SRB_SYS_PROC_CLOCK_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_PROC_CLOCK_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_PROC_CLOCK_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_PROC_CLOCK_RESET_VAL 0x00000000

/*
 * System processor clock frequency.
 */
#define IAXXX_SRB_SYS_PROC_CLOCK_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_PROC_CLOCK_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_PROC_CLOCK_REG_POS 0
#define IAXXX_SRB_SYS_PROC_CLOCK_REG_SIZE 32

/*** SRB_SYS_AUDIO_CLOCK (PLAT_SRB_BASE_ADDR + 0x00000054) ***/
/*
 * System audio clock frequency.
 */
#define IAXXX_SRB_SYS_AUDIO_CLOCK_ADDR (PLAT_SRB_BASE_ADDR + 0x00000054)
#define IAXXX_SRB_SYS_AUDIO_CLOCK_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_AUDIO_CLOCK_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_AUDIO_CLOCK_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_AUDIO_CLOCK_RESET_VAL 0x00000000

/*
 * System audio clock frequency.
 */
#define IAXXX_SRB_SYS_AUDIO_CLOCK_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_AUDIO_CLOCK_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_AUDIO_CLOCK_REG_POS 0
#define IAXXX_SRB_SYS_AUDIO_CLOCK_REG_SIZE 32

/*** SRB_PROC_ACTIVE_STATUS (PLAT_SRB_BASE_ADDR + 0x00000058) ***/
/*
 * This register represents the power status of the processors (ON/OFF,
 * STALL/RUNNING)
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_ADDR (PLAT_SRB_BASE_ADDR + 0x00000058)
#define IAXXX_SRB_PROC_ACTIVE_STATUS_MASK_VAL 0x003f003f
#define IAXXX_SRB_PROC_ACTIVE_STATUS_RMASK_VAL 0x003e003e
#define IAXXX_SRB_PROC_ACTIVE_STATUS_WMASK_VAL 0x00000000
#define IAXXX_SRB_PROC_ACTIVE_STATUS_RESET_VAL 0x00000000

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_0_MASK 0x00000001
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_0_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_0_POS 0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_0_SIZE 1

/*
 * Status of Processor 1
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_1_MASK 0x00000002
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_1_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_1_POS 1
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_1_SIZE 1

/*
 * Status of Processor 2
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_2_MASK 0x00000004
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_2_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_2_POS 2
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_2_SIZE 1

/*
 * Status of Processor 3
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_3_MASK 0x00000008
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_3_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_3_POS 3
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_3_SIZE 1

/*
 * Status of Processor 4
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_4_MASK 0x00000010
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_4_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_4_POS 4
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_4_SIZE 1

/*
 * Status of Processor 5
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_5_MASK 0x00000020
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_5_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_5_POS 5
#define IAXXX_SRB_PROC_ACTIVE_STATUS_PWR_STATUS_PROC_5_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_0_MASK 0x00010000
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_0_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_0_POS 16
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_0_SIZE 1

/*
 * Stall status of Processor 1
 * 0 - Not stalled
 * 1 - Stalled
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_1_MASK 0x00020000
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_1_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_1_POS 17
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_1_SIZE 1

/*
 * Stall status of Processor 2
 * 0 - Not stalled
 * 1 - Stalled
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_2_MASK 0x00040000
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_2_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_2_POS 18
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_2_SIZE 1

/*
 * Stall status of Processor 3
 * 0 - Not stalled
 * 1 - Stalled
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_3_MASK 0x00080000
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_3_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_3_POS 19
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_3_SIZE 1

/*
 * Stall status of Processor 4
 * 0 - Not stalled
 * 1 - Stalled
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_4_MASK 0x00100000
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_4_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_4_POS 20
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_4_SIZE 1

/*
 * Stall status of Processor 5
 * 0 - Not stalled
 * 1 - Stalled
 */
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_5_MASK 0x00200000
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_5_RESET_VAL 0x0
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_5_POS 21
#define IAXXX_SRB_PROC_ACTIVE_STATUS_STALL_STATUS_PROC_5_SIZE 1

/*** SRB_SYS_POWER_CTRL (PLAT_SRB_BASE_ADDR + 0x0000005c) ***/
/*
 * System Power control Register
 */
#define IAXXX_SRB_SYS_POWER_CTRL_ADDR (PLAT_SRB_BASE_ADDR + 0x0000005c)
#define IAXXX_SRB_SYS_POWER_CTRL_MASK_VAL 0x0007ffff
#define IAXXX_SRB_SYS_POWER_CTRL_RMASK_VAL 0x0007ffff
#define IAXXX_SRB_SYS_POWER_CTRL_WMASK_VAL 0x0005ffff
#define IAXXX_SRB_SYS_POWER_CTRL_RESET_VAL 0x00000000

/*
 * Host sets this bit to request
 * firmware to switch to an optimal power
 * mode for the current use case. In a multi
 * host system, this request is honoured iff
 * all the other HOSTs are inactive(their
 * control interfaces are in powered down
 * mode).
 * 0 - No Power mode switch required
 * 1 - Switch to optimal power mode.
 * 2 - Switch to System Sleep Mode.
 *       All control interfaces would be
 *       powered down. Wake up by any
 *       PCTRL interrupt.
 * 4 - Switch to Normal power mode.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_SET_POWER_MODE_MASK 0x00000007
#define IAXXX_SRB_SYS_POWER_CTRL_SET_POWER_MODE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_SET_POWER_MODE_POS 0
#define IAXXX_SRB_SYS_POWER_CTRL_SET_POWER_MODE_SIZE 3

/*
 * Host sets this bit to request firmware to
 * apply the APLL_SRC and APLL_OUT_FREQ settings
 * specified in SYS_CLK_CTRL PWR_MGMT ARB register.
 * 0 - No Change
 * 1 - Apply the APLL settings from SYS_CLK_CTRL.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_CONFIG_APLL_MASK 0x00000008
#define IAXXX_SRB_SYS_POWER_CTRL_CONFIG_APLL_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_CONFIG_APLL_POS 3
#define IAXXX_SRB_SYS_POWER_CTRL_CONFIG_APLL_SIZE 1

/*
 * Host sets this bit to request
 * firmware to disable all the control
 * interfaces.
 * 0 - No Change
 * 1 - Control interfaces of this HOST will be powered down.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_DISABLE_CTRL_INTERFACE_MASK 0x00000010
#define IAXXX_SRB_SYS_POWER_CTRL_DISABLE_CTRL_INTERFACE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_DISABLE_CTRL_INTERFACE_POS 4
#define IAXXX_SRB_SYS_POWER_CTRL_DISABLE_CTRL_INTERFACE_SIZE 1

/*
 * Host sets this bit to request firmware
 * to apply the MPLL_SRC setting specified
 * in SYS_CLK_CTRL PWR_MGMT ARB register.
 * 0 - No Change
 * 1 - Apply the APLL settings from SYS_CLK_CTRL.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_CONFIG_MPLL_MASK 0x00000020
#define IAXXX_SRB_SYS_POWER_CTRL_CONFIG_MPLL_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_CONFIG_MPLL_POS 5
#define IAXXX_SRB_SYS_POWER_CTRL_CONFIG_MPLL_SIZE 1

/*
 * Host sets this bit to request
 * processor power state change
 */
#define IAXXX_SRB_SYS_POWER_CTRL_SET_PROC_PWR_REQ_MASK 0x00000040
#define IAXXX_SRB_SYS_POWER_CTRL_SET_PROC_PWR_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_SET_PROC_PWR_REQ_POS 6
#define IAXXX_SRB_SYS_POWER_CTRL_SET_PROC_PWR_REQ_SIZE 1

/*
 * Host sets this bit to request
 * control processor hw sleep
 */
#define IAXXX_SRB_SYS_POWER_CTRL_SET_PROC_HWSLEEP_REQ_MASK 0x00000080
#define IAXXX_SRB_SYS_POWER_CTRL_SET_PROC_HWSLEEP_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_SET_PROC_HWSLEEP_REQ_POS 7
#define IAXXX_SRB_SYS_POWER_CTRL_SET_PROC_HWSLEEP_REQ_SIZE 1

/*
 * Host sets this bit to request firmware
 * to trim the internal oscillator frequency.
 * 0 - No Change
 * 1 - Trim internal oscillator frequency.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_FREQ_MASK 0x00000100
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_FREQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_FREQ_POS 8
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_FREQ_SIZE 1

/*
 * Trim Oscillator period in seconds.
 * For every TRIM_OSC_PERIOD seconds Internal Oscillator is probed and
 * trimmed to target clock if deviation is more than +/- 1%.
 * User can disable Trim Oscillator functionality by setting TRIM_OSC_PERIOD
 * to 0.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_PERIOD_MASK 0x0001fe00
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_PERIOD_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_PERIOD_POS 9
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_PERIOD_SIZE 8

/*
 * Trim Oscillator functionality status
 * 0 - Stopped
 * 1 - Running
 */
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_STATUS_MASK 0x00020000
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_STATUS_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_STATUS_POS 17
#define IAXXX_SRB_SYS_POWER_CTRL_TRIM_OSC_STATUS_SIZE 1

/*
 * Host sets this bit to request firmware to
 * set I2S Master clock frequency
 * 0 - No Change
 * 1 - Set I2S Master clock frequency from A_CLK_CTRL
 */
#define IAXXX_SRB_SYS_POWER_CTRL_SET_I2SM_CLK_MASK 0x00040000
#define IAXXX_SRB_SYS_POWER_CTRL_SET_I2SM_CLK_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_SET_I2SM_CLK_POS 18
#define IAXXX_SRB_SYS_POWER_CTRL_SET_I2SM_CLK_SIZE 1

/*** SRB_SYS_POWER_CTRL_1 (PLAT_SRB_BASE_ADDR + 0x00000060) ***/
/*
 * System Power control Register for Second Host
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_ADDR (PLAT_SRB_BASE_ADDR + 0x00000060)
#define IAXXX_SRB_SYS_POWER_CTRL_1_MASK_VAL 0x0003ffff
#define IAXXX_SRB_SYS_POWER_CTRL_1_RMASK_VAL 0x0003ffff
#define IAXXX_SRB_SYS_POWER_CTRL_1_WMASK_VAL 0x00000017
#define IAXXX_SRB_SYS_POWER_CTRL_1_RESET_VAL 0x00000000

/*
 * Host sets this bit to request
 * firmware to switch to an optimal power
 * mode for the current use case. In a multi
 * host system, this request is honoured iff
 * all the other HOSTs are inactive(their
 * control interfaces are in powered down
 * mode).
 * 0 - No Power mode switch required
 * 1 - Switch to optimal power mode.
 * 2 - Switch to System Sleep Mode.
 *       All control interfaces would be
 *       powered down. Wake up by any
 *       PCTRL interrupt.
 * 4 - Switch to Normal power mode.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_POWER_MODE_MASK 0x00000007
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_POWER_MODE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_POWER_MODE_POS 0
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_POWER_MODE_SIZE 3

/*
 * Currently not supported for the second host.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_CONFIG_APLL_MASK 0x00000008
#define IAXXX_SRB_SYS_POWER_CTRL_1_CONFIG_APLL_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_1_CONFIG_APLL_POS 3
#define IAXXX_SRB_SYS_POWER_CTRL_1_CONFIG_APLL_SIZE 1

/*
 * Host sets this bit to request
 * firmware to disable the control
 * interfaces of this Host.
 * 0 - No Change
 * 1 - Control interfaces of this HOST will be powered down.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_DISABLE_CTRL_INTERFACE_MASK 0x00000010
#define IAXXX_SRB_SYS_POWER_CTRL_1_DISABLE_CTRL_INTERFACE_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_1_DISABLE_CTRL_INTERFACE_POS 4
#define IAXXX_SRB_SYS_POWER_CTRL_1_DISABLE_CTRL_INTERFACE_SIZE 1

/*
 * Currently not supported for the second host.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_CONFIG_MPLL_MASK 0x00000020
#define IAXXX_SRB_SYS_POWER_CTRL_1_CONFIG_MPLL_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_1_CONFIG_MPLL_POS 5
#define IAXXX_SRB_SYS_POWER_CTRL_1_CONFIG_MPLL_SIZE 1

/*
 * Currently not supported for the second host.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_PROC_PWR_REQ_MASK 0x00000040
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_PROC_PWR_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_PROC_PWR_REQ_POS 6
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_PROC_PWR_REQ_SIZE 1

/*
 * Currently not supported for the second host.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_PROC_HWSLEEP_REQ_MASK 0x00000080
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_PROC_HWSLEEP_REQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_PROC_HWSLEEP_REQ_POS 7
#define IAXXX_SRB_SYS_POWER_CTRL_1_SET_PROC_HWSLEEP_REQ_SIZE 1

/*
 * Currently not supported for the second host.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_FREQ_MASK 0x00000100
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_FREQ_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_FREQ_POS 8
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_FREQ_SIZE 1

/*
 * Currently not supported for the second host.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_PERIOD_MASK 0x0001fe00
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_PERIOD_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_PERIOD_POS 9
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_PERIOD_SIZE 8

/*
 * Currently not supported for the second host.
 */
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_STATUS_MASK 0x00020000
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_STATUS_RESET_VAL 0x0
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_STATUS_POS 17
#define IAXXX_SRB_SYS_POWER_CTRL_1_TRIM_OSC_STATUS_SIZE 1

/*** SRB_SYSTEM_ERROR (PLAT_SRB_BASE_ADDR + 0x00000064) ***/
/*
 * Indicates system errors. If any of the bits in this register is set, it
 * indicates an error condition.
 */
#define IAXXX_SRB_SYSTEM_ERROR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000064)
#define IAXXX_SRB_SYSTEM_ERROR_MASK_VAL 0x0000000f
#define IAXXX_SRB_SYSTEM_ERROR_RMASK_VAL 0x0000000f
#define IAXXX_SRB_SYSTEM_ERROR_WMASK_VAL 0x0000000f
#define IAXXX_SRB_SYSTEM_ERROR_RESET_VAL 0x00000000

/*
 * This bit is set if host tries to access an address which is not multiples
 * of 4 bytes.
 */
#define IAXXX_SRB_SYSTEM_ERROR_UNALIGNED_ACCESS_MASK 0x00000001
#define IAXXX_SRB_SYSTEM_ERROR_UNALIGNED_ACCESS_RESET_VAL 0x0
#define IAXXX_SRB_SYSTEM_ERROR_UNALIGNED_ACCESS_POS 0
#define IAXXX_SRB_SYSTEM_ERROR_UNALIGNED_ACCESS_SIZE 1

/*
 * This bit is set if there are any framing errors on SPI slave.
 */
#define IAXXX_SRB_SYSTEM_ERROR_SPI_FRAMING_ERROR_MASK 0x00000002
#define IAXXX_SRB_SYSTEM_ERROR_SPI_FRAMING_ERROR_RESET_VAL 0x0
#define IAXXX_SRB_SYSTEM_ERROR_SPI_FRAMING_ERROR_POS 1
#define IAXXX_SRB_SYSTEM_ERROR_SPI_FRAMING_ERROR_SIZE 1

/*
 * This bit is set if boot from flash failed.
 */
#define IAXXX_SRB_SYSTEM_ERROR_FLASH_BOOT_FAILURE_MASK 0x00000004
#define IAXXX_SRB_SYSTEM_ERROR_FLASH_BOOT_FAILURE_RESET_VAL 0x0
#define IAXXX_SRB_SYSTEM_ERROR_FLASH_BOOT_FAILURE_POS 2
#define IAXXX_SRB_SYSTEM_ERROR_FLASH_BOOT_FAILURE_SIZE 1

/*
 * This bit is set if there are any UART read errors.
 */
#define IAXXX_SRB_SYSTEM_ERROR_UART_READ_ERROR_MASK 0x00000008
#define IAXXX_SRB_SYSTEM_ERROR_UART_READ_ERROR_RESET_VAL 0x0
#define IAXXX_SRB_SYSTEM_ERROR_UART_READ_ERROR_POS 3
#define IAXXX_SRB_SYSTEM_ERROR_UART_READ_ERROR_SIZE 1

/*** SRB_PROCESSOR_CRASH_STATUS (PLAT_SRB_BASE_ADDR + 0x00000068) ***/
/*
 * Processor Crash Status Register
 */
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_ADDR (PLAT_SRB_BASE_ADDR + 0x00000068)
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_MASK_VAL 0x00008034
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_RMASK_VAL 0x00008034
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_WMASK_VAL 0x00008000
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_RESET_VAL 0x00000000

/*
 * Crash Status of the PROC-2 core
 * 0 - Active (No Crash)
 * 1 - Crashed
 */
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_2_CRASH_MASK 0x00000004
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_2_CRASH_RESET_VAL 0x0
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_2_CRASH_POS 2
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_2_CRASH_SIZE 1

/*
 * Crash Status of the PROC-4 core
 * 0 - Active (No Crash)
 * 1 - Crashed
 */
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_4_CRASH_MASK 0x00000010
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_4_CRASH_RESET_VAL 0x0
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_4_CRASH_POS 4
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_4_CRASH_SIZE 1

/*
 * Crash Status of the PROC-5 core
 * 0 - Active (No Crash)
 * 1 - Crashed
 */
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_5_CRASH_MASK 0x00000020
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_5_CRASH_RESET_VAL 0x0
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_5_CRASH_POS 5
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_PROC_5_CRASH_SIZE 1

/*
 * Action after processor crash
 * 0 - Jump to SBL after crash(default)
 * 1 - Stay in app mode for debug
 */
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_STAY_IN_APP_MASK 0x00008000
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_STAY_IN_APP_RESET_VAL 0x0
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_STAY_IN_APP_POS 15
#define IAXXX_SRB_PROCESSOR_CRASH_STATUS_STAY_IN_APP_SIZE 1

/*** SRB_BOOT_REQ (PLAT_SRB_BASE_ADDR + 0x0000006c) ***/
/*
 * Request bootloader specific operations.
 */
#define IAXXX_SRB_BOOT_REQ_ADDR (PLAT_SRB_BASE_ADDR + 0x0000006c)
#define IAXXX_SRB_BOOT_REQ_MASK_VAL 0x00000fff
#define IAXXX_SRB_BOOT_REQ_RMASK_VAL 0x00000fff
#define IAXXX_SRB_BOOT_REQ_WMASK_VAL 0x00000fff
#define IAXXX_SRB_BOOT_REQ_RESET_VAL 0x00000000

/*
 * Host sets to request to start application code execution
 * from address provided in JUMP_ADDRESS register.
 * Requires block update to take effect.
 * Device clears when operation is complete.
 */
#define IAXXX_SRB_BOOT_REQ_JUMP_REQ_MASK 0x00000001
#define IAXXX_SRB_BOOT_REQ_JUMP_REQ_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_REQ_JUMP_REQ_POS 0
#define IAXXX_SRB_BOOT_REQ_JUMP_REQ_SIZE 1

/*
 * Host sets to request internal oscillator calibration.
 * Requires block update to take effect.
 * Device clears when operation is complete.
 */
#define IAXXX_SRB_BOOT_REQ_INT_OSC_CALIB_REQ_MASK 0x00000002
#define IAXXX_SRB_BOOT_REQ_INT_OSC_CALIB_REQ_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_REQ_INT_OSC_CALIB_REQ_POS 1
#define IAXXX_SRB_BOOT_REQ_INT_OSC_CALIB_REQ_SIZE 1

/*
 * Host sets to request memory test.
 * Requires block update to take effect.
 * Device clears when operation is complete.
 */
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_REQ_MASK 0x00000004
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_REQ_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_REQ_POS 2
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_REQ_SIZE 1

/*
 * Host sets to enable quick memory test, where size of the memory is
 * drastically reduced.
 * This bit is in conjunction with MEM_TEST_TILE_NUM, and MEM_TEST_REQ
 */
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_ENABLE_QUICK_TEST_MASK 0x00000008
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_ENABLE_QUICK_TEST_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_ENABLE_QUICK_TEST_POS 3
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_ENABLE_QUICK_TEST_SIZE 1

/*
 * Host writes tile number for the memory test to run.
 * Memory test will be conducted on entire memory If writes'0'.
 * Else, memory test will be conducted on given single tile. (Index 1-max)
 */
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_TILE_NUM_MASK 0x00000ff0
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_TILE_NUM_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_TILE_NUM_POS 4
#define IAXXX_SRB_BOOT_REQ_MEM_TEST_TILE_NUM_SIZE 8

/*** SRB_BOOT_JUMP_ADDR (PLAT_SRB_BASE_ADDR + 0x00000070) ***/
/*
 * Contains application start address.
 */
#define IAXXX_SRB_BOOT_JUMP_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000070)
#define IAXXX_SRB_BOOT_JUMP_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_JUMP_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_JUMP_ADDR_WMASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_JUMP_ADDR_RESET_VAL 0x00000000

/*
 * Host writes the application start address to this register.
 */
#define IAXXX_SRB_BOOT_JUMP_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_BOOT_JUMP_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_JUMP_ADDR_REG_POS 0
#define IAXXX_SRB_BOOT_JUMP_ADDR_REG_SIZE 32

/*** SRB_BOOT_OTP_ADDR (PLAT_SRB_BASE_ADDR + 0x00000074) ***/
/*
 * Start address of OTP/EFUSE block saved by SBL during boot.
 */
#define IAXXX_SRB_BOOT_OTP_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000074)
#define IAXXX_SRB_BOOT_OTP_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_OTP_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_OTP_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_OTP_ADDR_RESET_VAL 0x00000000

/*
 * Contains the start address of the buffer to
 * which OTP values were saved during SBL boot-up.
 */
#define IAXXX_SRB_BOOT_OTP_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_BOOT_OTP_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_OTP_ADDR_REG_POS 0
#define IAXXX_SRB_BOOT_OTP_ADDR_REG_SIZE 32

/*** SRB_BOOT_OTP_LENGTH (PLAT_SRB_BASE_ADDR + 0x00000078) ***/
/*
 * Length of OTP/EFUSE block.
 */
#define IAXXX_SRB_BOOT_OTP_LENGTH_ADDR (PLAT_SRB_BASE_ADDR + 0x00000078)
#define IAXXX_SRB_BOOT_OTP_LENGTH_MASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_OTP_LENGTH_RMASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_OTP_LENGTH_WMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_OTP_LENGTH_RESET_VAL 0x00000000

/*
 * Contains the length of the OTP buffer.
 */
#define IAXXX_SRB_BOOT_OTP_LENGTH_REG_MASK 0xffffffff
#define IAXXX_SRB_BOOT_OTP_LENGTH_REG_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_OTP_LENGTH_REG_POS 0
#define IAXXX_SRB_BOOT_OTP_LENGTH_REG_SIZE 32

/*** SRB_BOOT_INT_OSC_CALIB_DELAY (PLAT_SRB_BASE_ADDR + 0x0000007c) ***/
/*
 * Contains calibration measurement time per iteration.
 */
#define IAXXX_SRB_BOOT_INT_OSC_CALIB_DELAY_ADDR (PLAT_SRB_BASE_ADDR + 0x0000007c)
#define IAXXX_SRB_BOOT_INT_OSC_CALIB_DELAY_MASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_INT_OSC_CALIB_DELAY_RMASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_INT_OSC_CALIB_DELAY_WMASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_INT_OSC_CALIB_DELAY_RESET_VAL 0x00000000

/*
 * Contains the delay in (INT_OSC_CALIB_DELAY * 1000)
 * cycles per iteration for internal oscillator calibration.
 */
#define IAXXX_SRB_BOOT_INT_OSC_CALIB_DELAY_REG_MASK 0xffffffff
#define IAXXX_SRB_BOOT_INT_OSC_CALIB_DELAY_REG_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_INT_OSC_CALIB_DELAY_REG_POS 0
#define IAXXX_SRB_BOOT_INT_OSC_CALIB_DELAY_REG_SIZE 32

/*** SRB_BOOT_INT_OSC_TRIM_VALUE (PLAT_SRB_BASE_ADDR + 0x00000080) ***/
/*
 * Contains internal oscillator trim value.
 */
#define IAXXX_SRB_BOOT_INT_OSC_TRIM_VALUE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000080)
#define IAXXX_SRB_BOOT_INT_OSC_TRIM_VALUE_MASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_INT_OSC_TRIM_VALUE_RMASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_INT_OSC_TRIM_VALUE_WMASK_VAL 0xffffffff
#define IAXXX_SRB_BOOT_INT_OSC_TRIM_VALUE_RESET_VAL 0x00000000

/*
 * Contains the trim value computed after
 * internal oscillator calibration.
 */
#define IAXXX_SRB_BOOT_INT_OSC_TRIM_VALUE_REG_MASK 0xffffffff
#define IAXXX_SRB_BOOT_INT_OSC_TRIM_VALUE_REG_RESET_VAL 0x0
#define IAXXX_SRB_BOOT_INT_OSC_TRIM_VALUE_REG_POS 0
#define IAXXX_SRB_BOOT_INT_OSC_TRIM_VALUE_REG_SIZE 32

/*** SRB_BOOT_RESERVED_1 (PLAT_SRB_BASE_ADDR + 0x00000084) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_BOOT_RESERVED_1_ADDR (PLAT_SRB_BASE_ADDR + 0x00000084)
#define IAXXX_SRB_BOOT_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_1_RESET_VAL 0x00000000

/*** SRB_BOOT_RESERVED_2 (PLAT_SRB_BASE_ADDR + 0x00000088) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_BOOT_RESERVED_2_ADDR (PLAT_SRB_BASE_ADDR + 0x00000088)
#define IAXXX_SRB_BOOT_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_2_RESET_VAL 0x00000000

/*** SRB_BOOT_RESERVED_3 (PLAT_SRB_BASE_ADDR + 0x0000008c) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_BOOT_RESERVED_3_ADDR (PLAT_SRB_BASE_ADDR + 0x0000008c)
#define IAXXX_SRB_BOOT_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_3_RESET_VAL 0x00000000

/*** SRB_BOOT_RESERVED_4 (PLAT_SRB_BASE_ADDR + 0x00000090) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_BOOT_RESERVED_4_ADDR (PLAT_SRB_BASE_ADDR + 0x00000090)
#define IAXXX_SRB_BOOT_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_4_RESET_VAL 0x00000000

/*** SRB_BOOT_RESERVED_5 (PLAT_SRB_BASE_ADDR + 0x00000094) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_BOOT_RESERVED_5_ADDR (PLAT_SRB_BASE_ADDR + 0x00000094)
#define IAXXX_SRB_BOOT_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_5_RESET_VAL 0x00000000

/*** SRB_BOOT_RESERVED_6 (PLAT_SRB_BASE_ADDR + 0x00000098) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_BOOT_RESERVED_6_ADDR (PLAT_SRB_BASE_ADDR + 0x00000098)
#define IAXXX_SRB_BOOT_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_SRB_BOOT_RESERVED_6_RESET_VAL 0x00000000

/*** SRB_CHKSUM (PLAT_SRB_BASE_ADDR + 0x0000009c) ***/
/*
 * Request a checksum calculation.
 */
#define IAXXX_SRB_CHKSUM_ADDR (PLAT_SRB_BASE_ADDR + 0x0000009c)
#define IAXXX_SRB_CHKSUM_MASK_VAL 0x00000003
#define IAXXX_SRB_CHKSUM_RMASK_VAL 0x00000003
#define IAXXX_SRB_CHKSUM_WMASK_VAL 0x00000003
#define IAXXX_SRB_CHKSUM_RESET_VAL 0x00000000

/*
 * Host sets to request checksum calculation of section
 * specified by CHKSUM_BUFFER_ADDR and CHKSUM_LENGTH.
 * Requires block update to take effect.
 * Device clears when operation is complete.
 */
#define IAXXX_SRB_CHKSUM_SECTION_REQ_MASK 0x00000001
#define IAXXX_SRB_CHKSUM_SECTION_REQ_RESET_VAL 0x0
#define IAXXX_SRB_CHKSUM_SECTION_REQ_POS 0
#define IAXXX_SRB_CHKSUM_SECTION_REQ_SIZE 1

/*
 * Host sets to request checksum calculation of IROM.
 * The calculation is compared with expected checksum
 * set in EXPECTED_ROM_CHKSUM.
 * Requires block update to take effect.
 * Device clears when operation is complete.
 */
#define IAXXX_SRB_CHKSUM_ROM_VERIFY_REQ_MASK 0x00000002
#define IAXXX_SRB_CHKSUM_ROM_VERIFY_REQ_RESET_VAL 0x0
#define IAXXX_SRB_CHKSUM_ROM_VERIFY_REQ_POS 1
#define IAXXX_SRB_CHKSUM_ROM_VERIFY_REQ_SIZE 1

/*** SRB_CHKSUM_BUFFER_ADDR (PLAT_SRB_BASE_ADDR + 0x000000a0) ***/
/*
 * Checksum buffer base address.
 */
#define IAXXX_SRB_CHKSUM_BUFFER_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000000a0)
#define IAXXX_SRB_CHKSUM_BUFFER_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_BUFFER_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_BUFFER_ADDR_WMASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_BUFFER_ADDR_RESET_VAL 0x00000000

/*
 * Contains the address of the buffer for which the checksum is to be
 * calculated.
 */
#define IAXXX_SRB_CHKSUM_BUFFER_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_CHKSUM_BUFFER_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_CHKSUM_BUFFER_ADDR_REG_POS 0
#define IAXXX_SRB_CHKSUM_BUFFER_ADDR_REG_SIZE 32

/*** SRB_CHKSUM_LENGTH (PLAT_SRB_BASE_ADDR + 0x000000a4) ***/
/*
 * Checksum buffer length.
 */
#define IAXXX_SRB_CHKSUM_LENGTH_ADDR (PLAT_SRB_BASE_ADDR + 0x000000a4)
#define IAXXX_SRB_CHKSUM_LENGTH_MASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_LENGTH_RMASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_LENGTH_WMASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_LENGTH_RESET_VAL 0x00000000

/*
 * The length, in bytes, of the buffer for which the checksum is to be
 * calculated.
 */
#define IAXXX_SRB_CHKSUM_LENGTH_REG_MASK 0xffffffff
#define IAXXX_SRB_CHKSUM_LENGTH_REG_RESET_VAL 0x0
#define IAXXX_SRB_CHKSUM_LENGTH_REG_POS 0
#define IAXXX_SRB_CHKSUM_LENGTH_REG_SIZE 32

/*** SRB_CHKSUM_VAL1 (PLAT_SRB_BASE_ADDR + 0x000000a8) ***/
/*
 * Checksum value 1.
 */
#define IAXXX_SRB_CHKSUM_VAL1_ADDR (PLAT_SRB_BASE_ADDR + 0x000000a8)
#define IAXXX_SRB_CHKSUM_VAL1_MASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_VAL1_RMASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_VAL1_WMASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_VAL1_RESET_VAL 0x00000000

/*
 * Upon checksum calculation, the value will appear here.
 * Write 0 to reset the value before starting a new calculation.
 * Otherwise, calculation will resume with current value.
 */
#define IAXXX_SRB_CHKSUM_VAL1_REG_MASK 0xffffffff
#define IAXXX_SRB_CHKSUM_VAL1_REG_RESET_VAL 0x0
#define IAXXX_SRB_CHKSUM_VAL1_REG_POS 0
#define IAXXX_SRB_CHKSUM_VAL1_REG_SIZE 32

/*** SRB_CHKSUM_VAL2 (PLAT_SRB_BASE_ADDR + 0x000000ac) ***/
/*
 * Checksum value 2.
 */
#define IAXXX_SRB_CHKSUM_VAL2_ADDR (PLAT_SRB_BASE_ADDR + 0x000000ac)
#define IAXXX_SRB_CHKSUM_VAL2_MASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_VAL2_RMASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_VAL2_WMASK_VAL 0xffffffff
#define IAXXX_SRB_CHKSUM_VAL2_RESET_VAL 0x00000000

/*
 * Upon checksum calculation, the value will appear here.
 * Write 0 to reset the value before starting a new calculation.
 * Otherwise, calculation will resume with current value.
 */
#define IAXXX_SRB_CHKSUM_VAL2_REG_MASK 0xffffffff
#define IAXXX_SRB_CHKSUM_VAL2_REG_RESET_VAL 0x0
#define IAXXX_SRB_CHKSUM_VAL2_REG_POS 0
#define IAXXX_SRB_CHKSUM_VAL2_REG_SIZE 32

/*** SRB_EXPECTED_CHKSUM (PLAT_SRB_BASE_ADDR + 0x000000b0) ***/
/*
 * Expected checksum calculation value
 */
#define IAXXX_SRB_EXPECTED_CHKSUM_ADDR (PLAT_SRB_BASE_ADDR + 0x000000b0)
#define IAXXX_SRB_EXPECTED_CHKSUM_MASK_VAL 0xffffffff
#define IAXXX_SRB_EXPECTED_CHKSUM_RMASK_VAL 0xffffffff
#define IAXXX_SRB_EXPECTED_CHKSUM_WMASK_VAL 0xffffffff
#define IAXXX_SRB_EXPECTED_CHKSUM_RESET_VAL 0x00000000

/*
 * To verify whether a checksum calculation is correct, the host
 * can set the expected checksum value into this register. The
 * calculation that gets triggered afterward will compare against
 * this value and return a match or mismatch status to the host.
 * If this value is set to 0, then a comparison with the checksum
 * calculation will not be made.
 */
#define IAXXX_SRB_EXPECTED_CHKSUM_REG_MASK 0xffffffff
#define IAXXX_SRB_EXPECTED_CHKSUM_REG_RESET_VAL 0x0
#define IAXXX_SRB_EXPECTED_CHKSUM_REG_POS 0
#define IAXXX_SRB_EXPECTED_CHKSUM_REG_SIZE 32

/*** SRB_CHKSUM_RESERVED_1 (PLAT_SRB_BASE_ADDR + 0x000000b4) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_CHKSUM_RESERVED_1_ADDR (PLAT_SRB_BASE_ADDR + 0x000000b4)
#define IAXXX_SRB_CHKSUM_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_SRB_CHKSUM_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_SRB_CHKSUM_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_SRB_CHKSUM_RESERVED_1_RESET_VAL 0x00000000

/*** SRB_CHKSUM_RESERVED_2 (PLAT_SRB_BASE_ADDR + 0x000000b8) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_CHKSUM_RESERVED_2_ADDR (PLAT_SRB_BASE_ADDR + 0x000000b8)
#define IAXXX_SRB_CHKSUM_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_SRB_CHKSUM_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_SRB_CHKSUM_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_SRB_CHKSUM_RESERVED_2_RESET_VAL 0x00000000

/*** SRB_FLASHUPD_REQUEST (PLAT_SRB_BASE_ADDR + 0x000000bc) ***/
/*
 * Request flash update
 */
#define IAXXX_SRB_FLASHUPD_REQUEST_ADDR (PLAT_SRB_BASE_ADDR + 0x000000bc)
#define IAXXX_SRB_FLASHUPD_REQUEST_MASK_VAL 0x000001ff
#define IAXXX_SRB_FLASHUPD_REQUEST_RMASK_VAL 0x000001ff
#define IAXXX_SRB_FLASHUPD_REQUEST_WMASK_VAL 0x000001ff
#define IAXXX_SRB_FLASHUPD_REQUEST_RESET_VAL 0x00000000

/*
 * Host sets this bit after setting flash image size in FALSH_IMG_SIZE
 * Requires block update to take effect.
 * Device clears when flash buffer is allocated and FLASHUPD_IMG_ADDR is set.
 */
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BUF_REQ_MASK 0x00000001
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BUF_REQ_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BUF_REQ_POS 0
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BUF_REQ_SIZE 1

/*
 * Host sets this bit after transferring new flash image to update Boot
 * image.
 */
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BOOT_IMG_UPD_MASK 0x00000010
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BOOT_IMG_UPD_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BOOT_IMG_UPD_POS 4
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BOOT_IMG_UPD_SIZE 1

/*
 * Host sets this bit to indicate flash program continue (next block)
 */
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_CONT_NEXT_BLK_MASK 0x00000020
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_CONT_NEXT_BLK_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_CONT_NEXT_BLK_POS 5
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_CONT_NEXT_BLK_SIZE 1

/*
 * Host sets this bit to indicate user partition segment write
 */
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_USER_SEG_WRITE_MASK 0x00000040
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_USER_SEG_WRITE_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_USER_SEG_WRITE_POS 6
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_USER_SEG_WRITE_SIZE 1

/*
 * Host sets this bit to indicate user partition segment read
 */
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_USER_SEG_READ_MASK 0x00000080
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_USER_SEG_READ_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_USER_SEG_READ_POS 7
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_USER_SEG_READ_SIZE 1

/*
 * Host sets this bit to indicate flash buffer free
 */
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BUF_RELEASE_MASK 0x00000100
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BUF_RELEASE_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BUF_RELEASE_POS 8
#define IAXXX_SRB_FLASHUPD_REQUEST_FLASH_BUF_RELEASE_SIZE 1

/*** SRB_FLASHUPD_STATUS (PLAT_SRB_BASE_ADDR + 0x000000c0) ***/
/*
 * Flash update status
 */
#define IAXXX_SRB_FLASHUPD_STATUS_ADDR (PLAT_SRB_BASE_ADDR + 0x000000c0)
#define IAXXX_SRB_FLASHUPD_STATUS_MASK_VAL 0x000000ff
#define IAXXX_SRB_FLASHUPD_STATUS_RMASK_VAL 0x000000ff
#define IAXXX_SRB_FLASHUPD_STATUS_WMASK_VAL 0x00000000
#define IAXXX_SRB_FLASHUPD_STATUS_RESET_VAL 0x00000000

/*
 * Error code encountered during flash update process
 * 0x0 - No error.
 * 0x1 - Flash update buffer allocation failure
 * 0x2 - Flash program error
 * 0x3 - Flash checksum calculation error
 */
#define IAXXX_SRB_FLASHUPD_STATUS_ERR_CODE_MASK 0x000000ff
#define IAXXX_SRB_FLASHUPD_STATUS_ERR_CODE_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_STATUS_ERR_CODE_POS 0
#define IAXXX_SRB_FLASHUPD_STATUS_ERR_CODE_SIZE 8

/*** SRB_FLASHUPD_IMG_SIZE (PLAT_SRB_BASE_ADDR + 0x000000c4) ***/
/*
 * Size of the new flash image, in bytes.
 */
#define IAXXX_SRB_FLASHUPD_IMG_SIZE_ADDR (PLAT_SRB_BASE_ADDR + 0x000000c4)
#define IAXXX_SRB_FLASHUPD_IMG_SIZE_MASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_IMG_SIZE_RMASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_IMG_SIZE_WMASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_IMG_SIZE_RESET_VAL 0x00000000

/*
 * Size of the new flash image, in bytes.
 * Must be a multiple of 4 bytes.
 */
#define IAXXX_SRB_FLASHUPD_IMG_SIZE_REG_MASK 0xffffffff
#define IAXXX_SRB_FLASHUPD_IMG_SIZE_REG_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_IMG_SIZE_REG_POS 0
#define IAXXX_SRB_FLASHUPD_IMG_SIZE_REG_SIZE 32

/*** SRB_FLASHUPD_IMG_ADDR (PLAT_SRB_BASE_ADDR + 0x000000c8) ***/
/*
 * Address of the allocated memory where host can transfer new flash image.
 */
#define IAXXX_SRB_FLASHUPD_IMG_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000000c8)
#define IAXXX_SRB_FLASHUPD_IMG_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_IMG_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_IMG_ADDR_WMASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_IMG_ADDR_RESET_VAL 0x00000000

/*
 * On memory allocation - Set by device
 * upon completion, with address of allocated memory.
 * where host can start transferring new flash image.
 */
#define IAXXX_SRB_FLASHUPD_IMG_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_FLASHUPD_IMG_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_IMG_ADDR_REG_POS 0
#define IAXXX_SRB_FLASHUPD_IMG_ADDR_REG_SIZE 32

/*** SRB_FLASHUPD_BLK_SIZE (PLAT_SRB_BASE_ADDR + 0x000000cc) ***/
/*
 * Size of flash update block, in bytes. Used to perform flash update in
 * blocks to save memory.
 */
#define IAXXX_SRB_FLASHUPD_BLK_SIZE_ADDR (PLAT_SRB_BASE_ADDR + 0x000000cc)
#define IAXXX_SRB_FLASHUPD_BLK_SIZE_MASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_BLK_SIZE_RMASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_BLK_SIZE_WMASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_BLK_SIZE_RESET_VAL 0x00000000

/*
 * Size of flash update block in bytes.
 */
#define IAXXX_SRB_FLASHUPD_BLK_SIZE_REG_MASK 0xffffffff
#define IAXXX_SRB_FLASHUPD_BLK_SIZE_REG_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_BLK_SIZE_REG_POS 0
#define IAXXX_SRB_FLASHUPD_BLK_SIZE_REG_SIZE 32

/*** SRB_FLASHUPD_SEG_NUM (PLAT_SRB_BASE_ADDR + 0x000000d0) ***/
/*
 * Specify segment number in user partition to be updated.
 */
#define IAXXX_SRB_FLASHUPD_SEG_NUM_ADDR (PLAT_SRB_BASE_ADDR + 0x000000d0)
#define IAXXX_SRB_FLASHUPD_SEG_NUM_MASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_SEG_NUM_RMASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_SEG_NUM_WMASK_VAL 0xffffffff
#define IAXXX_SRB_FLASHUPD_SEG_NUM_RESET_VAL 0x00000000

/*
 * User partition segment number.
 */
#define IAXXX_SRB_FLASHUPD_SEG_NUM_REG_MASK 0xffffffff
#define IAXXX_SRB_FLASHUPD_SEG_NUM_REG_RESET_VAL 0x0
#define IAXXX_SRB_FLASHUPD_SEG_NUM_REG_POS 0
#define IAXXX_SRB_FLASHUPD_SEG_NUM_REG_SIZE 32

/*** SRB_FLASHUPD_RESERVED_1 (PLAT_SRB_BASE_ADDR + 0x000000d4) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_FLASHUPD_RESERVED_1_ADDR (PLAT_SRB_BASE_ADDR + 0x000000d4)
#define IAXXX_SRB_FLASHUPD_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_SRB_FLASHUPD_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_SRB_FLASHUPD_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_SRB_FLASHUPD_RESERVED_1_RESET_VAL 0x00000000

/*** SRB_FLASHUPD_RESERVED_2 (PLAT_SRB_BASE_ADDR + 0x000000d8) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_FLASHUPD_RESERVED_2_ADDR (PLAT_SRB_BASE_ADDR + 0x000000d8)
#define IAXXX_SRB_FLASHUPD_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_SRB_FLASHUPD_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_SRB_FLASHUPD_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_SRB_FLASHUPD_RESERVED_2_RESET_VAL 0x00000000

/*** SRB_SYS_SBL_TEST_EXIT (PLAT_SRB_BASE_ADDR + 0x000000dc) ***/
/*
 * Exit status for SBL memory and checksum tests
 */
#define IAXXX_SRB_SYS_SBL_TEST_EXIT_ADDR (PLAT_SRB_BASE_ADDR + 0x000000dc)
#define IAXXX_SRB_SYS_SBL_TEST_EXIT_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_SBL_TEST_EXIT_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_SBL_TEST_EXIT_WMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_SBL_TEST_EXIT_RESET_VAL 0x00000000

/*
 * This register stores the pass/fail status of
 * SBL memory tests and checksum tests. In case
 * of a failing scenario for a memory test, this
 * register will contain the address of the memory
 * location that failed the test.
 * 0xFA550000: Test passed
 * 0xFA1D0000: Checksum test failed (in case of memory
 * test failure, the bad address will be stored here)
 */
#define IAXXX_SRB_SYS_SBL_TEST_EXIT_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_SBL_TEST_EXIT_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_SBL_TEST_EXIT_REG_POS 0
#define IAXXX_SRB_SYS_SBL_TEST_EXIT_REG_SIZE 32

/*** SRB_PROC_PWR_CTRL (PLAT_SRB_BASE_ADDR + 0x000000e0) ***/
/*
 * This register is used to set the power state of processor:
 */
#define IAXXX_SRB_PROC_PWR_CTRL_ADDR (PLAT_SRB_BASE_ADDR + 0x000000e0)
#define IAXXX_SRB_PROC_PWR_CTRL_MASK_VAL 0x003f003f
#define IAXXX_SRB_PROC_PWR_CTRL_RMASK_VAL 0x00340034
#define IAXXX_SRB_PROC_PWR_CTRL_WMASK_VAL 0x00340034
#define IAXXX_SRB_PROC_PWR_CTRL_RESET_VAL 0x00000000

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_0_MASK 0x00000001
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_0_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_0_POS 0
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_0_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_1_MASK 0x00000002
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_1_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_1_POS 1
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_1_SIZE 1

/*
 * Host sets bit to power ON processor and clears to power down processor
 * (SSP)
 */
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_2_MASK 0x00000004
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_2_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_2_POS 2
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_2_SIZE 1

/*
 * Reserved only hw sleep is allowed for CM4 see PROC_HWSLEEP_CTRL
 */
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_3_MASK 0x00000008
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_3_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_3_POS 3
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_3_SIZE 1

/*
 * Host sets bit to power ON processor and clears to power down processor
 * (HMD)
 */
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_4_MASK 0x00000010
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_4_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_4_POS 4
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_4_SIZE 1

/*
 * Host sets bit to power ON processor and clears to power down processor
 * (DMX)
 */
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_5_MASK 0x00000020
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_5_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_5_POS 5
#define IAXXX_SRB_PROC_PWR_CTRL_PWR_ON_PROC_5_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_0_MASK 0x00010000
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_0_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_0_POS 16
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_0_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_1_MASK 0x00020000
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_1_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_1_POS 17
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_1_SIZE 1

/*
 * Host sets bit to put processor in stall mode and clears to bring processor
 * out of stall mode (SSP)
 */
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_2_MASK 0x00040000
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_2_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_2_POS 18
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_2_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_3_MASK 0x00080000
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_3_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_3_POS 19
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_3_SIZE 1

/*
 * Host sets bit to put processor in stall mode and clears to bring processor
 * out of stall mode (HMD)
 */
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_4_MASK 0x00100000
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_4_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_4_POS 20
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_4_SIZE 1

/*
 * Host sets bit to put processor in stall mode and clears to bring processor
 * out of stall mode (DMX)
 */
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_5_MASK 0x00200000
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_5_RESET_VAL 0x0
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_5_POS 21
#define IAXXX_SRB_PROC_PWR_CTRL_STALL_PROC_5_SIZE 1

/*** SRB_PROC_HWSLEEP_CTRL (PLAT_SRB_BASE_ADDR + 0x000000e4) ***/
/*
 * This register is used to trigger hardware sleep for control processor.
 */
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_ADDR (PLAT_SRB_BASE_ADDR + 0x000000e4)
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_MASK_VAL 0x0000003f
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_RMASK_VAL 0x00000008
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_WMASK_VAL 0x00000008
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_RESET_VAL 0x00000000

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_0_MASK 0x00000001
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_0_RESET_VAL 0x0
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_0_POS 0
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_0_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_1_MASK 0x00000002
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_1_RESET_VAL 0x0
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_1_POS 1
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_1_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_2_MASK 0x00000004
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_2_RESET_VAL 0x0
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_2_POS 2
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_2_SIZE 1

/*
 * Host sets bit to trigger hardware sleep for IA8508 (CM4)
 */
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_3_MASK 0x00000008
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_3_RESET_VAL 0x0
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_3_POS 3
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_3_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_4_MASK 0x00000010
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_4_RESET_VAL 0x0
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_4_POS 4
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_4_SIZE 1

/*
 * Host sets bit to trigger hardware sleep for IA8201 and IA8206A
 */
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_5_MASK 0x00000020
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_5_RESET_VAL 0x0
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_5_POS 5
#define IAXXX_SRB_PROC_HWSLEEP_CTRL_HWSLEEP_PROC_5_SIZE 1

/*** SRB_DED_MEM_PWR_CTRL (PLAT_SRB_BASE_ADDR + 0x000000e8) ***/
/*
 * This register is used to set the power state of memory:
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_ADDR (PLAT_SRB_BASE_ADDR + 0x000000e8)
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MASK_VAL 0x003f003f
#define IAXXX_SRB_DED_MEM_PWR_CTRL_RMASK_VAL 0x00340034
#define IAXXX_SRB_DED_MEM_PWR_CTRL_WMASK_VAL 0x00340034
#define IAXXX_SRB_DED_MEM_PWR_CTRL_RESET_VAL 0x00000000

/*
 * Reserved not supported
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_0_MASK 0x00000001
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_0_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_0_POS 0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_0_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_1_MASK 0x00000002
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_1_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_1_POS 1
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_1_SIZE 1

/*
 * Host sets bit to power ON memory and clears to power down memory (SSP)
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_2_MASK 0x00000004
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_2_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_2_POS 2
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_2_SIZE 1

/*
 * Reserved only hw sleep is allowed for CM4 see PROC_HWSLEEP_CTRL
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_3_MASK 0x00000008
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_3_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_3_POS 3
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_3_SIZE 1

/*
 * Host sets bit to power ON memory and clears to power down memory (HMD)
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_4_MASK 0x00000010
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_4_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_4_POS 4
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_4_SIZE 1

/*
 * Host sets bit to power ON memory and clears to power down memory (DMX)
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_5_MASK 0x00000020
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_5_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_5_POS 5
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_PWR_ON_PROC_5_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_0_MASK 0x00010000
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_0_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_0_POS 16
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_0_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_1_MASK 0x00020000
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_1_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_1_POS 17
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_1_SIZE 1

/*
 * Host sets bit to put memory in retention and clears to bring memory out of
 * retention (SSP)
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_2_MASK 0x00040000
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_2_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_2_POS 18
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_2_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_3_MASK 0x00080000
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_3_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_3_POS 19
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_3_SIZE 1

/*
 * Host sets bit to put memory in retention and clears to bring memory out of
 * retention (HMD)
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_4_MASK 0x00100000
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_4_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_4_POS 20
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_4_SIZE 1

/*
 * Host sets bit to put memory in retention and clears to bring memory out of
 * retention (DMX)
 */
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_5_MASK 0x00200000
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_5_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_5_POS 21
#define IAXXX_SRB_DED_MEM_PWR_CTRL_MEM_RETN_PROC_5_SIZE 1

/*** SRB_DED_MEM_PWR_STATUS (PLAT_SRB_BASE_ADDR + 0x000000ec) ***/
/*
 * This register represents the power status of the processors (ON/OFF,
 * STALL/RUNNING)
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_ADDR (PLAT_SRB_BASE_ADDR + 0x000000ec)
#define IAXXX_SRB_DED_MEM_PWR_STATUS_MASK_VAL 0x003f003f
#define IAXXX_SRB_DED_MEM_PWR_STATUS_RMASK_VAL 0x003e003e
#define IAXXX_SRB_DED_MEM_PWR_STATUS_WMASK_VAL 0x00000000
#define IAXXX_SRB_DED_MEM_PWR_STATUS_RESET_VAL 0x00000000

/*
 * Reserved not supported
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_0_MEM_PWR_MASK 0x00000001
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_0_MEM_PWR_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_0_MEM_PWR_POS 0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_0_MEM_PWR_SIZE 1

/*
 * Status of dedicated memory of processor 1
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_1_MEM_PWR_MASK 0x00000002
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_1_MEM_PWR_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_1_MEM_PWR_POS 1
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_1_MEM_PWR_SIZE 1

/*
 * Status of dedicated memory of processor 2
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_2_MEM_PWR_MASK 0x00000004
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_2_MEM_PWR_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_2_MEM_PWR_POS 2
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_2_MEM_PWR_SIZE 1

/*
 * Status of dedicated memory of processor 3
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_3_MEM_PWR_MASK 0x00000008
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_3_MEM_PWR_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_3_MEM_PWR_POS 3
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_3_MEM_PWR_SIZE 1

/*
 * Status of dedicated memory of processor 4
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_4_MEM_PWR_MASK 0x00000010
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_4_MEM_PWR_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_4_MEM_PWR_POS 4
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_4_MEM_PWR_SIZE 1

/*
 * Status of dedicated memory of processor 5
 * 0 - Powered off
 * 1 - Powered on
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_5_MEM_PWR_MASK 0x00000020
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_5_MEM_PWR_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_5_MEM_PWR_POS 5
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_5_MEM_PWR_SIZE 1

/*
 * Reserved not supported
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_0_MEM_RETN_MASK 0x00010000
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_0_MEM_RETN_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_0_MEM_RETN_POS 16
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_0_MEM_RETN_SIZE 1

/*
 * Retention status of dedicated memory of processor 1
 * 0 - Memory not in retention mode
 * 1 - Memory in retention mode
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_1_MEM_RETN_MASK 0x00020000
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_1_MEM_RETN_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_1_MEM_RETN_POS 17
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_1_MEM_RETN_SIZE 1

/*
 * Retention status of dedicated memory of processor 2
 * 0 - Memory not in retention mode
 * 1 - Memory in retention mode
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_2_MEM_RETN_MASK 0x00040000
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_2_MEM_RETN_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_2_MEM_RETN_POS 18
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_2_MEM_RETN_SIZE 1

/*
 * Retention status of dedicated memory of processor 3
 * 0 - Memory not in retention mode
 * 1 - Memory in retention mode
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_3_MEM_RETN_MASK 0x00080000
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_3_MEM_RETN_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_3_MEM_RETN_POS 19
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_3_MEM_RETN_SIZE 1

/*
 * Retention status of dedicated memory of processor 4
 * 0 - Memory not in retention mode
 * 1 - Memory in retention mode
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_4_MEM_RETN_MASK 0x00100000
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_4_MEM_RETN_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_4_MEM_RETN_POS 20
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_4_MEM_RETN_SIZE 1

/*
 * Retention status of dedicated memory of processor 5
 * 0 - Memory not in retention mode
 * 1 - Memory in retention mode
 */
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_5_MEM_RETN_MASK 0x00200000
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_5_MEM_RETN_RESET_VAL 0x0
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_5_MEM_RETN_POS 21
#define IAXXX_SRB_DED_MEM_PWR_STATUS_PROC_5_MEM_RETN_SIZE 1

/*** SRB_SYSTEM_SLEEP_DURATION (PLAT_SRB_BASE_ADDR + 0x000000f0) ***/
/*
 * Duration (in ms) during which System was in Sleep mode.
 */
#define IAXXX_SRB_SYSTEM_SLEEP_DURATION_ADDR (PLAT_SRB_BASE_ADDR + 0x000000f0)
#define IAXXX_SRB_SYSTEM_SLEEP_DURATION_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYSTEM_SLEEP_DURATION_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYSTEM_SLEEP_DURATION_WMASK_VAL 0xffffffff
#define IAXXX_SRB_SYSTEM_SLEEP_DURATION_RESET_VAL 0x00000000

/*
 * This duration will be set by HOST after wake up. HOST should set this
 * duration before any power mode change takes place.
 */
#define IAXXX_SRB_SYSTEM_SLEEP_DURATION_REG_MASK 0xffffffff
#define IAXXX_SRB_SYSTEM_SLEEP_DURATION_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYSTEM_SLEEP_DURATION_REG_POS 0
#define IAXXX_SRB_SYSTEM_SLEEP_DURATION_REG_SIZE 32

/*** SRB_SYS_I2SM_CLOCK (PLAT_SRB_BASE_ADDR + 0x000000f4) ***/
/*
 * I2S Master clock frequency
 */
#define IAXXX_SRB_SYS_I2SM_CLOCK_ADDR (PLAT_SRB_BASE_ADDR + 0x000000f4)
#define IAXXX_SRB_SYS_I2SM_CLOCK_MASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_I2SM_CLOCK_RMASK_VAL 0xffffffff
#define IAXXX_SRB_SYS_I2SM_CLOCK_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_I2SM_CLOCK_RESET_VAL 0x00000000

/*
 * I2S Master clock frequency.
 */
#define IAXXX_SRB_SYS_I2SM_CLOCK_REG_MASK 0xffffffff
#define IAXXX_SRB_SYS_I2SM_CLOCK_REG_RESET_VAL 0x0
#define IAXXX_SRB_SYS_I2SM_CLOCK_REG_POS 0
#define IAXXX_SRB_SYS_I2SM_CLOCK_REG_SIZE 32

/*** SRB_SYS_RESERVED_18 (PLAT_SRB_BASE_ADDR + 0x000000f8) ***/
/*
 * Reserved register space for future use
 */
#define IAXXX_SRB_SYS_RESERVED_18_ADDR (PLAT_SRB_BASE_ADDR + 0x000000f8)
#define IAXXX_SRB_SYS_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_SRB_SYS_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_SRB_SYS_RESERVED_18_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_1 (PLAT_SRB_BASE_ADDR + 0x000000fc) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_1_ADDR (PLAT_SRB_BASE_ADDR + 0x000000fc)
#define IAXXX_SRB_HOST_DEFINED_1_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_1_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_1_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_1_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_2 (PLAT_SRB_BASE_ADDR + 0x00000100) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_2_ADDR (PLAT_SRB_BASE_ADDR + 0x00000100)
#define IAXXX_SRB_HOST_DEFINED_2_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_2_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_2_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_2_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_3 (PLAT_SRB_BASE_ADDR + 0x00000104) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_3_ADDR (PLAT_SRB_BASE_ADDR + 0x00000104)
#define IAXXX_SRB_HOST_DEFINED_3_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_3_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_3_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_3_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_4 (PLAT_SRB_BASE_ADDR + 0x00000108) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_4_ADDR (PLAT_SRB_BASE_ADDR + 0x00000108)
#define IAXXX_SRB_HOST_DEFINED_4_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_4_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_4_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_4_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_5 (PLAT_SRB_BASE_ADDR + 0x0000010c) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_5_ADDR (PLAT_SRB_BASE_ADDR + 0x0000010c)
#define IAXXX_SRB_HOST_DEFINED_5_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_5_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_5_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_5_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_6 (PLAT_SRB_BASE_ADDR + 0x00000110) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_6_ADDR (PLAT_SRB_BASE_ADDR + 0x00000110)
#define IAXXX_SRB_HOST_DEFINED_6_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_6_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_6_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_6_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_7 (PLAT_SRB_BASE_ADDR + 0x00000114) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_7_ADDR (PLAT_SRB_BASE_ADDR + 0x00000114)
#define IAXXX_SRB_HOST_DEFINED_7_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_7_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_7_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_7_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_8 (PLAT_SRB_BASE_ADDR + 0x00000118) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_8_ADDR (PLAT_SRB_BASE_ADDR + 0x00000118)
#define IAXXX_SRB_HOST_DEFINED_8_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_8_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_8_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_8_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_9 (PLAT_SRB_BASE_ADDR + 0x0000011c) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_9_ADDR (PLAT_SRB_BASE_ADDR + 0x0000011c)
#define IAXXX_SRB_HOST_DEFINED_9_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_9_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_9_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_9_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_10 (PLAT_SRB_BASE_ADDR + 0x00000120) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_10_ADDR (PLAT_SRB_BASE_ADDR + 0x00000120)
#define IAXXX_SRB_HOST_DEFINED_10_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_10_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_10_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_10_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_11 (PLAT_SRB_BASE_ADDR + 0x00000124) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_11_ADDR (PLAT_SRB_BASE_ADDR + 0x00000124)
#define IAXXX_SRB_HOST_DEFINED_11_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_11_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_11_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_11_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_12 (PLAT_SRB_BASE_ADDR + 0x00000128) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_12_ADDR (PLAT_SRB_BASE_ADDR + 0x00000128)
#define IAXXX_SRB_HOST_DEFINED_12_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_12_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_12_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_12_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_13 (PLAT_SRB_BASE_ADDR + 0x0000012c) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_13_ADDR (PLAT_SRB_BASE_ADDR + 0x0000012c)
#define IAXXX_SRB_HOST_DEFINED_13_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_13_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_13_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_13_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_14 (PLAT_SRB_BASE_ADDR + 0x00000130) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_14_ADDR (PLAT_SRB_BASE_ADDR + 0x00000130)
#define IAXXX_SRB_HOST_DEFINED_14_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_14_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_14_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_14_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_15 (PLAT_SRB_BASE_ADDR + 0x00000134) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_15_ADDR (PLAT_SRB_BASE_ADDR + 0x00000134)
#define IAXXX_SRB_HOST_DEFINED_15_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_15_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_15_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_15_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_16 (PLAT_SRB_BASE_ADDR + 0x00000138) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_16_ADDR (PLAT_SRB_BASE_ADDR + 0x00000138)
#define IAXXX_SRB_HOST_DEFINED_16_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_16_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_16_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_16_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_17 (PLAT_SRB_BASE_ADDR + 0x0000013c) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_17_ADDR (PLAT_SRB_BASE_ADDR + 0x0000013c)
#define IAXXX_SRB_HOST_DEFINED_17_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_17_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_17_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_17_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_18 (PLAT_SRB_BASE_ADDR + 0x00000140) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_18_ADDR (PLAT_SRB_BASE_ADDR + 0x00000140)
#define IAXXX_SRB_HOST_DEFINED_18_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_18_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_18_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_18_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_19 (PLAT_SRB_BASE_ADDR + 0x00000144) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_19_ADDR (PLAT_SRB_BASE_ADDR + 0x00000144)
#define IAXXX_SRB_HOST_DEFINED_19_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_19_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_19_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_19_RESET_VAL 0x00000000

/*** SRB_HOST_DEFINED_20 (PLAT_SRB_BASE_ADDR + 0x00000148) ***/
/*
 * Scratch registers used by host only.
 */
#define IAXXX_SRB_HOST_DEFINED_20_ADDR (PLAT_SRB_BASE_ADDR + 0x00000148)
#define IAXXX_SRB_HOST_DEFINED_20_MASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_20_RMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_20_WMASK_VAL 0x00000000
#define IAXXX_SRB_HOST_DEFINED_20_RESET_VAL 0x00000000

/*** SRB_PWR_STATE (PLAT_SRB_BASE_ADDR + 0x0000014c) ***/
/*
 * Put Chip to Sleep/Active state
 */
#define IAXXX_SRB_PWR_STATE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000014c)
#define IAXXX_SRB_PWR_STATE_MASK_VAL 0x00000001
#define IAXXX_SRB_PWR_STATE_RMASK_VAL 0x00000001
#define IAXXX_SRB_PWR_STATE_WMASK_VAL 0x00000001
#define IAXXX_SRB_PWR_STATE_RESET_VAL 0x00000000

/*
 * Host writes to this register in order to
 * put Chip to Sleep or Active state.
 * 0 for Sleep and 1 for Active.
 */
#define IAXXX_SRB_PWR_STATE_REG_MASK 0x00000001
#define IAXXX_SRB_PWR_STATE_REG_RESET_VAL 0x0
#define IAXXX_SRB_PWR_STATE_REG_POS 0
#define IAXXX_SRB_PWR_STATE_REG_SIZE 1

/*** SRB_PCM_PORT_PWR_EN (PLAT_SRB_BASE_ADDR + 0x00000150) ***/
/*
 * Turn ON/OFF clocks for pcm ports
 */
#define IAXXX_SRB_PCM_PORT_PWR_EN_ADDR (PLAT_SRB_BASE_ADDR + 0x00000150)
#define IAXXX_SRB_PCM_PORT_PWR_EN_MASK_VAL 0x0000003f
#define IAXXX_SRB_PCM_PORT_PWR_EN_RMASK_VAL 0x0000003f
#define IAXXX_SRB_PCM_PORT_PWR_EN_WMASK_VAL 0x0000003f
#define IAXXX_SRB_PCM_PORT_PWR_EN_RESET_VAL 0x00000000

/*
 * Enable/Disable PCM ports 0-5
 * 0 - Disable
 * 1 - Enable
 */
#define IAXXX_SRB_PCM_PORT_PWR_EN_REG_MASK 0x0000003f
#define IAXXX_SRB_PCM_PORT_PWR_EN_REG_RESET_VAL 0x0
#define IAXXX_SRB_PCM_PORT_PWR_EN_REG_POS 0
#define IAXXX_SRB_PCM_PORT_PWR_EN_REG_SIZE 6

/*** SRB_SBUS_PORT_PWR_EN (PLAT_SRB_BASE_ADDR + 0x00000154) ***/
/*
 * Turn ON/OFF clocks for slimbus ports
 */
#define IAXXX_SRB_SBUS_PORT_PWR_EN_ADDR (PLAT_SRB_BASE_ADDR + 0x00000154)
#define IAXXX_SRB_SBUS_PORT_PWR_EN_MASK_VAL 0x00000001
#define IAXXX_SRB_SBUS_PORT_PWR_EN_RMASK_VAL 0x00000001
#define IAXXX_SRB_SBUS_PORT_PWR_EN_WMASK_VAL 0x00000001
#define IAXXX_SRB_SBUS_PORT_PWR_EN_RESET_VAL 0x00000000

/*
 * Enable/Disable SLIMBUS port
 * 0 - Disable
 * 1 - Enable
 */
#define IAXXX_SRB_SBUS_PORT_PWR_EN_REG_MASK 0x00000001
#define IAXXX_SRB_SBUS_PORT_PWR_EN_REG_RESET_VAL 0x0
#define IAXXX_SRB_SBUS_PORT_PWR_EN_REG_POS 0
#define IAXXX_SRB_SBUS_PORT_PWR_EN_REG_SIZE 1

/*** SRB_PDMI_PORT_PWR_EN (PLAT_SRB_BASE_ADDR + 0x00000158) ***/
/*
 * Turn ON/OFF clocks for pdmi ports
 */
#define IAXXX_SRB_PDMI_PORT_PWR_EN_ADDR (PLAT_SRB_BASE_ADDR + 0x00000158)
#define IAXXX_SRB_PDMI_PORT_PWR_EN_MASK_VAL 0x000000ff
#define IAXXX_SRB_PDMI_PORT_PWR_EN_RMASK_VAL 0x000000ff
#define IAXXX_SRB_PDMI_PORT_PWR_EN_WMASK_VAL 0x000000ff
#define IAXXX_SRB_PDMI_PORT_PWR_EN_RESET_VAL 0x00000000

/*
 * Enable/Disable PDM input ports 0-7
 * 0 - Disable
 * 1 - Enable
 */
#define IAXXX_SRB_PDMI_PORT_PWR_EN_REG_MASK 0x000000ff
#define IAXXX_SRB_PDMI_PORT_PWR_EN_REG_RESET_VAL 0x0
#define IAXXX_SRB_PDMI_PORT_PWR_EN_REG_POS 0
#define IAXXX_SRB_PDMI_PORT_PWR_EN_REG_SIZE 8

/*** SRB_PDMO_PORT_PWR_EN (PLAT_SRB_BASE_ADDR + 0x0000015c) ***/
/*
 * Turn ON/OFF clocks for pdmo ports
 */
#define IAXXX_SRB_PDMO_PORT_PWR_EN_ADDR (PLAT_SRB_BASE_ADDR + 0x0000015c)
#define IAXXX_SRB_PDMO_PORT_PWR_EN_MASK_VAL 0x00000003
#define IAXXX_SRB_PDMO_PORT_PWR_EN_RMASK_VAL 0x00000003
#define IAXXX_SRB_PDMO_PORT_PWR_EN_WMASK_VAL 0x00000003
#define IAXXX_SRB_PDMO_PORT_PWR_EN_RESET_VAL 0x00000000

/*
 * Enable/Disable PDM output ports 0-1
 * 0 - Disable
 * 1 - Enable
 */
#define IAXXX_SRB_PDMO_PORT_PWR_EN_REG_MASK 0x00000003
#define IAXXX_SRB_PDMO_PORT_PWR_EN_REG_RESET_VAL 0x0
#define IAXXX_SRB_PDMO_PORT_PWR_EN_REG_POS 0
#define IAXXX_SRB_PDMO_PORT_PWR_EN_REG_SIZE 2

/*** SRB_ADC_PORT_PWR_EN (PLAT_SRB_BASE_ADDR + 0x00000160) ***/
/*
 * Turn ON/OFF clocks for adc ports
 */
#define IAXXX_SRB_ADC_PORT_PWR_EN_ADDR (PLAT_SRB_BASE_ADDR + 0x00000160)
#define IAXXX_SRB_ADC_PORT_PWR_EN_MASK_VAL 0x0000000f
#define IAXXX_SRB_ADC_PORT_PWR_EN_RMASK_VAL 0x0000000f
#define IAXXX_SRB_ADC_PORT_PWR_EN_WMASK_VAL 0x0000000f
#define IAXXX_SRB_ADC_PORT_PWR_EN_RESET_VAL 0x00000000

/*
 * Enable/Disable ADC ports 0-3
 * 0 - Disable
 * 1 - Enable
 */
#define IAXXX_SRB_ADC_PORT_PWR_EN_REG_MASK 0x0000000f
#define IAXXX_SRB_ADC_PORT_PWR_EN_REG_RESET_VAL 0x0
#define IAXXX_SRB_ADC_PORT_PWR_EN_REG_POS 0
#define IAXXX_SRB_ADC_PORT_PWR_EN_REG_SIZE 4

/*** SRB_DAC_PORT_PWR_EN (PLAT_SRB_BASE_ADDR + 0x00000164) ***/
/*
 * Turn ON/OFF clocks for dac ports
 */
#define IAXXX_SRB_DAC_PORT_PWR_EN_ADDR (PLAT_SRB_BASE_ADDR + 0x00000164)
#define IAXXX_SRB_DAC_PORT_PWR_EN_MASK_VAL 0x00000003
#define IAXXX_SRB_DAC_PORT_PWR_EN_RMASK_VAL 0x00000003
#define IAXXX_SRB_DAC_PORT_PWR_EN_WMASK_VAL 0x00000003
#define IAXXX_SRB_DAC_PORT_PWR_EN_RESET_VAL 0x00000000

/*
 * Enable/Disable DAC ports 0-1
 * 0 - Disable
 * 1 - Enable
 */
#define IAXXX_SRB_DAC_PORT_PWR_EN_REG_MASK 0x00000003
#define IAXXX_SRB_DAC_PORT_PWR_EN_REG_RESET_VAL 0x0
#define IAXXX_SRB_DAC_PORT_PWR_EN_REG_POS 0
#define IAXXX_SRB_DAC_PORT_PWR_EN_REG_SIZE 2

/*** SRB_I2S_PORT_PWR_EN (PLAT_SRB_BASE_ADDR + 0x00000168) ***/
/*
 * Turn ON/OFF clocks for I2S master clock ports
 */
#define IAXXX_SRB_I2S_PORT_PWR_EN_ADDR (PLAT_SRB_BASE_ADDR + 0x00000168)
#define IAXXX_SRB_I2S_PORT_PWR_EN_MASK_VAL 0x0000007f
#define IAXXX_SRB_I2S_PORT_PWR_EN_RMASK_VAL 0x0000007f
#define IAXXX_SRB_I2S_PORT_PWR_EN_WMASK_VAL 0x0000007f
#define IAXXX_SRB_I2S_PORT_PWR_EN_RESET_VAL 0x00000000

/*
 * Enable/Disable I2S master clock ports 0-6
 * 0 - Disable
 * 1 - Enable
 */
#define IAXXX_SRB_I2S_PORT_PWR_EN_REG_MASK 0x0000007f
#define IAXXX_SRB_I2S_PORT_PWR_EN_REG_RESET_VAL 0x0
#define IAXXX_SRB_I2S_PORT_PWR_EN_REG_POS 0
#define IAXXX_SRB_I2S_PORT_PWR_EN_REG_SIZE 7

/*** SRB_ARB_0_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000016c) ***/
/*
 * Base Address of ARB 0.
 */
#define IAXXX_SRB_ARB_0_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000016c)
#define IAXXX_SRB_ARB_0_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_0_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_0_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_0_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_0_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_0_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_0_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_0_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_0_INFO (PLAT_SRB_BASE_ADDR + 0x00000170) ***/
/*
 * Size and count of ARB 0 header and group.
 */
#define IAXXX_SRB_ARB_0_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000170)
#define IAXXX_SRB_ARB_0_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_0_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_0_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_0_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_0_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_0_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_0_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_0_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_0_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_0_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_0_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_0_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_0_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_0_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_0_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_0_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_0_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_0_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_0_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_0_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_1_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000174) ***/
/*
 * Base Address of ARB 1.
 */
#define IAXXX_SRB_ARB_1_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000174)
#define IAXXX_SRB_ARB_1_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_1_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_1_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_1_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_1_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_1_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_1_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_1_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_1_INFO (PLAT_SRB_BASE_ADDR + 0x00000178) ***/
/*
 * Size and count of ARB 1 header and group.
 */
#define IAXXX_SRB_ARB_1_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000178)
#define IAXXX_SRB_ARB_1_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_1_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_1_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_1_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_1_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_1_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_1_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_1_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_1_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_1_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_1_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_1_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_1_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_1_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_1_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_1_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_1_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_1_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_1_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_1_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_2_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000017c) ***/
/*
 * Base Address of ARB 2.
 */
#define IAXXX_SRB_ARB_2_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000017c)
#define IAXXX_SRB_ARB_2_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_2_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_2_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_2_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_2_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_2_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_2_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_2_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_2_INFO (PLAT_SRB_BASE_ADDR + 0x00000180) ***/
/*
 * Size and count of ARB 2 header and group.
 */
#define IAXXX_SRB_ARB_2_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000180)
#define IAXXX_SRB_ARB_2_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_2_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_2_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_2_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_2_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_2_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_2_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_2_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_2_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_2_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_2_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_2_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_2_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_2_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_2_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_2_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_2_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_2_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_2_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_2_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_3_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000184) ***/
/*
 * Base Address of ARB 3.
 */
#define IAXXX_SRB_ARB_3_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000184)
#define IAXXX_SRB_ARB_3_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_3_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_3_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_3_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_3_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_3_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_3_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_3_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_3_INFO (PLAT_SRB_BASE_ADDR + 0x00000188) ***/
/*
 * Size and count of ARB 3 header and group.
 */
#define IAXXX_SRB_ARB_3_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000188)
#define IAXXX_SRB_ARB_3_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_3_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_3_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_3_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_3_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_3_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_3_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_3_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_3_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_3_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_3_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_3_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_3_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_3_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_3_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_3_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_3_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_3_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_3_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_3_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_4_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000018c) ***/
/*
 * Base Address of ARB 4.
 */
#define IAXXX_SRB_ARB_4_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000018c)
#define IAXXX_SRB_ARB_4_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_4_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_4_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_4_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_4_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_4_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_4_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_4_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_4_INFO (PLAT_SRB_BASE_ADDR + 0x00000190) ***/
/*
 * Size and count of ARB 4 header and group.
 */
#define IAXXX_SRB_ARB_4_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000190)
#define IAXXX_SRB_ARB_4_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_4_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_4_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_4_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_4_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_4_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_4_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_4_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_4_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_4_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_4_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_4_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_4_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_4_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_4_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_4_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_4_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_4_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_4_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_4_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_5_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000194) ***/
/*
 * Base Address of ARB 5.
 */
#define IAXXX_SRB_ARB_5_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000194)
#define IAXXX_SRB_ARB_5_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_5_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_5_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_5_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_5_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_5_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_5_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_5_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_5_INFO (PLAT_SRB_BASE_ADDR + 0x00000198) ***/
/*
 * Size and count of ARB 5 header and group.
 */
#define IAXXX_SRB_ARB_5_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000198)
#define IAXXX_SRB_ARB_5_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_5_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_5_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_5_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_5_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_5_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_5_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_5_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_5_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_5_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_5_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_5_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_5_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_5_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_5_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_5_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_5_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_5_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_5_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_5_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_6_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000019c) ***/
/*
 * Base Address of ARB 6.
 */
#define IAXXX_SRB_ARB_6_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000019c)
#define IAXXX_SRB_ARB_6_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_6_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_6_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_6_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_6_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_6_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_6_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_6_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_6_INFO (PLAT_SRB_BASE_ADDR + 0x000001a0) ***/
/*
 * Size and count of ARB 6 header and group.
 */
#define IAXXX_SRB_ARB_6_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001a0)
#define IAXXX_SRB_ARB_6_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_6_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_6_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_6_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_6_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_6_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_6_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_6_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_6_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_6_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_6_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_6_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_6_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_6_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_6_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_6_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_6_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_6_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_6_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_6_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_7_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001a4) ***/
/*
 * Base Address of ARB 7.
 */
#define IAXXX_SRB_ARB_7_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001a4)
#define IAXXX_SRB_ARB_7_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_7_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_7_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_7_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_7_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_7_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_7_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_7_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_7_INFO (PLAT_SRB_BASE_ADDR + 0x000001a8) ***/
/*
 * Size and count of ARB 7 header and group.
 */
#define IAXXX_SRB_ARB_7_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001a8)
#define IAXXX_SRB_ARB_7_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_7_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_7_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_7_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_7_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_7_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_7_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_7_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_7_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_7_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_7_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_7_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_7_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_7_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_7_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_7_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_7_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_7_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_7_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_7_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_8_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001ac) ***/
/*
 * Base Address of ARB 8.
 */
#define IAXXX_SRB_ARB_8_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001ac)
#define IAXXX_SRB_ARB_8_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_8_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_8_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_8_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_8_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_8_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_8_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_8_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_8_INFO (PLAT_SRB_BASE_ADDR + 0x000001b0) ***/
/*
 * Size and count of ARB 8 header and group.
 */
#define IAXXX_SRB_ARB_8_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001b0)
#define IAXXX_SRB_ARB_8_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_8_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_8_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_8_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_8_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_8_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_8_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_8_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_8_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_8_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_8_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_8_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_8_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_8_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_8_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_8_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_8_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_8_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_8_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_8_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_9_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001b4) ***/
/*
 * Base Address of ARB 9.
 */
#define IAXXX_SRB_ARB_9_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001b4)
#define IAXXX_SRB_ARB_9_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_9_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_9_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_9_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_9_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_9_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_9_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_9_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_9_INFO (PLAT_SRB_BASE_ADDR + 0x000001b8) ***/
/*
 * Size and count of ARB 9 header and group.
 */
#define IAXXX_SRB_ARB_9_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001b8)
#define IAXXX_SRB_ARB_9_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_9_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_9_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_9_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_9_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_9_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_9_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_9_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_9_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_9_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_9_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_9_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_9_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_9_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_9_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_9_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_9_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_9_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_9_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_9_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_10_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001bc) ***/
/*
 * Base Address of ARB 10.
 */
#define IAXXX_SRB_ARB_10_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001bc)
#define IAXXX_SRB_ARB_10_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_10_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_10_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_10_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_10_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_10_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_10_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_10_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_10_INFO (PLAT_SRB_BASE_ADDR + 0x000001c0) ***/
/*
 * Size and count of ARB 10 header and group.
 */
#define IAXXX_SRB_ARB_10_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001c0)
#define IAXXX_SRB_ARB_10_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_10_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_10_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_10_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_10_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_10_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_10_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_10_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_10_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_10_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_10_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_10_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_10_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_10_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_10_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_10_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_10_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_10_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_10_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_10_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_11_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001c4) ***/
/*
 * Base Address of ARB 11.
 */
#define IAXXX_SRB_ARB_11_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001c4)
#define IAXXX_SRB_ARB_11_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_11_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_11_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_11_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_11_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_11_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_11_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_11_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_11_INFO (PLAT_SRB_BASE_ADDR + 0x000001c8) ***/
/*
 * Size and count of ARB 11 header and group.
 */
#define IAXXX_SRB_ARB_11_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001c8)
#define IAXXX_SRB_ARB_11_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_11_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_11_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_11_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_11_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_11_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_11_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_11_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_11_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_11_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_11_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_11_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_11_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_11_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_11_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_11_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_11_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_11_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_11_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_11_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_12_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001cc) ***/
/*
 * Base Address of ARB 12.
 */
#define IAXXX_SRB_ARB_12_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001cc)
#define IAXXX_SRB_ARB_12_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_12_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_12_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_12_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_12_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_12_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_12_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_12_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_12_INFO (PLAT_SRB_BASE_ADDR + 0x000001d0) ***/
/*
 * Size and count of ARB 12 header and group.
 */
#define IAXXX_SRB_ARB_12_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001d0)
#define IAXXX_SRB_ARB_12_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_12_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_12_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_12_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_12_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_12_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_12_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_12_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_12_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_12_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_12_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_12_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_12_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_12_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_12_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_12_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_12_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_12_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_12_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_12_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_13_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001d4) ***/
/*
 * Base Address of ARB 13.
 */
#define IAXXX_SRB_ARB_13_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001d4)
#define IAXXX_SRB_ARB_13_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_13_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_13_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_13_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_13_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_13_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_13_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_13_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_13_INFO (PLAT_SRB_BASE_ADDR + 0x000001d8) ***/
/*
 * Size and count of ARB 13 header and group.
 */
#define IAXXX_SRB_ARB_13_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001d8)
#define IAXXX_SRB_ARB_13_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_13_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_13_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_13_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_13_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_13_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_13_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_13_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_13_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_13_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_13_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_13_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_13_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_13_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_13_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_13_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_13_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_13_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_13_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_13_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_14_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001dc) ***/
/*
 * Base Address of ARB 14.
 */
#define IAXXX_SRB_ARB_14_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001dc)
#define IAXXX_SRB_ARB_14_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_14_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_14_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_14_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_14_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_14_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_14_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_14_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_14_INFO (PLAT_SRB_BASE_ADDR + 0x000001e0) ***/
/*
 * Size and count of ARB 14 header and group.
 */
#define IAXXX_SRB_ARB_14_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001e0)
#define IAXXX_SRB_ARB_14_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_14_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_14_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_14_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_14_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_14_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_14_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_14_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_14_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_14_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_14_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_14_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_14_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_14_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_14_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_14_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_14_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_14_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_14_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_14_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_15_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001e4) ***/
/*
 * Base Address of ARB 15.
 */
#define IAXXX_SRB_ARB_15_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001e4)
#define IAXXX_SRB_ARB_15_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_15_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_15_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_15_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_15_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_15_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_15_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_15_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_15_INFO (PLAT_SRB_BASE_ADDR + 0x000001e8) ***/
/*
 * Size and count of ARB 15 header and group.
 */
#define IAXXX_SRB_ARB_15_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001e8)
#define IAXXX_SRB_ARB_15_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_15_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_15_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_15_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_15_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_15_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_15_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_15_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_15_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_15_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_15_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_15_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_15_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_15_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_15_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_15_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_15_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_15_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_15_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_15_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_16_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001ec) ***/
/*
 * Base Address of ARB 16.
 */
#define IAXXX_SRB_ARB_16_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001ec)
#define IAXXX_SRB_ARB_16_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_16_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_16_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_16_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_16_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_16_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_16_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_16_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_16_INFO (PLAT_SRB_BASE_ADDR + 0x000001f0) ***/
/*
 * Size and count of ARB 16 header and group.
 */
#define IAXXX_SRB_ARB_16_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001f0)
#define IAXXX_SRB_ARB_16_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_16_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_16_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_16_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_16_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_16_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_16_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_16_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_16_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_16_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_16_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_16_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_16_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_16_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_16_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_16_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_16_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_16_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_16_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_16_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_17_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001f4) ***/
/*
 * Base Address of ARB 17.
 */
#define IAXXX_SRB_ARB_17_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001f4)
#define IAXXX_SRB_ARB_17_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_17_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_17_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_17_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_17_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_17_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_17_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_17_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_17_INFO (PLAT_SRB_BASE_ADDR + 0x000001f8) ***/
/*
 * Size and count of ARB 17 header and group.
 */
#define IAXXX_SRB_ARB_17_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x000001f8)
#define IAXXX_SRB_ARB_17_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_17_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_17_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_17_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_17_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_17_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_17_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_17_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_17_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_17_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_17_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_17_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_17_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_17_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_17_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_17_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_17_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_17_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_17_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_17_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_18_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x000001fc) ***/
/*
 * Base Address of ARB 18.
 */
#define IAXXX_SRB_ARB_18_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x000001fc)
#define IAXXX_SRB_ARB_18_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_18_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_18_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_18_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_18_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_18_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_18_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_18_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_18_INFO (PLAT_SRB_BASE_ADDR + 0x00000200) ***/
/*
 * Size and count of ARB 18 header and group.
 */
#define IAXXX_SRB_ARB_18_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000200)
#define IAXXX_SRB_ARB_18_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_18_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_18_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_18_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_18_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_18_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_18_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_18_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_18_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_18_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_18_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_18_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_18_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_18_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_18_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_18_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_18_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_18_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_18_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_18_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_19_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000204) ***/
/*
 * Base Address of ARB 19.
 */
#define IAXXX_SRB_ARB_19_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000204)
#define IAXXX_SRB_ARB_19_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_19_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_19_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_19_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_19_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_19_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_19_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_19_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_19_INFO (PLAT_SRB_BASE_ADDR + 0x00000208) ***/
/*
 * Size and count of ARB 19 header and group.
 */
#define IAXXX_SRB_ARB_19_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000208)
#define IAXXX_SRB_ARB_19_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_19_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_19_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_19_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_19_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_19_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_19_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_19_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_19_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_19_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_19_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_19_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_19_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_19_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_19_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_19_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_19_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_19_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_19_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_19_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_20_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000020c) ***/
/*
 * Base Address of ARB 20.
 */
#define IAXXX_SRB_ARB_20_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000020c)
#define IAXXX_SRB_ARB_20_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_20_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_20_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_20_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_20_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_20_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_20_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_20_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_20_INFO (PLAT_SRB_BASE_ADDR + 0x00000210) ***/
/*
 * Size and count of ARB 20 header and group.
 */
#define IAXXX_SRB_ARB_20_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000210)
#define IAXXX_SRB_ARB_20_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_20_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_20_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_20_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_20_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_20_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_20_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_20_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_20_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_20_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_20_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_20_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_20_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_20_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_20_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_20_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_20_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_20_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_20_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_20_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_21_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000214) ***/
/*
 * Base Address of ARB 21.
 */
#define IAXXX_SRB_ARB_21_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000214)
#define IAXXX_SRB_ARB_21_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_21_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_21_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_21_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_21_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_21_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_21_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_21_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_21_INFO (PLAT_SRB_BASE_ADDR + 0x00000218) ***/
/*
 * Size and count of ARB 21 header and group.
 */
#define IAXXX_SRB_ARB_21_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000218)
#define IAXXX_SRB_ARB_21_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_21_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_21_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_21_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_21_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_21_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_21_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_21_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_21_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_21_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_21_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_21_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_21_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_21_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_21_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_21_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_21_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_21_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_21_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_21_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_22_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000021c) ***/
/*
 * Base Address of ARB 22.
 */
#define IAXXX_SRB_ARB_22_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000021c)
#define IAXXX_SRB_ARB_22_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_22_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_22_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_22_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_22_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_22_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_22_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_22_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_22_INFO (PLAT_SRB_BASE_ADDR + 0x00000220) ***/
/*
 * Size and count of ARB 22 header and group.
 */
#define IAXXX_SRB_ARB_22_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000220)
#define IAXXX_SRB_ARB_22_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_22_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_22_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_22_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_22_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_22_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_22_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_22_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_22_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_22_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_22_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_22_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_22_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_22_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_22_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_22_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_22_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_22_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_22_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_22_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_23_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000224) ***/
/*
 * Base Address of ARB 23.
 */
#define IAXXX_SRB_ARB_23_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000224)
#define IAXXX_SRB_ARB_23_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_23_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_23_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_23_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_23_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_23_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_23_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_23_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_23_INFO (PLAT_SRB_BASE_ADDR + 0x00000228) ***/
/*
 * Size and count of ARB 23 header and group.
 */
#define IAXXX_SRB_ARB_23_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000228)
#define IAXXX_SRB_ARB_23_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_23_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_23_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_23_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_23_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_23_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_23_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_23_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_23_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_23_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_23_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_23_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_23_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_23_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_23_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_23_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_23_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_23_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_23_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_23_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_24_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000022c) ***/
/*
 * Base Address of ARB 24.
 */
#define IAXXX_SRB_ARB_24_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000022c)
#define IAXXX_SRB_ARB_24_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_24_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_24_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_24_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_24_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_24_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_24_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_24_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_24_INFO (PLAT_SRB_BASE_ADDR + 0x00000230) ***/
/*
 * Size and count of ARB 24 header and group.
 */
#define IAXXX_SRB_ARB_24_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000230)
#define IAXXX_SRB_ARB_24_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_24_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_24_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_24_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_24_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_24_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_24_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_24_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_24_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_24_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_24_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_24_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_24_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_24_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_24_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_24_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_24_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_24_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_24_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_24_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_25_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000234) ***/
/*
 * Base Address of ARB 25.
 */
#define IAXXX_SRB_ARB_25_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000234)
#define IAXXX_SRB_ARB_25_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_25_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_25_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_25_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_25_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_25_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_25_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_25_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_25_INFO (PLAT_SRB_BASE_ADDR + 0x00000238) ***/
/*
 * Size and count of ARB 25 header and group.
 */
#define IAXXX_SRB_ARB_25_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000238)
#define IAXXX_SRB_ARB_25_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_25_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_25_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_25_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_25_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_25_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_25_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_25_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_25_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_25_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_25_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_25_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_25_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_25_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_25_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_25_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_25_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_25_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_25_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_25_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_26_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000023c) ***/
/*
 * Base Address of ARB 26.
 */
#define IAXXX_SRB_ARB_26_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000023c)
#define IAXXX_SRB_ARB_26_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_26_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_26_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_26_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_26_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_26_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_26_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_26_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_26_INFO (PLAT_SRB_BASE_ADDR + 0x00000240) ***/
/*
 * Size and count of ARB 26 header and group.
 */
#define IAXXX_SRB_ARB_26_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000240)
#define IAXXX_SRB_ARB_26_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_26_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_26_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_26_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_26_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_26_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_26_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_26_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_26_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_26_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_26_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_26_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_26_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_26_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_26_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_26_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_26_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_26_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_26_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_26_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_27_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000244) ***/
/*
 * Base Address of ARB 27.
 */
#define IAXXX_SRB_ARB_27_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000244)
#define IAXXX_SRB_ARB_27_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_27_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_27_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_27_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_27_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_27_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_27_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_27_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_27_INFO (PLAT_SRB_BASE_ADDR + 0x00000248) ***/
/*
 * Size and count of ARB 27 header and group.
 */
#define IAXXX_SRB_ARB_27_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000248)
#define IAXXX_SRB_ARB_27_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_27_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_27_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_27_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_27_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_27_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_27_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_27_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_27_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_27_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_27_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_27_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_27_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_27_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_27_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_27_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_27_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_27_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_27_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_27_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_28_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000024c) ***/
/*
 * Base Address of ARB 28.
 */
#define IAXXX_SRB_ARB_28_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000024c)
#define IAXXX_SRB_ARB_28_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_28_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_28_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_28_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_28_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_28_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_28_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_28_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_28_INFO (PLAT_SRB_BASE_ADDR + 0x00000250) ***/
/*
 * Size and count of ARB 28 header and group.
 */
#define IAXXX_SRB_ARB_28_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000250)
#define IAXXX_SRB_ARB_28_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_28_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_28_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_28_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_28_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_28_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_28_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_28_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_28_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_28_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_28_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_28_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_28_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_28_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_28_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_28_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_28_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_28_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_28_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_28_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_29_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000254) ***/
/*
 */
#define IAXXX_SRB_ARB_29_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000254)
#define IAXXX_SRB_ARB_29_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_29_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_29_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_29_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_29_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_29_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_29_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_29_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_29_INFO (PLAT_SRB_BASE_ADDR + 0x00000258) ***/
/*
 * Size and count of ARB 29 header and group.
 */
#define IAXXX_SRB_ARB_29_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000258)
#define IAXXX_SRB_ARB_29_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_29_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_29_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_29_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_29_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_29_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_29_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_29_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_29_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_29_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_29_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_29_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_29_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_29_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_29_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_29_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_29_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_29_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_29_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_29_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_30_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x0000025c) ***/
/*
 * Base Address of ARB 31.
 */
#define IAXXX_SRB_ARB_30_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x0000025c)
#define IAXXX_SRB_ARB_30_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_30_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_30_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_30_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_30_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_30_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_30_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_30_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_30_INFO (PLAT_SRB_BASE_ADDR + 0x00000260) ***/
/*
 * Size and count of ARB 30 header and group.
 */
#define IAXXX_SRB_ARB_30_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000260)
#define IAXXX_SRB_ARB_30_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_30_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_30_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_30_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_30_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_30_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_30_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_30_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_30_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_30_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_30_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_30_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_30_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_30_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_30_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_30_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_30_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_30_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_30_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_30_INFO_NUM_HDR_SIZE 2

/*** SRB_ARB_31_BASE_ADDR (PLAT_SRB_BASE_ADDR + 0x00000264) ***/
/*
 * Base Address of ARB 31.
 */
#define IAXXX_SRB_ARB_31_BASE_ADDR_ADDR (PLAT_SRB_BASE_ADDR + 0x00000264)
#define IAXXX_SRB_ARB_31_BASE_ADDR_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_31_BASE_ADDR_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_31_BASE_ADDR_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_31_BASE_ADDR_RESET_VAL 0x00000000

/*
 * Physical base address of this Application Register Block.
 * Used for virtual to physical address translation.
 * Base addresses of unused blocks are set to 0x00000000.
 */
#define IAXXX_SRB_ARB_31_BASE_ADDR_REG_MASK 0xffffffff
#define IAXXX_SRB_ARB_31_BASE_ADDR_REG_RESET_VAL 0x0
#define IAXXX_SRB_ARB_31_BASE_ADDR_REG_POS 0
#define IAXXX_SRB_ARB_31_BASE_ADDR_REG_SIZE 32

/*** SRB_ARB_31_INFO (PLAT_SRB_BASE_ADDR + 0x00000268) ***/
/*
 * Size and count of ARB 31 header and group.
 */
#define IAXXX_SRB_ARB_31_INFO_ADDR (PLAT_SRB_BASE_ADDR + 0x00000268)
#define IAXXX_SRB_ARB_31_INFO_MASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_31_INFO_RMASK_VAL 0xffffffff
#define IAXXX_SRB_ARB_31_INFO_WMASK_VAL 0x00000000
#define IAXXX_SRB_ARB_31_INFO_RESET_VAL 0x00000000

/*
 * Size in bytes of this Application Register Block Group.
 * Size is set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_31_INFO_GRP_SIZE_MASK 0x00000fff
#define IAXXX_SRB_ARB_31_INFO_GRP_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_31_INFO_GRP_SIZE_POS 0
#define IAXXX_SRB_ARB_31_INFO_GRP_SIZE_SIZE 12

/*
 * Size in bytes of this Application Register Block Header.
 * Size is set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_31_INFO_HDR_SIZE_MASK 0x00fff000
#define IAXXX_SRB_ARB_31_INFO_HDR_SIZE_RESET_VAL 0x0
#define IAXXX_SRB_ARB_31_INFO_HDR_SIZE_POS 12
#define IAXXX_SRB_ARB_31_INFO_HDR_SIZE_SIZE 12

/*
 * Number of Application Register Block Groups.
 * Set to 0, if group is not defined.
 */
#define IAXXX_SRB_ARB_31_INFO_NUM_GRP_MASK 0x3f000000
#define IAXXX_SRB_ARB_31_INFO_NUM_GRP_RESET_VAL 0x0
#define IAXXX_SRB_ARB_31_INFO_NUM_GRP_POS 24
#define IAXXX_SRB_ARB_31_INFO_NUM_GRP_SIZE 6

/*
 * Number of Application Register Block Header.
 * Set to 0, if header is not defined.
 */
#define IAXXX_SRB_ARB_31_INFO_NUM_HDR_MASK 0xc0000000
#define IAXXX_SRB_ARB_31_INFO_NUM_HDR_RESET_VAL 0x0
#define IAXXX_SRB_ARB_31_INFO_NUM_HDR_POS 30
#define IAXXX_SRB_ARB_31_INFO_NUM_HDR_SIZE 2

/* Number of registers in the module */
#define IAXXX_SRB_REG_NUM 155

#endif /* __IAXXX_REGISTER_DEFS_SRB_H__ */
