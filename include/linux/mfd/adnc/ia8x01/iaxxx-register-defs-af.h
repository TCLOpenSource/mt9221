/*
 * iaxxx-register-defs-af.h
 *
 * Copyright (c) 2018 Knowles, inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/**********************************************************
 * This file is generated by running a format script
 * on header files shared by Firmware.
 *
 * DO NOT EDIT.
 *
 *********************************************************/

#ifndef __IAXXX_REGISTER_DEFS_AF_H__
#define __IAXXX_REGISTER_DEFS_AF_H__

/*** The base address for this set of registers ***/
#define IAXXX_AF_REGS_ADDR (0x44000000)

/*** AF_LS_ENAB (0x44000000) ***/
/*
 * Master Enable Bits for Logical Streams.  When enabled, the logical stream
 * can request service via deadline scheduling, and can pass audio samples.
 */
#define IAXXX_AF_LS_ENAB_ADDR (0x44000000)
#define IAXXX_AF_LS_ENAB_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_ENAB_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_ENAB_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_ENAB_RESET_VAL 0x00000000

/*
 * Master Enable for Logical Stream 0.
 */
#define IAXXX_AF_LS_ENAB_E_0_MASK 0x00000001
#define IAXXX_AF_LS_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_0_POS 0
#define IAXXX_AF_LS_ENAB_E_0_SIZE 1
#define IAXXX_AF_LS_ENAB_E_0_DECL 0

/*
 * Master Enable for Logical Stream 1.
 */
#define IAXXX_AF_LS_ENAB_E_1_MASK 0x00000002
#define IAXXX_AF_LS_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_1_POS 1
#define IAXXX_AF_LS_ENAB_E_1_SIZE 1
#define IAXXX_AF_LS_ENAB_E_1_DECL 1

/*
 * Master Enable for Logical Stream 2.
 */
#define IAXXX_AF_LS_ENAB_E_2_MASK 0x00000004
#define IAXXX_AF_LS_ENAB_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_2_POS 2
#define IAXXX_AF_LS_ENAB_E_2_SIZE 1
#define IAXXX_AF_LS_ENAB_E_2_DECL 2

/*
 * Master Enable for Logical Stream 3.
 */
#define IAXXX_AF_LS_ENAB_E_3_MASK 0x00000008
#define IAXXX_AF_LS_ENAB_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_3_POS 3
#define IAXXX_AF_LS_ENAB_E_3_SIZE 1
#define IAXXX_AF_LS_ENAB_E_3_DECL 3

/*
 * Master Enable for Logical Stream 4.
 */
#define IAXXX_AF_LS_ENAB_E_4_MASK 0x00000010
#define IAXXX_AF_LS_ENAB_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_4_POS 4
#define IAXXX_AF_LS_ENAB_E_4_SIZE 1
#define IAXXX_AF_LS_ENAB_E_4_DECL 4

/*
 * Master Enable for Logical Stream 5.
 */
#define IAXXX_AF_LS_ENAB_E_5_MASK 0x00000020
#define IAXXX_AF_LS_ENAB_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_5_POS 5
#define IAXXX_AF_LS_ENAB_E_5_SIZE 1
#define IAXXX_AF_LS_ENAB_E_5_DECL 5

/*
 * Master Enable for Logical Stream 6.
 */
#define IAXXX_AF_LS_ENAB_E_6_MASK 0x00000040
#define IAXXX_AF_LS_ENAB_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_6_POS 6
#define IAXXX_AF_LS_ENAB_E_6_SIZE 1
#define IAXXX_AF_LS_ENAB_E_6_DECL 6

/*
 * Master Enable for Logical Stream 7.
 */
#define IAXXX_AF_LS_ENAB_E_7_MASK 0x00000080
#define IAXXX_AF_LS_ENAB_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_7_POS 7
#define IAXXX_AF_LS_ENAB_E_7_SIZE 1
#define IAXXX_AF_LS_ENAB_E_7_DECL 7

/*
 * Master Enable for Logical Stream 8.
 */
#define IAXXX_AF_LS_ENAB_E_8_MASK 0x00000100
#define IAXXX_AF_LS_ENAB_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_8_POS 8
#define IAXXX_AF_LS_ENAB_E_8_SIZE 1
#define IAXXX_AF_LS_ENAB_E_8_DECL 8

/*
 * Master Enable for Logical Stream 9.
 */
#define IAXXX_AF_LS_ENAB_E_9_MASK 0x00000200
#define IAXXX_AF_LS_ENAB_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_9_POS 9
#define IAXXX_AF_LS_ENAB_E_9_SIZE 1
#define IAXXX_AF_LS_ENAB_E_9_DECL 9

/*
 * Master Enable for Logical Stream 10.
 */
#define IAXXX_AF_LS_ENAB_E_10_MASK 0x00000400
#define IAXXX_AF_LS_ENAB_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_10_POS 10
#define IAXXX_AF_LS_ENAB_E_10_SIZE 1
#define IAXXX_AF_LS_ENAB_E_10_DECL 10

/*
 * Master Enable for Logical Stream 11.
 */
#define IAXXX_AF_LS_ENAB_E_11_MASK 0x00000800
#define IAXXX_AF_LS_ENAB_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_11_POS 11
#define IAXXX_AF_LS_ENAB_E_11_SIZE 1
#define IAXXX_AF_LS_ENAB_E_11_DECL 11

/*** AF_LS_DMA (0x44000004) ***/
/*
 * DMA Enable Bits for Logical Streams.  When enabled, the logical stream can
 * request service via DMA hardware interface.  Otherwise, it'll do so via
 * deadline scheduler.
 */
#define IAXXX_AF_LS_DMA_ADDR (0x44000004)
#define IAXXX_AF_LS_DMA_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_DMA_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_DMA_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_DMA_RESET_VAL 0x00000000

/*
 * DMA Enable for Logical Stream 0.
 */
#define IAXXX_AF_LS_DMA_E_0_MASK 0x00000001
#define IAXXX_AF_LS_DMA_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_0_POS 0
#define IAXXX_AF_LS_DMA_E_0_SIZE 1
#define IAXXX_AF_LS_DMA_E_0_DECL 0

/*
 * DMA Enable for Logical Stream 1.
 */
#define IAXXX_AF_LS_DMA_E_1_MASK 0x00000002
#define IAXXX_AF_LS_DMA_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_1_POS 1
#define IAXXX_AF_LS_DMA_E_1_SIZE 1
#define IAXXX_AF_LS_DMA_E_1_DECL 1

/*
 * DMA Enable for Logical Stream 2.
 */
#define IAXXX_AF_LS_DMA_E_2_MASK 0x00000004
#define IAXXX_AF_LS_DMA_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_2_POS 2
#define IAXXX_AF_LS_DMA_E_2_SIZE 1
#define IAXXX_AF_LS_DMA_E_2_DECL 2

/*
 * DMA Enable for Logical Stream 3.
 */
#define IAXXX_AF_LS_DMA_E_3_MASK 0x00000008
#define IAXXX_AF_LS_DMA_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_3_POS 3
#define IAXXX_AF_LS_DMA_E_3_SIZE 1
#define IAXXX_AF_LS_DMA_E_3_DECL 3

/*
 * DMA Enable for Logical Stream 4.
 */
#define IAXXX_AF_LS_DMA_E_4_MASK 0x00000010
#define IAXXX_AF_LS_DMA_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_4_POS 4
#define IAXXX_AF_LS_DMA_E_4_SIZE 1
#define IAXXX_AF_LS_DMA_E_4_DECL 4

/*
 * DMA Enable for Logical Stream 5.
 */
#define IAXXX_AF_LS_DMA_E_5_MASK 0x00000020
#define IAXXX_AF_LS_DMA_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_5_POS 5
#define IAXXX_AF_LS_DMA_E_5_SIZE 1
#define IAXXX_AF_LS_DMA_E_5_DECL 5

/*
 * DMA Enable for Logical Stream 6.
 */
#define IAXXX_AF_LS_DMA_E_6_MASK 0x00000040
#define IAXXX_AF_LS_DMA_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_6_POS 6
#define IAXXX_AF_LS_DMA_E_6_SIZE 1
#define IAXXX_AF_LS_DMA_E_6_DECL 6

/*
 * DMA Enable for Logical Stream 7.
 */
#define IAXXX_AF_LS_DMA_E_7_MASK 0x00000080
#define IAXXX_AF_LS_DMA_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_7_POS 7
#define IAXXX_AF_LS_DMA_E_7_SIZE 1
#define IAXXX_AF_LS_DMA_E_7_DECL 7

/*
 * DMA Enable for Logical Stream 8.
 */
#define IAXXX_AF_LS_DMA_E_8_MASK 0x00000100
#define IAXXX_AF_LS_DMA_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_8_POS 8
#define IAXXX_AF_LS_DMA_E_8_SIZE 1
#define IAXXX_AF_LS_DMA_E_8_DECL 8

/*
 * DMA Enable for Logical Stream 9.
 */
#define IAXXX_AF_LS_DMA_E_9_MASK 0x00000200
#define IAXXX_AF_LS_DMA_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_9_POS 9
#define IAXXX_AF_LS_DMA_E_9_SIZE 1
#define IAXXX_AF_LS_DMA_E_9_DECL 9

/*
 * DMA Enable for Logical Stream 10.
 */
#define IAXXX_AF_LS_DMA_E_10_MASK 0x00000400
#define IAXXX_AF_LS_DMA_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_10_POS 10
#define IAXXX_AF_LS_DMA_E_10_SIZE 1
#define IAXXX_AF_LS_DMA_E_10_DECL 10

/*
 * DMA Enable for Logical Stream 11.
 */
#define IAXXX_AF_LS_DMA_E_11_MASK 0x00000800
#define IAXXX_AF_LS_DMA_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_11_POS 11
#define IAXXX_AF_LS_DMA_E_11_SIZE 1
#define IAXXX_AF_LS_DMA_E_11_DECL 11

/*
 * DMA Mode for Logical Stream 0.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_0_MASK 0x00010000
#define IAXXX_AF_LS_DMA_M_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_0_POS 16
#define IAXXX_AF_LS_DMA_M_0_SIZE 1
#define IAXXX_AF_LS_DMA_M_0_DECL 16

/*
 * DMA Mode for Logical Stream 1.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_1_MASK 0x00020000
#define IAXXX_AF_LS_DMA_M_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_1_POS 17
#define IAXXX_AF_LS_DMA_M_1_SIZE 1
#define IAXXX_AF_LS_DMA_M_1_DECL 17

/*
 * DMA Mode for Logical Stream 2.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_2_MASK 0x00040000
#define IAXXX_AF_LS_DMA_M_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_2_POS 18
#define IAXXX_AF_LS_DMA_M_2_SIZE 1
#define IAXXX_AF_LS_DMA_M_2_DECL 18

/*
 * DMA Mode for Logical Stream 3.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_3_MASK 0x00080000
#define IAXXX_AF_LS_DMA_M_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_3_POS 19
#define IAXXX_AF_LS_DMA_M_3_SIZE 1
#define IAXXX_AF_LS_DMA_M_3_DECL 19

/*
 * DMA Mode for Logical Stream 4.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_4_MASK 0x00100000
#define IAXXX_AF_LS_DMA_M_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_4_POS 20
#define IAXXX_AF_LS_DMA_M_4_SIZE 1
#define IAXXX_AF_LS_DMA_M_4_DECL 20

/*
 * DMA Mode for Logical Stream 5.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_5_MASK 0x00200000
#define IAXXX_AF_LS_DMA_M_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_5_POS 21
#define IAXXX_AF_LS_DMA_M_5_SIZE 1
#define IAXXX_AF_LS_DMA_M_5_DECL 21

/*
 * DMA Mode for Logical Stream 6.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_6_MASK 0x00400000
#define IAXXX_AF_LS_DMA_M_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_6_POS 22
#define IAXXX_AF_LS_DMA_M_6_SIZE 1
#define IAXXX_AF_LS_DMA_M_6_DECL 22

/*
 * DMA Mode for Logical Stream 7.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_7_MASK 0x00800000
#define IAXXX_AF_LS_DMA_M_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_7_POS 23
#define IAXXX_AF_LS_DMA_M_7_SIZE 1
#define IAXXX_AF_LS_DMA_M_7_DECL 23

/*
 * DMA Mode for Logical Stream 8.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_8_MASK 0x01000000
#define IAXXX_AF_LS_DMA_M_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_8_POS 24
#define IAXXX_AF_LS_DMA_M_8_SIZE 1
#define IAXXX_AF_LS_DMA_M_8_DECL 24

/*
 * DMA Mode for Logical Stream 9.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_9_MASK 0x02000000
#define IAXXX_AF_LS_DMA_M_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_9_POS 25
#define IAXXX_AF_LS_DMA_M_9_SIZE 1
#define IAXXX_AF_LS_DMA_M_9_DECL 25

/*
 * DMA Mode for Logical Stream 10.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_10_MASK 0x04000000
#define IAXXX_AF_LS_DMA_M_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_10_POS 26
#define IAXXX_AF_LS_DMA_M_10_SIZE 1
#define IAXXX_AF_LS_DMA_M_10_DECL 26

/*
 * DMA Mode for Logical Stream 11.  Default mode of 0 allows current dma
 * operation with address handling done by the dma controller.  If set to 1,
 * dma controller only needs to access the base logical stream address, and
 * the af counts multi-channel data and internally handles the addresses.
 * This new mode will still have the data written interleaved into buffers,
 * but it does make the AF look like the I2C and SPI dma channels.
 */
#define IAXXX_AF_LS_DMA_M_11_MASK 0x08000000
#define IAXXX_AF_LS_DMA_M_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_M_11_POS 27
#define IAXXX_AF_LS_DMA_M_11_SIZE 1
#define IAXXX_AF_LS_DMA_M_11_DECL 27

/*** AF_MISC_CTRL (0x44000008) ***/
/*
 * This register is used for Miscellaneous General Control.
 */
#define IAXXX_AF_MISC_CTRL_ADDR (0x44000008)
#define IAXXX_AF_MISC_CTRL_MASK_VAL 0x00003fff
#define IAXXX_AF_MISC_CTRL_RMASK_VAL 0x00003fff
#define IAXXX_AF_MISC_CTRL_WMASK_VAL 0x00003fff
#define IAXXX_AF_MISC_CTRL_RESET_VAL 0x00000548

/*
 * The deadline scheduler's deadline time counter normally increments at
 * 3.072 MHz.  This bit, when set, causes this counter to increment on every
 * Audio Fabric (AF) clock.  When the AF clock frequency is 3.072 MHz or
 * slower, this bit must be set for proper deadline scheduler function.
 */
#define IAXXX_AF_MISC_CTRL_CPT_ALWAYS_INC_MASK 0x00000001
#define IAXXX_AF_MISC_CTRL_CPT_ALWAYS_INC_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_CPT_ALWAYS_INC_POS 0
#define IAXXX_AF_MISC_CTRL_CPT_ALWAYS_INC_SIZE 1
#define IAXXX_AF_MISC_CTRL_CPT_ALWAYS_INC_DECL 0

/*
 * Priority of HMD XLMI accesses.  Lower value has higher priority.  Value of
 * 3 is illegal.  If multiple priorities are the same, HMD wins the ties.
 */
#define IAXXX_AF_MISC_CTRL_HMD_PRI_MASK 0x00000006
#define IAXXX_AF_MISC_CTRL_HMD_PRI_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_HMD_PRI_POS 1
#define IAXXX_AF_MISC_CTRL_HMD_PRI_SIZE 2
#define IAXXX_AF_MISC_CTRL_HMD_PRI_DECL (2:1)

/*
 * Priority of DMX XLMI accesses.  Lower value has higher priority.  Value of
 * 3 is illegal.  If multiple priorities are the same, HMD wins the ties,
 * then DMX.
 */
#define IAXXX_AF_MISC_CTRL_DMX_PRI_MASK 0x00000018
#define IAXXX_AF_MISC_CTRL_DMX_PRI_RESET_VAL 0x1
#define IAXXX_AF_MISC_CTRL_DMX_PRI_POS 3
#define IAXXX_AF_MISC_CTRL_DMX_PRI_SIZE 2
#define IAXXX_AF_MISC_CTRL_DMX_PRI_DECL (4:3)

/*
 * Priority of SYS XLMI accesses.  Lower value has higher priority.  Value of
 * 3 is illegal.  If multiple priorities are the same, HMD wins the ties,
 * then DMX, then SYS.  The SYS XLMI access refer to accesses from the
 * AHB2XLMI bridge.
 */
#define IAXXX_AF_MISC_CTRL_SYS_PRI_MASK 0x00000060
#define IAXXX_AF_MISC_CTRL_SYS_PRI_RESET_VAL 0x2
#define IAXXX_AF_MISC_CTRL_SYS_PRI_POS 5
#define IAXXX_AF_MISC_CTRL_SYS_PRI_SIZE 2
#define IAXXX_AF_MISC_CTRL_SYS_PRI_DECL (6:5)

/*
 * If set, the TIEQ0 will always present as empty and software should use the
 * dls interrupt to flag deadline scheduler winner.  Note that if it set, AF
 * will NOT request the tieq0 clock (which is DMX clock) to be enabled.
 */
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ0_MASK 0x00000080
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ0_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ0_POS 7
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ0_SIZE 1
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ0_DECL 7

/*
 * If set, and if the TIEQ0 is enabled (see DISABLE_TIEQ0), the processor
 * TIEQ0 clock will be clock gated such that there is no TIEQ0 clock when the
 * TIEQ is empty.  If cleared, and if the TIEQ0 is enabled (see
 * DISABLE_TIEQ0), the AF will always request a tieq0 clock. In the current
 * chip, the processor with TIEQ0 is the DMX.
 */
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ0_CLK_GATING_MASK 0x00000100
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ0_CLK_GATING_RESET_VAL 0x1
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ0_CLK_GATING_POS 8
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ0_CLK_GATING_SIZE 1
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ0_CLK_GATING_DECL 8

/*
 * If set, the TIEQ1 will always present as empty and software should use the
 * dls interrupt to flag deadline scheduler winner.  Note that if it set, AF
 * will NOT request the tieq1 clock (which is DMX clock) to be enabled.
 */
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ1_MASK 0x00000200
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ1_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ1_POS 9
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ1_SIZE 1
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ1_DECL 9

/*
 * If set, and if the TIEQ1 is enabled (see DISABLE_TIEQ1), the processor
 * TIEQ1 clock will be clock gated such that there is no TIEQ1 clock when the
 * TIEQ is empty.  If cleared, and if the TIEQ1 is enabled (see
 * DISABLE_TIEQ1), the AF will always request a tieq1 clock. In the current
 * chip, the processor with TIEQ1 is the HMD.
 */
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ1_CLK_GATING_MASK 0x00000400
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ1_CLK_GATING_RESET_VAL 0x1
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ1_CLK_GATING_POS 10
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ1_CLK_GATING_SIZE 1
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ1_CLK_GATING_DECL 10

/*
 * Disable the interrupt lines routed to hmd (only the dls intr and NOT err
 * intr).
 */
#define IAXXX_AF_MISC_CTRL_DIS_HMD_DLS_INT_MASK 0x00000800
#define IAXXX_AF_MISC_CTRL_DIS_HMD_DLS_INT_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_DIS_HMD_DLS_INT_POS 11
#define IAXXX_AF_MISC_CTRL_DIS_HMD_DLS_INT_SIZE 1
#define IAXXX_AF_MISC_CTRL_DIS_HMD_DLS_INT_DECL 11

/*
 * Disable the interrupt lines routed to dmx (only the dls intr and NOT err
 * intr).
 */
#define IAXXX_AF_MISC_CTRL_DIS_DMX_DLS_INT_MASK 0x00001000
#define IAXXX_AF_MISC_CTRL_DIS_DMX_DLS_INT_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_DIS_DMX_DLS_INT_POS 12
#define IAXXX_AF_MISC_CTRL_DIS_DMX_DLS_INT_SIZE 1
#define IAXXX_AF_MISC_CTRL_DIS_DMX_DLS_INT_DECL 12

/*
 * Disable the interrupt lines routed to sys (only the dls intr and NOT err
 * intr).
 */
#define IAXXX_AF_MISC_CTRL_DIS_SYS_DLS_INT_MASK 0x00002000
#define IAXXX_AF_MISC_CTRL_DIS_SYS_DLS_INT_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_DIS_SYS_DLS_INT_POS 13
#define IAXXX_AF_MISC_CTRL_DIS_SYS_DLS_INT_SIZE 1
#define IAXXX_AF_MISC_CTRL_DIS_SYS_DLS_INT_DECL 13

/*** AF_LS_MAP_0 (0x4400000c) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 0.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_0_ADDR (0x4400000c)
#define IAXXX_AF_LS_MAP_0_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_0_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_0_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_0_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 0.
 * PCM RX      : 0
 * CIC Combo RX: 0-7
 * PCM TX      : 16
 * CIC Combo TX: 16-17
 */
#define IAXXX_AF_LS_MAP_0_PHY_STR_NUM_0_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_0_PHY_STR_NUM_0_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_0_PHY_STR_NUM_0_POS 0
#define IAXXX_AF_LS_MAP_0_PHY_STR_NUM_0_SIZE 5
#define IAXXX_AF_LS_MAP_0_PHY_STR_NUM_0_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 0.
 * 0x0: PCM0
 * 0x1: PCM1
 * 0x2: PCM2
 * 0x3: Reserved
 * 0x4: Reserved
 * 0x5: Reserved
 * 0x6: Reserved
 * 0x7: CIC Combo
 * 0x8-0xf: Reserved
 *
 Field encoding values:
 *   0x0: pcm0
 *   0x1: pcm1
 *   0x2: pcm2
 *   0x3: Reserved
 *   0x4: Reserved
 *   0x5: Reserved
 *   0x7: cic_combo
 */
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_POS 5
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_SIZE 4
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 0.
 */
#define IAXXX_AF_LS_MAP_0_NUM_CHAN_MINUS_ONE_0_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_0_NUM_CHAN_MINUS_ONE_0_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_0_NUM_CHAN_MINUS_ONE_0_POS 12
#define IAXXX_AF_LS_MAP_0_NUM_CHAN_MINUS_ONE_0_SIZE 4
#define IAXXX_AF_LS_MAP_0_NUM_CHAN_MINUS_ONE_0_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 0.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_0_DISABLE_DS_0_MASK 0x00010000
#define IAXXX_AF_LS_MAP_0_DISABLE_DS_0_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_0_DISABLE_DS_0_POS 16
#define IAXXX_AF_LS_MAP_0_DISABLE_DS_0_SIZE 1
#define IAXXX_AF_LS_MAP_0_DISABLE_DS_0_DECL 16

/*** AF_LS_MAP_1 (0x44000010) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 1.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_1_ADDR (0x44000010)
#define IAXXX_AF_LS_MAP_1_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_1_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_1_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_1_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 1.
 */
#define IAXXX_AF_LS_MAP_1_PHY_STR_NUM_1_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_1_PHY_STR_NUM_1_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_1_PHY_STR_NUM_1_POS 0
#define IAXXX_AF_LS_MAP_1_PHY_STR_NUM_1_SIZE 5
#define IAXXX_AF_LS_MAP_1_PHY_STR_NUM_1_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 1.
 */
#define IAXXX_AF_LS_MAP_1_PHY_STR_TYPE_1_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_1_PHY_STR_TYPE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_1_PHY_STR_TYPE_1_POS 5
#define IAXXX_AF_LS_MAP_1_PHY_STR_TYPE_1_SIZE 4
#define IAXXX_AF_LS_MAP_1_PHY_STR_TYPE_1_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 1.
 */
#define IAXXX_AF_LS_MAP_1_NUM_CHAN_MINUS_ONE_1_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_1_NUM_CHAN_MINUS_ONE_1_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_1_NUM_CHAN_MINUS_ONE_1_POS 12
#define IAXXX_AF_LS_MAP_1_NUM_CHAN_MINUS_ONE_1_SIZE 4
#define IAXXX_AF_LS_MAP_1_NUM_CHAN_MINUS_ONE_1_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 1.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_1_DISABLE_DS_1_MASK 0x00010000
#define IAXXX_AF_LS_MAP_1_DISABLE_DS_1_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_1_DISABLE_DS_1_POS 16
#define IAXXX_AF_LS_MAP_1_DISABLE_DS_1_SIZE 1
#define IAXXX_AF_LS_MAP_1_DISABLE_DS_1_DECL 16

/*** AF_LS_MAP_2 (0x44000014) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 2.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_2_ADDR (0x44000014)
#define IAXXX_AF_LS_MAP_2_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_2_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_2_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_2_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 2.
 */
#define IAXXX_AF_LS_MAP_2_PHY_STR_NUM_2_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_2_PHY_STR_NUM_2_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_2_PHY_STR_NUM_2_POS 0
#define IAXXX_AF_LS_MAP_2_PHY_STR_NUM_2_SIZE 5
#define IAXXX_AF_LS_MAP_2_PHY_STR_NUM_2_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 2.
 */
#define IAXXX_AF_LS_MAP_2_PHY_STR_TYPE_2_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_2_PHY_STR_TYPE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_2_PHY_STR_TYPE_2_POS 5
#define IAXXX_AF_LS_MAP_2_PHY_STR_TYPE_2_SIZE 4
#define IAXXX_AF_LS_MAP_2_PHY_STR_TYPE_2_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 2.
 */
#define IAXXX_AF_LS_MAP_2_NUM_CHAN_MINUS_ONE_2_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_2_NUM_CHAN_MINUS_ONE_2_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_2_NUM_CHAN_MINUS_ONE_2_POS 12
#define IAXXX_AF_LS_MAP_2_NUM_CHAN_MINUS_ONE_2_SIZE 4
#define IAXXX_AF_LS_MAP_2_NUM_CHAN_MINUS_ONE_2_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 2.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_2_DISABLE_DS_2_MASK 0x00010000
#define IAXXX_AF_LS_MAP_2_DISABLE_DS_2_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_2_DISABLE_DS_2_POS 16
#define IAXXX_AF_LS_MAP_2_DISABLE_DS_2_SIZE 1
#define IAXXX_AF_LS_MAP_2_DISABLE_DS_2_DECL 16

/*** AF_LS_MAP_3 (0x44000018) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 3.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_3_ADDR (0x44000018)
#define IAXXX_AF_LS_MAP_3_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_3_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_3_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_3_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 3.
 */
#define IAXXX_AF_LS_MAP_3_PHY_STR_NUM_3_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_3_PHY_STR_NUM_3_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_3_PHY_STR_NUM_3_POS 0
#define IAXXX_AF_LS_MAP_3_PHY_STR_NUM_3_SIZE 5
#define IAXXX_AF_LS_MAP_3_PHY_STR_NUM_3_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 3.
 */
#define IAXXX_AF_LS_MAP_3_PHY_STR_TYPE_3_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_3_PHY_STR_TYPE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_3_PHY_STR_TYPE_3_POS 5
#define IAXXX_AF_LS_MAP_3_PHY_STR_TYPE_3_SIZE 4
#define IAXXX_AF_LS_MAP_3_PHY_STR_TYPE_3_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 3.
 */
#define IAXXX_AF_LS_MAP_3_NUM_CHAN_MINUS_ONE_3_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_3_NUM_CHAN_MINUS_ONE_3_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_3_NUM_CHAN_MINUS_ONE_3_POS 12
#define IAXXX_AF_LS_MAP_3_NUM_CHAN_MINUS_ONE_3_SIZE 4
#define IAXXX_AF_LS_MAP_3_NUM_CHAN_MINUS_ONE_3_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 3.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_3_DISABLE_DS_3_MASK 0x00010000
#define IAXXX_AF_LS_MAP_3_DISABLE_DS_3_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_3_DISABLE_DS_3_POS 16
#define IAXXX_AF_LS_MAP_3_DISABLE_DS_3_SIZE 1
#define IAXXX_AF_LS_MAP_3_DISABLE_DS_3_DECL 16

/*** AF_LS_MAP_4 (0x4400001c) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 4.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_4_ADDR (0x4400001c)
#define IAXXX_AF_LS_MAP_4_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_4_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_4_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_4_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 4.
 */
#define IAXXX_AF_LS_MAP_4_PHY_STR_NUM_4_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_4_PHY_STR_NUM_4_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_4_PHY_STR_NUM_4_POS 0
#define IAXXX_AF_LS_MAP_4_PHY_STR_NUM_4_SIZE 5
#define IAXXX_AF_LS_MAP_4_PHY_STR_NUM_4_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 4.
 */
#define IAXXX_AF_LS_MAP_4_PHY_STR_TYPE_4_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_4_PHY_STR_TYPE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_4_PHY_STR_TYPE_4_POS 5
#define IAXXX_AF_LS_MAP_4_PHY_STR_TYPE_4_SIZE 4
#define IAXXX_AF_LS_MAP_4_PHY_STR_TYPE_4_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 4.
 */
#define IAXXX_AF_LS_MAP_4_NUM_CHAN_MINUS_ONE_4_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_4_NUM_CHAN_MINUS_ONE_4_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_4_NUM_CHAN_MINUS_ONE_4_POS 12
#define IAXXX_AF_LS_MAP_4_NUM_CHAN_MINUS_ONE_4_SIZE 4
#define IAXXX_AF_LS_MAP_4_NUM_CHAN_MINUS_ONE_4_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 4.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_4_DISABLE_DS_4_MASK 0x00010000
#define IAXXX_AF_LS_MAP_4_DISABLE_DS_4_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_4_DISABLE_DS_4_POS 16
#define IAXXX_AF_LS_MAP_4_DISABLE_DS_4_SIZE 1
#define IAXXX_AF_LS_MAP_4_DISABLE_DS_4_DECL 16

/*** AF_LS_MAP_5 (0x44000020) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 5.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_5_ADDR (0x44000020)
#define IAXXX_AF_LS_MAP_5_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_5_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_5_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_5_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 5.
 */
#define IAXXX_AF_LS_MAP_5_PHY_STR_NUM_5_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_5_PHY_STR_NUM_5_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_5_PHY_STR_NUM_5_POS 0
#define IAXXX_AF_LS_MAP_5_PHY_STR_NUM_5_SIZE 5
#define IAXXX_AF_LS_MAP_5_PHY_STR_NUM_5_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 5.
 */
#define IAXXX_AF_LS_MAP_5_PHY_STR_TYPE_5_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_5_PHY_STR_TYPE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_5_PHY_STR_TYPE_5_POS 5
#define IAXXX_AF_LS_MAP_5_PHY_STR_TYPE_5_SIZE 4
#define IAXXX_AF_LS_MAP_5_PHY_STR_TYPE_5_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 5.
 */
#define IAXXX_AF_LS_MAP_5_NUM_CHAN_MINUS_ONE_5_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_5_NUM_CHAN_MINUS_ONE_5_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_5_NUM_CHAN_MINUS_ONE_5_POS 12
#define IAXXX_AF_LS_MAP_5_NUM_CHAN_MINUS_ONE_5_SIZE 4
#define IAXXX_AF_LS_MAP_5_NUM_CHAN_MINUS_ONE_5_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 5.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_5_DISABLE_DS_5_MASK 0x00010000
#define IAXXX_AF_LS_MAP_5_DISABLE_DS_5_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_5_DISABLE_DS_5_POS 16
#define IAXXX_AF_LS_MAP_5_DISABLE_DS_5_SIZE 1
#define IAXXX_AF_LS_MAP_5_DISABLE_DS_5_DECL 16

/*** AF_LS_MAP_6 (0x44000024) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 6.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_6_ADDR (0x44000024)
#define IAXXX_AF_LS_MAP_6_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_6_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_6_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_6_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 6.
 */
#define IAXXX_AF_LS_MAP_6_PHY_STR_NUM_6_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_6_PHY_STR_NUM_6_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_6_PHY_STR_NUM_6_POS 0
#define IAXXX_AF_LS_MAP_6_PHY_STR_NUM_6_SIZE 5
#define IAXXX_AF_LS_MAP_6_PHY_STR_NUM_6_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 6.
 */
#define IAXXX_AF_LS_MAP_6_PHY_STR_TYPE_6_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_6_PHY_STR_TYPE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_6_PHY_STR_TYPE_6_POS 5
#define IAXXX_AF_LS_MAP_6_PHY_STR_TYPE_6_SIZE 4
#define IAXXX_AF_LS_MAP_6_PHY_STR_TYPE_6_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 6.
 */
#define IAXXX_AF_LS_MAP_6_NUM_CHAN_MINUS_ONE_6_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_6_NUM_CHAN_MINUS_ONE_6_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_6_NUM_CHAN_MINUS_ONE_6_POS 12
#define IAXXX_AF_LS_MAP_6_NUM_CHAN_MINUS_ONE_6_SIZE 4
#define IAXXX_AF_LS_MAP_6_NUM_CHAN_MINUS_ONE_6_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 6.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_6_DISABLE_DS_6_MASK 0x00010000
#define IAXXX_AF_LS_MAP_6_DISABLE_DS_6_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_6_DISABLE_DS_6_POS 16
#define IAXXX_AF_LS_MAP_6_DISABLE_DS_6_SIZE 1
#define IAXXX_AF_LS_MAP_6_DISABLE_DS_6_DECL 16

/*** AF_LS_MAP_7 (0x44000028) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 7.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_7_ADDR (0x44000028)
#define IAXXX_AF_LS_MAP_7_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_7_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_7_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_7_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 7.
 */
#define IAXXX_AF_LS_MAP_7_PHY_STR_NUM_7_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_7_PHY_STR_NUM_7_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_7_PHY_STR_NUM_7_POS 0
#define IAXXX_AF_LS_MAP_7_PHY_STR_NUM_7_SIZE 5
#define IAXXX_AF_LS_MAP_7_PHY_STR_NUM_7_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 7.
 */
#define IAXXX_AF_LS_MAP_7_PHY_STR_TYPE_7_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_7_PHY_STR_TYPE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_7_PHY_STR_TYPE_7_POS 5
#define IAXXX_AF_LS_MAP_7_PHY_STR_TYPE_7_SIZE 4
#define IAXXX_AF_LS_MAP_7_PHY_STR_TYPE_7_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 7.
 */
#define IAXXX_AF_LS_MAP_7_NUM_CHAN_MINUS_ONE_7_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_7_NUM_CHAN_MINUS_ONE_7_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_7_NUM_CHAN_MINUS_ONE_7_POS 12
#define IAXXX_AF_LS_MAP_7_NUM_CHAN_MINUS_ONE_7_SIZE 4
#define IAXXX_AF_LS_MAP_7_NUM_CHAN_MINUS_ONE_7_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 7.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_7_DISABLE_DS_7_MASK 0x00010000
#define IAXXX_AF_LS_MAP_7_DISABLE_DS_7_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_7_DISABLE_DS_7_POS 16
#define IAXXX_AF_LS_MAP_7_DISABLE_DS_7_SIZE 1
#define IAXXX_AF_LS_MAP_7_DISABLE_DS_7_DECL 16

/*** AF_LS_MAP_8 (0x4400002c) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 8.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_8_ADDR (0x4400002c)
#define IAXXX_AF_LS_MAP_8_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_8_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_8_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_8_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 8.
 */
#define IAXXX_AF_LS_MAP_8_PHY_STR_NUM_8_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_8_PHY_STR_NUM_8_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_8_PHY_STR_NUM_8_POS 0
#define IAXXX_AF_LS_MAP_8_PHY_STR_NUM_8_SIZE 5
#define IAXXX_AF_LS_MAP_8_PHY_STR_NUM_8_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 8.
 */
#define IAXXX_AF_LS_MAP_8_PHY_STR_TYPE_8_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_8_PHY_STR_TYPE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_8_PHY_STR_TYPE_8_POS 5
#define IAXXX_AF_LS_MAP_8_PHY_STR_TYPE_8_SIZE 4
#define IAXXX_AF_LS_MAP_8_PHY_STR_TYPE_8_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 8.
 */
#define IAXXX_AF_LS_MAP_8_NUM_CHAN_MINUS_ONE_8_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_8_NUM_CHAN_MINUS_ONE_8_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_8_NUM_CHAN_MINUS_ONE_8_POS 12
#define IAXXX_AF_LS_MAP_8_NUM_CHAN_MINUS_ONE_8_SIZE 4
#define IAXXX_AF_LS_MAP_8_NUM_CHAN_MINUS_ONE_8_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 8.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_8_DISABLE_DS_8_MASK 0x00010000
#define IAXXX_AF_LS_MAP_8_DISABLE_DS_8_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_8_DISABLE_DS_8_POS 16
#define IAXXX_AF_LS_MAP_8_DISABLE_DS_8_SIZE 1
#define IAXXX_AF_LS_MAP_8_DISABLE_DS_8_DECL 16

/*** AF_LS_MAP_9 (0x44000030) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 9.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_9_ADDR (0x44000030)
#define IAXXX_AF_LS_MAP_9_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_9_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_9_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_9_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 9.
 */
#define IAXXX_AF_LS_MAP_9_PHY_STR_NUM_9_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_9_PHY_STR_NUM_9_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_9_PHY_STR_NUM_9_POS 0
#define IAXXX_AF_LS_MAP_9_PHY_STR_NUM_9_SIZE 5
#define IAXXX_AF_LS_MAP_9_PHY_STR_NUM_9_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 9.
 */
#define IAXXX_AF_LS_MAP_9_PHY_STR_TYPE_9_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_9_PHY_STR_TYPE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_9_PHY_STR_TYPE_9_POS 5
#define IAXXX_AF_LS_MAP_9_PHY_STR_TYPE_9_SIZE 4
#define IAXXX_AF_LS_MAP_9_PHY_STR_TYPE_9_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 9.
 */
#define IAXXX_AF_LS_MAP_9_NUM_CHAN_MINUS_ONE_9_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_9_NUM_CHAN_MINUS_ONE_9_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_9_NUM_CHAN_MINUS_ONE_9_POS 12
#define IAXXX_AF_LS_MAP_9_NUM_CHAN_MINUS_ONE_9_SIZE 4
#define IAXXX_AF_LS_MAP_9_NUM_CHAN_MINUS_ONE_9_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 9.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_9_DISABLE_DS_9_MASK 0x00010000
#define IAXXX_AF_LS_MAP_9_DISABLE_DS_9_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_9_DISABLE_DS_9_POS 16
#define IAXXX_AF_LS_MAP_9_DISABLE_DS_9_SIZE 1
#define IAXXX_AF_LS_MAP_9_DISABLE_DS_9_DECL 16

/*** AF_LS_MAP_10 (0x44000034) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 10.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_10_ADDR (0x44000034)
#define IAXXX_AF_LS_MAP_10_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_10_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_10_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_10_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 10.
 */
#define IAXXX_AF_LS_MAP_10_PHY_STR_NUM_10_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_10_PHY_STR_NUM_10_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_10_PHY_STR_NUM_10_POS 0
#define IAXXX_AF_LS_MAP_10_PHY_STR_NUM_10_SIZE 5
#define IAXXX_AF_LS_MAP_10_PHY_STR_NUM_10_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 10.
 */
#define IAXXX_AF_LS_MAP_10_PHY_STR_TYPE_10_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_10_PHY_STR_TYPE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_10_PHY_STR_TYPE_10_POS 5
#define IAXXX_AF_LS_MAP_10_PHY_STR_TYPE_10_SIZE 4
#define IAXXX_AF_LS_MAP_10_PHY_STR_TYPE_10_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 10.
 */
#define IAXXX_AF_LS_MAP_10_NUM_CHAN_MINUS_ONE_10_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_10_NUM_CHAN_MINUS_ONE_10_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_10_NUM_CHAN_MINUS_ONE_10_POS 12
#define IAXXX_AF_LS_MAP_10_NUM_CHAN_MINUS_ONE_10_SIZE 4
#define IAXXX_AF_LS_MAP_10_NUM_CHAN_MINUS_ONE_10_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 10.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_10_DISABLE_DS_10_MASK 0x00010000
#define IAXXX_AF_LS_MAP_10_DISABLE_DS_10_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_10_DISABLE_DS_10_POS 16
#define IAXXX_AF_LS_MAP_10_DISABLE_DS_10_SIZE 1
#define IAXXX_AF_LS_MAP_10_DISABLE_DS_10_DECL 16

/*** AF_LS_MAP_11 (0x44000038) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 11.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_11_ADDR (0x44000038)
#define IAXXX_AF_LS_MAP_11_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_11_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_11_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_11_RESET_VAL 0x00003000

/*
 * Physical Stream Number mapped to Logical Stream 11.
 */
#define IAXXX_AF_LS_MAP_11_PHY_STR_NUM_11_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_11_PHY_STR_NUM_11_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_11_PHY_STR_NUM_11_POS 0
#define IAXXX_AF_LS_MAP_11_PHY_STR_NUM_11_SIZE 5
#define IAXXX_AF_LS_MAP_11_PHY_STR_NUM_11_DECL (4:0)

/*
 * Physical Stream Type mapped to Logical Stream 11.
 */
#define IAXXX_AF_LS_MAP_11_PHY_STR_TYPE_11_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_11_PHY_STR_TYPE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_11_PHY_STR_TYPE_11_POS 5
#define IAXXX_AF_LS_MAP_11_PHY_STR_TYPE_11_SIZE 4
#define IAXXX_AF_LS_MAP_11_PHY_STR_TYPE_11_DECL (8:5)

/*
 * Number of channels minus one for Logical Stream 11.
 */
#define IAXXX_AF_LS_MAP_11_NUM_CHAN_MINUS_ONE_11_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_11_NUM_CHAN_MINUS_ONE_11_RESET_VAL 0x3
#define IAXXX_AF_LS_MAP_11_NUM_CHAN_MINUS_ONE_11_POS 12
#define IAXXX_AF_LS_MAP_11_NUM_CHAN_MINUS_ONE_11_SIZE 4
#define IAXXX_AF_LS_MAP_11_NUM_CHAN_MINUS_ONE_11_DECL (15:12)

/*
 * Deadline scheduler disable for Logical Stream 11.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_11_DISABLE_DS_11_MASK 0x00010000
#define IAXXX_AF_LS_MAP_11_DISABLE_DS_11_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_11_DISABLE_DS_11_POS 16
#define IAXXX_AF_LS_MAP_11_DISABLE_DS_11_SIZE 1
#define IAXXX_AF_LS_MAP_11_DISABLE_DS_11_DECL 16

/*** AF_LS_DEADLINE_0 (0x4400004c) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 0 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_0_ADDR (0x4400004c)
#define IAXXX_AF_LS_DEADLINE_0_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_0_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_0_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_0_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_0_SR_SCALE_FACTOR_0_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_0_SR_SCALE_FACTOR_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_0_SR_SCALE_FACTOR_0_POS 0
#define IAXXX_AF_LS_DEADLINE_0_SR_SCALE_FACTOR_0_SIZE 3
#define IAXXX_AF_LS_DEADLINE_0_SR_SCALE_FACTOR_0_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 0.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_POS 3
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_SIZE 2
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_DECL (4:3)

/*** AF_LS_DEADLINE_1 (0x44000050) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 1 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_1_ADDR (0x44000050)
#define IAXXX_AF_LS_DEADLINE_1_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_1_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_1_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_1_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_1_SR_SCALE_FACTOR_1_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_1_SR_SCALE_FACTOR_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_1_SR_SCALE_FACTOR_1_POS 0
#define IAXXX_AF_LS_DEADLINE_1_SR_SCALE_FACTOR_1_SIZE 3
#define IAXXX_AF_LS_DEADLINE_1_SR_SCALE_FACTOR_1_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 1.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_POS 3
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_SIZE 2
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_DECL (4:3)

/*** AF_LS_DEADLINE_2 (0x44000054) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 2 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_2_ADDR (0x44000054)
#define IAXXX_AF_LS_DEADLINE_2_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_2_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_2_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_2_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_2_SR_SCALE_FACTOR_2_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_2_SR_SCALE_FACTOR_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_2_SR_SCALE_FACTOR_2_POS 0
#define IAXXX_AF_LS_DEADLINE_2_SR_SCALE_FACTOR_2_SIZE 3
#define IAXXX_AF_LS_DEADLINE_2_SR_SCALE_FACTOR_2_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 2.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_POS 3
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_SIZE 2
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_DECL (4:3)

/*** AF_LS_DEADLINE_3 (0x44000058) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 3 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_3_ADDR (0x44000058)
#define IAXXX_AF_LS_DEADLINE_3_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_3_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_3_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_3_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_3_SR_SCALE_FACTOR_3_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_3_SR_SCALE_FACTOR_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_3_SR_SCALE_FACTOR_3_POS 0
#define IAXXX_AF_LS_DEADLINE_3_SR_SCALE_FACTOR_3_SIZE 3
#define IAXXX_AF_LS_DEADLINE_3_SR_SCALE_FACTOR_3_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 3.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_POS 3
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_SIZE 2
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_DECL (4:3)

/*** AF_LS_DEADLINE_4 (0x4400005c) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 4 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_4_ADDR (0x4400005c)
#define IAXXX_AF_LS_DEADLINE_4_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_4_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_4_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_4_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_4_SR_SCALE_FACTOR_4_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_4_SR_SCALE_FACTOR_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_4_SR_SCALE_FACTOR_4_POS 0
#define IAXXX_AF_LS_DEADLINE_4_SR_SCALE_FACTOR_4_SIZE 3
#define IAXXX_AF_LS_DEADLINE_4_SR_SCALE_FACTOR_4_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 4.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_POS 3
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_SIZE 2
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_DECL (4:3)

/*** AF_LS_DEADLINE_5 (0x44000060) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 5 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_5_ADDR (0x44000060)
#define IAXXX_AF_LS_DEADLINE_5_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_5_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_5_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_5_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_5_SR_SCALE_FACTOR_5_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_5_SR_SCALE_FACTOR_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_5_SR_SCALE_FACTOR_5_POS 0
#define IAXXX_AF_LS_DEADLINE_5_SR_SCALE_FACTOR_5_SIZE 3
#define IAXXX_AF_LS_DEADLINE_5_SR_SCALE_FACTOR_5_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 5.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_POS 3
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_SIZE 2
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_DECL (4:3)

/*** AF_LS_DEADLINE_6 (0x44000064) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 6 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_6_ADDR (0x44000064)
#define IAXXX_AF_LS_DEADLINE_6_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_6_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_6_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_6_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_6_SR_SCALE_FACTOR_6_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_6_SR_SCALE_FACTOR_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_6_SR_SCALE_FACTOR_6_POS 0
#define IAXXX_AF_LS_DEADLINE_6_SR_SCALE_FACTOR_6_SIZE 3
#define IAXXX_AF_LS_DEADLINE_6_SR_SCALE_FACTOR_6_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 6.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_POS 3
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_SIZE 2
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_DECL (4:3)

/*** AF_LS_DEADLINE_7 (0x44000068) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 7 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_7_ADDR (0x44000068)
#define IAXXX_AF_LS_DEADLINE_7_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_7_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_7_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_7_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_7_SR_SCALE_FACTOR_7_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_7_SR_SCALE_FACTOR_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_7_SR_SCALE_FACTOR_7_POS 0
#define IAXXX_AF_LS_DEADLINE_7_SR_SCALE_FACTOR_7_SIZE 3
#define IAXXX_AF_LS_DEADLINE_7_SR_SCALE_FACTOR_7_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 7.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_POS 3
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_SIZE 2
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_DECL (4:3)

/*** AF_LS_DEADLINE_8 (0x4400006c) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 8 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_8_ADDR (0x4400006c)
#define IAXXX_AF_LS_DEADLINE_8_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_8_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_8_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_8_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_8_SR_SCALE_FACTOR_8_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_8_SR_SCALE_FACTOR_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_8_SR_SCALE_FACTOR_8_POS 0
#define IAXXX_AF_LS_DEADLINE_8_SR_SCALE_FACTOR_8_SIZE 3
#define IAXXX_AF_LS_DEADLINE_8_SR_SCALE_FACTOR_8_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 8.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_POS 3
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_SIZE 2
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_DECL (4:3)

/*** AF_LS_DEADLINE_9 (0x44000070) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 9 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_9_ADDR (0x44000070)
#define IAXXX_AF_LS_DEADLINE_9_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_9_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_9_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_9_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_9_SR_SCALE_FACTOR_9_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_9_SR_SCALE_FACTOR_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_9_SR_SCALE_FACTOR_9_POS 0
#define IAXXX_AF_LS_DEADLINE_9_SR_SCALE_FACTOR_9_SIZE 3
#define IAXXX_AF_LS_DEADLINE_9_SR_SCALE_FACTOR_9_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 9.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_POS 3
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_SIZE 2
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_DECL (4:3)

/*** AF_LS_DEADLINE_10 (0x44000074) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 10 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_10_ADDR (0x44000074)
#define IAXXX_AF_LS_DEADLINE_10_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_10_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_10_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_10_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_10_SR_SCALE_FACTOR_10_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_10_SR_SCALE_FACTOR_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_10_SR_SCALE_FACTOR_10_POS 0
#define IAXXX_AF_LS_DEADLINE_10_SR_SCALE_FACTOR_10_SIZE 3
#define IAXXX_AF_LS_DEADLINE_10_SR_SCALE_FACTOR_10_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 10.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_POS 3
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_SIZE 2
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_DECL (4:3)

/*** AF_LS_DEADLINE_11 (0x44000078) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 11 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_11_ADDR (0x44000078)
#define IAXXX_AF_LS_DEADLINE_11_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_11_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_11_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_11_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_11_SR_SCALE_FACTOR_11_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_11_SR_SCALE_FACTOR_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_11_SR_SCALE_FACTOR_11_POS 0
#define IAXXX_AF_LS_DEADLINE_11_SR_SCALE_FACTOR_11_SIZE 3
#define IAXXX_AF_LS_DEADLINE_11_SR_SCALE_FACTOR_11_DECL (2:0)

/*
 * Sample Rate Family Logical Stream 11.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_POS 3
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_SIZE 2
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_DECL (4:3)

/*** AF_LS_COMPARE_SEL (0x4400008c) ***/
/*
 * Specifies the deadline compare tree assigned to each logical stream.  A
 * selection of 0 implies the stream when enabled, can request service (via
 * Compare Tree 0) through the TIE priority queue 0 or deadline scheduler
 * interrupt; a selection of 1 implies the stream when enabled can request
 * service (via Compare Tree 1) through the TIE priority queue 1 or deadline
 * scheduler interrupt.
 */
#define IAXXX_AF_LS_COMPARE_SEL_ADDR (0x4400008c)
#define IAXXX_AF_LS_COMPARE_SEL_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_COMPARE_SEL_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_COMPARE_SEL_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_COMPARE_SEL_RESET_VAL 0x00000000

/*
 * Selects Compare Tree for Logical Stream 0.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_0_MASK 0x00000001
#define IAXXX_AF_LS_COMPARE_SEL_S_0_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_0_POS 0
#define IAXXX_AF_LS_COMPARE_SEL_S_0_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_0_DECL 0

/*
 * Selects Compare Tree for Logical Stream 1.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_1_MASK 0x00000002
#define IAXXX_AF_LS_COMPARE_SEL_S_1_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_1_POS 1
#define IAXXX_AF_LS_COMPARE_SEL_S_1_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_1_DECL 1

/*
 * Selects Compare Tree for Logical Stream 2.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_2_MASK 0x00000004
#define IAXXX_AF_LS_COMPARE_SEL_S_2_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_2_POS 2
#define IAXXX_AF_LS_COMPARE_SEL_S_2_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_2_DECL 2

/*
 * Selects Compare Tree for Logical Stream 3.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_3_MASK 0x00000008
#define IAXXX_AF_LS_COMPARE_SEL_S_3_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_3_POS 3
#define IAXXX_AF_LS_COMPARE_SEL_S_3_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_3_DECL 3

/*
 * Selects Compare Tree for Logical Stream 4.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_4_MASK 0x00000010
#define IAXXX_AF_LS_COMPARE_SEL_S_4_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_4_POS 4
#define IAXXX_AF_LS_COMPARE_SEL_S_4_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_4_DECL 4

/*
 * Selects Compare Tree for Logical Stream 5.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_5_MASK 0x00000020
#define IAXXX_AF_LS_COMPARE_SEL_S_5_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_5_POS 5
#define IAXXX_AF_LS_COMPARE_SEL_S_5_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_5_DECL 5

/*
 * Selects Compare Tree for Logical Stream 6.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_6_MASK 0x00000040
#define IAXXX_AF_LS_COMPARE_SEL_S_6_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_6_POS 6
#define IAXXX_AF_LS_COMPARE_SEL_S_6_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_6_DECL 6

/*
 * Selects Compare Tree for Logical Stream 7.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_7_MASK 0x00000080
#define IAXXX_AF_LS_COMPARE_SEL_S_7_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_7_POS 7
#define IAXXX_AF_LS_COMPARE_SEL_S_7_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_7_DECL 7

/*
 * Selects Compare Tree for Logical Stream 8.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_8_MASK 0x00000100
#define IAXXX_AF_LS_COMPARE_SEL_S_8_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_8_POS 8
#define IAXXX_AF_LS_COMPARE_SEL_S_8_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_8_DECL 8

/*
 * Selects Compare Tree for Logical Stream 9.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_9_MASK 0x00000200
#define IAXXX_AF_LS_COMPARE_SEL_S_9_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_9_POS 9
#define IAXXX_AF_LS_COMPARE_SEL_S_9_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_9_DECL 9

/*
 * Selects Compare Tree for Logical Stream 10.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_10_MASK 0x00000400
#define IAXXX_AF_LS_COMPARE_SEL_S_10_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_10_POS 10
#define IAXXX_AF_LS_COMPARE_SEL_S_10_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_10_DECL 10

/*
 * Selects Compare Tree for Logical Stream 11.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_11_MASK 0x00000800
#define IAXXX_AF_LS_COMPARE_SEL_S_11_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_11_POS 11
#define IAXXX_AF_LS_COMPARE_SEL_S_11_SIZE 1
#define IAXXX_AF_LS_COMPARE_SEL_S_11_DECL 11

/*** AF_BACKGROUND_TASK0 (0x44000090) ***/
/*
 * Any write to this register, regardless of data value, causes a Background
 * Task request 0 to be asserted by the Deadline Scheduler.  This request
 * will remain asserted until serviced by being popped from the TIE Priority
 * Queue0.  The register always reads 0.
 */
#define IAXXX_AF_BACKGROUND_TASK0_ADDR (0x44000090)
#define IAXXX_AF_BACKGROUND_TASK0_MASK_VAL 0x00000001
#define IAXXX_AF_BACKGROUND_TASK0_RMASK_VAL 0x00000000
#define IAXXX_AF_BACKGROUND_TASK0_WMASK_VAL 0x00000001
#define IAXXX_AF_BACKGROUND_TASK0_RESET_VAL 0x00000000

/*
 * Write of any data requests a Background Task 0 (compare tree 0); always
 * reads 0.
 */
#define IAXXX_AF_BACKGROUND_TASK0_CT0_MASK 0x00000001
#define IAXXX_AF_BACKGROUND_TASK0_CT0_RESET_VAL 0x0
#define IAXXX_AF_BACKGROUND_TASK0_CT0_POS 0
#define IAXXX_AF_BACKGROUND_TASK0_CT0_SIZE 1
#define IAXXX_AF_BACKGROUND_TASK0_CT0_DECL 0

/*** AF_LS_ACK_FOR_CT_0 (0x44000094) ***/
/*
 * When written, acknowledges and clears a pending deadline scheduler service
 * request for the indicated logical stream or the background task.  If the
 * logical stream is not assigned to compare tree 0, or is not requesting
 * service, the write is ignored.  If the Background Task bit is set, the
 * contents of the logical stream portion of the field are ignored.  A read
 * of the register returns the most recently written value.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_0_ADDR (0x44000094)
#define IAXXX_AF_LS_ACK_FOR_CT_0_MASK_VAL 0x0000002f
#define IAXXX_AF_LS_ACK_FOR_CT_0_RMASK_VAL 0x0000002f
#define IAXXX_AF_LS_ACK_FOR_CT_0_WMASK_VAL 0x0000002f
#define IAXXX_AF_LS_ACK_FOR_CT_0_RESET_VAL 0x00000000

/*
 * Acknowledges that the logical stream <(3:0)> (if bit 5 is 0) will be
 * serviced.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_0_SERVICED_MASK 0x0000000f
#define IAXXX_AF_LS_ACK_FOR_CT_0_SERVICED_RESET_VAL 0x0
#define IAXXX_AF_LS_ACK_FOR_CT_0_SERVICED_POS 0
#define IAXXX_AF_LS_ACK_FOR_CT_0_SERVICED_SIZE 4
#define IAXXX_AF_LS_ACK_FOR_CT_0_SERVICED_DECL (3:0)

/*
 * Acknowledges that the background task 0 (if bit 5 is 1) will be serviced.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_0_BACKGROUND_MASK 0x00000020
#define IAXXX_AF_LS_ACK_FOR_CT_0_BACKGROUND_RESET_VAL 0x0
#define IAXXX_AF_LS_ACK_FOR_CT_0_BACKGROUND_POS 5
#define IAXXX_AF_LS_ACK_FOR_CT_0_BACKGROUND_SIZE 1
#define IAXXX_AF_LS_ACK_FOR_CT_0_BACKGROUND_DECL 5

/*** AF_LS_ACK_FOR_CT_1 (0x44000098) ***/
/*
 * When written, acknowledges and clears a pending deadline scheduler service
 * request for the indicated logical stream or the background task.  If the
 * logical stream is not assigned to compare tree 1, or is not requesting
 * service, the write is ignored. If the Background Task bit is set, the
 * contents of the logical stream portion of the field are ignored.  A read
 * of the register returns the most recently written value.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_1_ADDR (0x44000098)
#define IAXXX_AF_LS_ACK_FOR_CT_1_MASK_VAL 0x0000002f
#define IAXXX_AF_LS_ACK_FOR_CT_1_RMASK_VAL 0x0000002f
#define IAXXX_AF_LS_ACK_FOR_CT_1_WMASK_VAL 0x0000002f
#define IAXXX_AF_LS_ACK_FOR_CT_1_RESET_VAL 0x00000000

/*
 * Acknowledges that the logical stream <(3:0)> (if bit 5 is 0) will be
 * serviced.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_1_SERVICED_MASK 0x0000000f
#define IAXXX_AF_LS_ACK_FOR_CT_1_SERVICED_RESET_VAL 0x0
#define IAXXX_AF_LS_ACK_FOR_CT_1_SERVICED_POS 0
#define IAXXX_AF_LS_ACK_FOR_CT_1_SERVICED_SIZE 4
#define IAXXX_AF_LS_ACK_FOR_CT_1_SERVICED_DECL (3:0)

/*
 * Acknowledges that the background task 1 (see Background_Task1 register)
 * (if bit 5 is 1) will be serviced.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_1_BACKGROUND_MASK 0x00000020
#define IAXXX_AF_LS_ACK_FOR_CT_1_BACKGROUND_RESET_VAL 0x0
#define IAXXX_AF_LS_ACK_FOR_CT_1_BACKGROUND_POS 5
#define IAXXX_AF_LS_ACK_FOR_CT_1_BACKGROUND_SIZE 1
#define IAXXX_AF_LS_ACK_FOR_CT_1_BACKGROUND_DECL 5

/*** AF_CT_0_STS (0x4400009c) ***/
/*
 * Indicates if any Compare Tree 0 stream or the background task is
 * requesting service.  If service is requested, indicates the source of the
 * highest priority request.  If the request is a Logical Stream, the
 * Presentation Time Flag for the stream is given.  If no service request is
 * pending, the register will read zero.
 */
#define IAXXX_AF_CT_0_STS_ADDR (0x4400009c)
#define IAXXX_AF_CT_0_STS_MASK_VAL 0x0000007f
#define IAXXX_AF_CT_0_STS_RMASK_VAL 0x0000007f
#define IAXXX_AF_CT_0_STS_WMASK_VAL 0x00000000
#define IAXXX_AF_CT_0_STS_RESET_VAL 0x00000000

/*
 * Logical Stream with Highest Priority Logical Stream in Compare Tree 0
 */
#define IAXXX_AF_CT_0_STS_LS_WINNER_MASK 0x0000000f
#define IAXXX_AF_CT_0_STS_LS_WINNER_RESET_VAL 0x0
#define IAXXX_AF_CT_0_STS_LS_WINNER_POS 0
#define IAXXX_AF_CT_0_STS_LS_WINNER_SIZE 4
#define IAXXX_AF_CT_0_STS_LS_WINNER_DECL (3:0)

/*
 * Presentation Time Flag for Logical Stream with the highest priority in
 * Compare Tree 0; zero if the background task has priority.
 */
#define IAXXX_AF_CT_0_STS_PT_FLAG_MASK 0x00000010
#define IAXXX_AF_CT_0_STS_PT_FLAG_RESET_VAL 0x0
#define IAXXX_AF_CT_0_STS_PT_FLAG_POS 4
#define IAXXX_AF_CT_0_STS_PT_FLAG_SIZE 1
#define IAXXX_AF_CT_0_STS_PT_FLAG_DECL 4

/*
 * Indicates the background task is the priority task for Compare Tree 0.
 */
#define IAXXX_AF_CT_0_STS_BG_REQ_MASK 0x00000020
#define IAXXX_AF_CT_0_STS_BG_REQ_RESET_VAL 0x0
#define IAXXX_AF_CT_0_STS_BG_REQ_POS 5
#define IAXXX_AF_CT_0_STS_BG_REQ_SIZE 1
#define IAXXX_AF_CT_0_STS_BG_REQ_DECL 5

/*
 * Indicates the background task or at least one Compare Tree 0 logical
 * stream is requesting service.
 */
#define IAXXX_AF_CT_0_STS_SVC_REQ_MASK 0x00000040
#define IAXXX_AF_CT_0_STS_SVC_REQ_RESET_VAL 0x0
#define IAXXX_AF_CT_0_STS_SVC_REQ_POS 6
#define IAXXX_AF_CT_0_STS_SVC_REQ_SIZE 1
#define IAXXX_AF_CT_0_STS_SVC_REQ_DECL 6

/*** AF_CT_1_STS (0x440000a0) ***/
/*
 * Indicates if any Compare Tree 1 stream is requesting service.  If service
 * is requested, indicates the source of the highest priority request and its
 * Presentation Time Flag.  If no service request is pending, the register
 * will read zero.
 */
#define IAXXX_AF_CT_1_STS_ADDR (0x440000a0)
#define IAXXX_AF_CT_1_STS_MASK_VAL 0x0000007f
#define IAXXX_AF_CT_1_STS_RMASK_VAL 0x0000007f
#define IAXXX_AF_CT_1_STS_WMASK_VAL 0x00000000
#define IAXXX_AF_CT_1_STS_RESET_VAL 0x00000000

/*
 * Logical Stream with the highest priority in Compare Tree 1.
 */
#define IAXXX_AF_CT_1_STS_LS_WINNER_MASK 0x0000000f
#define IAXXX_AF_CT_1_STS_LS_WINNER_RESET_VAL 0x0
#define IAXXX_AF_CT_1_STS_LS_WINNER_POS 0
#define IAXXX_AF_CT_1_STS_LS_WINNER_SIZE 4
#define IAXXX_AF_CT_1_STS_LS_WINNER_DECL (3:0)

/*
 * Presentation Time Flag for Logical Stream with the highest priority in
 * Compare Tree 1; zero if the background task has priority.
 */
#define IAXXX_AF_CT_1_STS_PT_FLAG_MASK 0x00000010
#define IAXXX_AF_CT_1_STS_PT_FLAG_RESET_VAL 0x0
#define IAXXX_AF_CT_1_STS_PT_FLAG_POS 4
#define IAXXX_AF_CT_1_STS_PT_FLAG_SIZE 1
#define IAXXX_AF_CT_1_STS_PT_FLAG_DECL 4

/*
 * Indicates the background task is the priority task for Compare Tree 1.
 */
#define IAXXX_AF_CT_1_STS_BG_REQ_MASK 0x00000020
#define IAXXX_AF_CT_1_STS_BG_REQ_RESET_VAL 0x0
#define IAXXX_AF_CT_1_STS_BG_REQ_POS 5
#define IAXXX_AF_CT_1_STS_BG_REQ_SIZE 1
#define IAXXX_AF_CT_1_STS_BG_REQ_DECL 5

/*
 * Indicates at least one Compare Tree 1 logical stream is requesting
 * service.
 */
#define IAXXX_AF_CT_1_STS_SVC_REQ_MASK 0x00000040
#define IAXXX_AF_CT_1_STS_SVC_REQ_RESET_VAL 0x0
#define IAXXX_AF_CT_1_STS_SVC_REQ_POS 6
#define IAXXX_AF_CT_1_STS_SVC_REQ_SIZE 1
#define IAXXX_AF_CT_1_STS_SVC_REQ_DECL 6

/*** AF_LS_TIMEOUT_CTRL (0x440000a4) ***/
/*
 * Determines the period for the Stream Timeout counter for each Logical
 * Stream.  When 0, the timeout period is 67 usec; when 1 the period is 333
 * usec.  A selection of 0 is intended for streams with sample rates of 44.1
 * kHz or higher; a selection of 1 is for sample rates 32 kHz or below.
 * These rates assume the 3.072 Wall clock tick.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_ADDR (0x440000a4)
#define IAXXX_AF_LS_TIMEOUT_CTRL_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_CTRL_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_CTRL_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_CTRL_RESET_VAL 0x00000000

/*
 * Selects Timeout Period for Logical Stream 0.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_0_MASK 0x00000001
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_0_POS 0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_0_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_0_DECL 0

/*
 * Selects Timeout Period for Logical Stream 1.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_1_MASK 0x00000002
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_1_POS 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_1_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_1_DECL 1

/*
 * Selects Timeout Period for Logical Stream 2.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_2_MASK 0x00000004
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_2_POS 2
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_2_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_2_DECL 2

/*
 * Selects Timeout Period for Logical Stream 3.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_3_MASK 0x00000008
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_3_POS 3
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_3_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_3_DECL 3

/*
 * Selects Timeout Period for Logical Stream 4.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_4_MASK 0x00000010
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_4_POS 4
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_4_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_4_DECL 4

/*
 * Selects Timeout Period for Logical Stream 5.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_5_MASK 0x00000020
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_5_POS 5
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_5_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_5_DECL 5

/*
 * Selects Timeout Period for Logical Stream 6.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_6_MASK 0x00000040
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_6_POS 6
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_6_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_6_DECL 6

/*
 * Selects Timeout Period for Logical Stream 7.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_7_MASK 0x00000080
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_7_POS 7
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_7_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_7_DECL 7

/*
 * Selects Timeout Period for Logical Stream 8.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_8_MASK 0x00000100
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_8_POS 8
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_8_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_8_DECL 8

/*
 * Selects Timeout Period for Logical Stream 9.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_9_MASK 0x00000200
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_9_POS 9
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_9_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_9_DECL 9

/*
 * Selects Timeout Period for Logical Stream 10.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_10_MASK 0x00000400
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_10_POS 10
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_10_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_10_DECL 10

/*
 * Selects Timeout Period for Logical Stream 11.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_11_MASK 0x00000800
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_11_POS 11
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_11_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_11_DECL 11

/*** AF_LS_TIMEOUT_ENAB (0x440000a8) ***/
/*
 * Master Enable Bits for Logical Stream Timeout Period. When enabled, the
 * logical stream timeout function is available.  Note that the WCPT must be
 * on to use the timeout feature since we need the wall clock tick to count
 * the timeout period.  Nominally, the timeout tick is 1/8th the rate (384
 * KHz) of the deadline scheduler tick (3.072 MHz).
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_ADDR (0x440000a8)
#define IAXXX_AF_LS_TIMEOUT_ENAB_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_ENAB_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_ENAB_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_ENAB_RESET_VAL 0x00000000

/*
 * Enables Timeout Period for Logical stream 0.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_0_MASK 0x00000001
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_0_POS 0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_0_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_0_DECL 0

/*
 * Enables Timeout Period for Logical stream 1.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_1_MASK 0x00000002
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_1_POS 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_1_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_1_DECL 1

/*
 * Enables Timeout Period for Logical stream 2.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_2_MASK 0x00000004
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_2_POS 2
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_2_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_2_DECL 2

/*
 * Enables Timeout Period for Logical stream 3.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_3_MASK 0x00000008
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_3_POS 3
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_3_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_3_DECL 3

/*
 * Enables Timeout Period for Logical stream 4.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_4_MASK 0x00000010
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_4_POS 4
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_4_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_4_DECL 4

/*
 * Enables Timeout Period for Logical stream 5.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_5_MASK 0x00000020
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_5_POS 5
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_5_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_5_DECL 5

/*
 * Enables Timeout Period for Logical stream 6.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_6_MASK 0x00000040
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_6_POS 6
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_6_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_6_DECL 6

/*
 * Enables Timeout Period for Logical stream 7.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_7_MASK 0x00000080
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_7_POS 7
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_7_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_7_DECL 7

/*
 * Enables Timeout Period for Logical stream 8.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_8_MASK 0x00000100
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_8_POS 8
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_8_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_8_DECL 8

/*
 * Enables Timeout Period for Logical stream 9.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_9_MASK 0x00000200
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_9_POS 9
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_9_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_9_DECL 9

/*
 * Enables Timeout Period for Logical stream 10.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_10_MASK 0x00000400
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_10_POS 10
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_10_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_10_DECL 10

/*
 * Enables Timeout Period for Logical stream 11.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_11_MASK 0x00000800
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_11_POS 11
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_11_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_11_DECL 11

/*** AF_LS_SUBSAMP_CTR_0 (0x440000ac) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 0.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_0_ADDR (0x440000ac)
#define IAXXX_AF_LS_SUBSAMP_CTR_0_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_0_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_0_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_0_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 0, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_0_PHASE_0_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_0_PHASE_0_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_0_PHASE_0_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_0_PHASE_0_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_0_PHASE_0_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 0, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_0_SKIP_COUNT_0_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_0_SKIP_COUNT_0_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_0_SKIP_COUNT_0_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_0_SKIP_COUNT_0_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_0_SKIP_COUNT_0_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_1 (0x440000b0) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 1.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_1_ADDR (0x440000b0)
#define IAXXX_AF_LS_SUBSAMP_CTR_1_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_1_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_1_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_1_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 1, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_1_PHASE_1_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_1_PHASE_1_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_1_PHASE_1_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_1_PHASE_1_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_1_PHASE_1_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 1, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_1_SKIP_COUNT_1_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_1_SKIP_COUNT_1_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_1_SKIP_COUNT_1_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_1_SKIP_COUNT_1_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_1_SKIP_COUNT_1_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_2 (0x440000b4) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 2.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_2_ADDR (0x440000b4)
#define IAXXX_AF_LS_SUBSAMP_CTR_2_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_2_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_2_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_2_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 2, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_2_PHASE_2_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_2_PHASE_2_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_2_PHASE_2_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_2_PHASE_2_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_2_PHASE_2_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 2, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_2_SKIP_COUNT_2_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_2_SKIP_COUNT_2_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_2_SKIP_COUNT_2_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_2_SKIP_COUNT_2_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_2_SKIP_COUNT_2_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_3 (0x440000b8) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 3.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_3_ADDR (0x440000b8)
#define IAXXX_AF_LS_SUBSAMP_CTR_3_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_3_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_3_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_3_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 3, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_3_PHASE_3_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_3_PHASE_3_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_3_PHASE_3_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_3_PHASE_3_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_3_PHASE_3_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 3, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_3_SKIP_COUNT_3_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_3_SKIP_COUNT_3_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_3_SKIP_COUNT_3_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_3_SKIP_COUNT_3_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_3_SKIP_COUNT_3_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_4 (0x440000bc) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 4.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_4_ADDR (0x440000bc)
#define IAXXX_AF_LS_SUBSAMP_CTR_4_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_4_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_4_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_4_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 4, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_4_PHASE_4_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_4_PHASE_4_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_4_PHASE_4_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_4_PHASE_4_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_4_PHASE_4_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 4, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_4_SKIP_COUNT_4_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_4_SKIP_COUNT_4_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_4_SKIP_COUNT_4_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_4_SKIP_COUNT_4_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_4_SKIP_COUNT_4_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_5 (0x440000c0) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 5.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_5_ADDR (0x440000c0)
#define IAXXX_AF_LS_SUBSAMP_CTR_5_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_5_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_5_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_5_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 5, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_5_PHASE_5_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_5_PHASE_5_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_5_PHASE_5_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_5_PHASE_5_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_5_PHASE_5_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 5, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_5_SKIP_COUNT_5_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_5_SKIP_COUNT_5_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_5_SKIP_COUNT_5_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_5_SKIP_COUNT_5_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_5_SKIP_COUNT_5_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_6 (0x440000c4) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 6.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_6_ADDR (0x440000c4)
#define IAXXX_AF_LS_SUBSAMP_CTR_6_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_6_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_6_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_6_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 6, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_6_PHASE_6_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_6_PHASE_6_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_6_PHASE_6_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_6_PHASE_6_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_6_PHASE_6_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 6, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_6_SKIP_COUNT_6_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_6_SKIP_COUNT_6_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_6_SKIP_COUNT_6_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_6_SKIP_COUNT_6_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_6_SKIP_COUNT_6_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_7 (0x440000c8) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 7.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_7_ADDR (0x440000c8)
#define IAXXX_AF_LS_SUBSAMP_CTR_7_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_7_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_7_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_7_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 7, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_7_PHASE_7_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_7_PHASE_7_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_7_PHASE_7_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_7_PHASE_7_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_7_PHASE_7_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 7, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_7_SKIP_COUNT_7_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_7_SKIP_COUNT_7_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_7_SKIP_COUNT_7_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_7_SKIP_COUNT_7_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_7_SKIP_COUNT_7_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_8 (0x440000cc) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 8.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_8_ADDR (0x440000cc)
#define IAXXX_AF_LS_SUBSAMP_CTR_8_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_8_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_8_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_8_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 8, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_8_PHASE_8_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_8_PHASE_8_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_8_PHASE_8_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_8_PHASE_8_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_8_PHASE_8_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 8, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_8_SKIP_COUNT_8_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_8_SKIP_COUNT_8_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_8_SKIP_COUNT_8_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_8_SKIP_COUNT_8_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_8_SKIP_COUNT_8_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_9 (0x440000d0) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 9.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_9_ADDR (0x440000d0)
#define IAXXX_AF_LS_SUBSAMP_CTR_9_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_9_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_9_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_9_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 9, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_9_PHASE_9_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_9_PHASE_9_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_9_PHASE_9_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_9_PHASE_9_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_9_PHASE_9_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 9, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_9_SKIP_COUNT_9_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_9_SKIP_COUNT_9_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_9_SKIP_COUNT_9_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_9_SKIP_COUNT_9_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_9_SKIP_COUNT_9_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_10 (0x440000d4) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 10.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_10_ADDR (0x440000d4)
#define IAXXX_AF_LS_SUBSAMP_CTR_10_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_10_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_10_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_10_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 10, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_10_PHASE_10_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_10_PHASE_10_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_10_PHASE_10_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_10_PHASE_10_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_10_PHASE_10_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 10, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_10_SKIP_COUNT_10_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_10_SKIP_COUNT_10_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_10_SKIP_COUNT_10_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_10_SKIP_COUNT_10_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_10_SKIP_COUNT_10_DECL (27:16)

/*** AF_LS_SUBSAMP_CTR_11 (0x440000d8) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 11.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_11_ADDR (0x440000d8)
#define IAXXX_AF_LS_SUBSAMP_CTR_11_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_11_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_11_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_11_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 11, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_11_PHASE_11_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_11_PHASE_11_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_11_PHASE_11_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_11_PHASE_11_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_11_PHASE_11_DECL (11:0)

/*
 * Usual PTSS ratio for Logical Stream 11, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_11_SKIP_COUNT_11_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_11_SKIP_COUNT_11_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_11_SKIP_COUNT_11_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_11_SKIP_COUNT_11_SIZE 12
#define IAXXX_AF_LS_SUBSAMP_CTR_11_SKIP_COUNT_11_DECL (27:16)

/*** AF_WCPT_ENABLE (0x440000ec) ***/
/*
 * When set, enables the Wall Clock, Presentation Time, and Processor Timer
 * subsystems.  When clear, these subsystems are disabled and consume minimal
 * power.  When enabled, the Wall Clock begins counting at time zero.
 */
#define IAXXX_AF_WCPT_ENABLE_ADDR (0x440000ec)
#define IAXXX_AF_WCPT_ENABLE_MASK_VAL 0x00000001
#define IAXXX_AF_WCPT_ENABLE_RMASK_VAL 0x00000001
#define IAXXX_AF_WCPT_ENABLE_WMASK_VAL 0x00000001
#define IAXXX_AF_WCPT_ENABLE_RESET_VAL 0x00000000

/*
 * Enable Wall Clock / PT unit.
 */
#define IAXXX_AF_WCPT_ENABLE_E_MASK 0x00000001
#define IAXXX_AF_WCPT_ENABLE_E_RESET_VAL 0x0
#define IAXXX_AF_WCPT_ENABLE_E_POS 0
#define IAXXX_AF_WCPT_ENABLE_E_SIZE 1
#define IAXXX_AF_WCPT_ENABLE_E_DECL 0

/*** AF_WCPT_MISC_CTRL (0x440000f0) ***/
/*
 * When set, the Wall Clock Master Counter will not increment.
 */
#define IAXXX_AF_WCPT_MISC_CTRL_ADDR (0x440000f0)
#define IAXXX_AF_WCPT_MISC_CTRL_MASK_VAL 0x00000001
#define IAXXX_AF_WCPT_MISC_CTRL_RMASK_VAL 0x00000001
#define IAXXX_AF_WCPT_MISC_CTRL_WMASK_VAL 0x00000001
#define IAXXX_AF_WCPT_MISC_CTRL_RESET_VAL 0x00000000

/*
 * Disable increment for Wall Clock Counter.
 */
#define IAXXX_AF_WCPT_MISC_CTRL_INC_DIS_MASK 0x00000001
#define IAXXX_AF_WCPT_MISC_CTRL_INC_DIS_RESET_VAL 0x0
#define IAXXX_AF_WCPT_MISC_CTRL_INC_DIS_POS 0
#define IAXXX_AF_WCPT_MISC_CTRL_INC_DIS_SIZE 1
#define IAXXX_AF_WCPT_MISC_CTRL_INC_DIS_DECL 0

/*** AF_WCPT_PROC_ENAB (0x440000f4) ***/
/*
 * When set, enables the corresponding Processor Presentation Timer
 * subsystem, allowing that processor to request a presentation time "time
 * stamp".  When clear, the subsystem is disabled and consumes minimal power.
 */
#define IAXXX_AF_WCPT_PROC_ENAB_ADDR (0x440000f4)
#define IAXXX_AF_WCPT_PROC_ENAB_MASK_VAL 0x00000003
#define IAXXX_AF_WCPT_PROC_ENAB_RMASK_VAL 0x00000003
#define IAXXX_AF_WCPT_PROC_ENAB_WMASK_VAL 0x00000003
#define IAXXX_AF_WCPT_PROC_ENAB_RESET_VAL 0x00000000

/*
 * Enable Processor Presentation Time for DMX.
 */
#define IAXXX_AF_WCPT_PROC_ENAB_E_0_MASK 0x00000001
#define IAXXX_AF_WCPT_PROC_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_AF_WCPT_PROC_ENAB_E_0_POS 0
#define IAXXX_AF_WCPT_PROC_ENAB_E_0_SIZE 1
#define IAXXX_AF_WCPT_PROC_ENAB_E_0_DECL 0

/*
 * Enable Processor Presentation Time for HMD.
 */
#define IAXXX_AF_WCPT_PROC_ENAB_E_1_MASK 0x00000002
#define IAXXX_AF_WCPT_PROC_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_AF_WCPT_PROC_ENAB_E_1_POS 1
#define IAXXX_AF_WCPT_PROC_ENAB_E_1_SIZE 1
#define IAXXX_AF_WCPT_PROC_ENAB_E_1_DECL 1

/*** AF_WCPT_DMX_PT_0 (0x440000f8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_WCPT_DMX_PT_0_ADDR (0x440000f8)
#define IAXXX_AF_WCPT_DMX_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_DMX_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_DMX_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_DMX_PT_0_RESET_VAL 0x00000000

/*
 * DMX Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_DMX_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_DMX_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_DMX_PT_0_VAL_POS 0
#define IAXXX_AF_WCPT_DMX_PT_0_VAL_SIZE 32
#define IAXXX_AF_WCPT_DMX_PT_0_VAL_DECL (31:0)

/*** AF_WCPT_DMX_PT_1 (0x440000fc) ***/
/*
 * When the status bit is 0, provides the Wall Clock value when the most
 * recent write by the DMX processor toggling the Processor Presentation Time
 * Stamp request bit occurred.  A write of any value to the register will
 * restore the status bit to 1 (invalid) to be ready for a subsequent
 * request.
 */
#define IAXXX_AF_WCPT_DMX_PT_1_ADDR (0x440000fc)
#define IAXXX_AF_WCPT_DMX_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_DMX_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_DMX_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_DMX_PT_1_RESET_VAL 0x80000000

/*
 * DMX Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_DMX_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_DMX_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_DMX_PT_1_VAL_POS 0
#define IAXXX_AF_WCPT_DMX_PT_1_VAL_SIZE 20
#define IAXXX_AF_WCPT_DMX_PT_1_VAL_DECL (19:0)

/*
 * DMX Presentation Time Stamp is invalid when set.  In addition, if set,
 * then the Presentation Time Stamp will not change, and any DMX processor
 * timestamp requests will be dropped.
 */
#define IAXXX_AF_WCPT_DMX_PT_1_STAT_MASK 0x80000000
#define IAXXX_AF_WCPT_DMX_PT_1_STAT_RESET_VAL 0x1
#define IAXXX_AF_WCPT_DMX_PT_1_STAT_POS 31
#define IAXXX_AF_WCPT_DMX_PT_1_STAT_SIZE 1
#define IAXXX_AF_WCPT_DMX_PT_1_STAT_DECL 31

/*** AF_WCPT_HMD_PT_0 (0x44000100) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_WCPT_HMD_PT_0_ADDR (0x44000100)
#define IAXXX_AF_WCPT_HMD_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_HMD_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_HMD_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_HMD_PT_0_RESET_VAL 0x00000000

/*
 * HMD Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_HMD_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_HMD_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_HMD_PT_0_VAL_POS 0
#define IAXXX_AF_WCPT_HMD_PT_0_VAL_SIZE 32
#define IAXXX_AF_WCPT_HMD_PT_0_VAL_DECL (31:0)

/*** AF_WCPT_HMD_PT_1 (0x44000104) ***/
/*
 * When the status bit is 0, provides the Wall Clock value when the most
 * recent write by the HMD processor toggling the Processor Presentation Time
 * Stamp request bit occurred.  A write of any value to the register will
 * restore the status bit to 1 (invalid) to be ready for a subsequent
 * request.
 */
#define IAXXX_AF_WCPT_HMD_PT_1_ADDR (0x44000104)
#define IAXXX_AF_WCPT_HMD_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_HMD_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_HMD_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_HMD_PT_1_RESET_VAL 0x80000000

/*
 * HMD Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_HMD_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_HMD_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_HMD_PT_1_VAL_POS 0
#define IAXXX_AF_WCPT_HMD_PT_1_VAL_SIZE 20
#define IAXXX_AF_WCPT_HMD_PT_1_VAL_DECL (19:0)

/*
 * HMD Presentation Time Stamp is invalid when set.  In addition, if set,
 * then the Presentation Time Stamp will not change, and any HMD processor
 * timestamp requests will be dropped.
 */
#define IAXXX_AF_WCPT_HMD_PT_1_STAT_MASK 0x80000000
#define IAXXX_AF_WCPT_HMD_PT_1_STAT_RESET_VAL 0x1
#define IAXXX_AF_WCPT_HMD_PT_1_STAT_POS 31
#define IAXXX_AF_WCPT_HMD_PT_1_STAT_SIZE 1
#define IAXXX_AF_WCPT_HMD_PT_1_STAT_DECL 31

/*** AF_WCPT_TIMER_ENAB (0x44000120) ***/
/*
 * When set, the corresponding Wall Clock based Timer is enabled.  When
 * clear, the function is disabled and minimal power is consumed.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_ADDR (0x44000120)
#define IAXXX_AF_WCPT_TIMER_ENAB_MASK_VAL 0x0000000f
#define IAXXX_AF_WCPT_TIMER_ENAB_RMASK_VAL 0x0000000f
#define IAXXX_AF_WCPT_TIMER_ENAB_WMASK_VAL 0x0000000f
#define IAXXX_AF_WCPT_TIMER_ENAB_RESET_VAL 0x00000000

/*
 * Wall Clock Timer 0 Enable.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_E_0_MASK 0x00000001
#define IAXXX_AF_WCPT_TIMER_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_0_POS 0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_0_SIZE 1
#define IAXXX_AF_WCPT_TIMER_ENAB_E_0_DECL 0

/*
 * Wall Clock Timer 1 Enable.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_E_1_MASK 0x00000002
#define IAXXX_AF_WCPT_TIMER_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_1_POS 1
#define IAXXX_AF_WCPT_TIMER_ENAB_E_1_SIZE 1
#define IAXXX_AF_WCPT_TIMER_ENAB_E_1_DECL 1

/*
 * Wall Clock Timer 2 Enable.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_E_2_MASK 0x00000004
#define IAXXX_AF_WCPT_TIMER_ENAB_E_2_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_2_POS 2
#define IAXXX_AF_WCPT_TIMER_ENAB_E_2_SIZE 1
#define IAXXX_AF_WCPT_TIMER_ENAB_E_2_DECL 2

/*
 * Wall Clock Timer 3 Enable.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_E_3_MASK 0x00000008
#define IAXXX_AF_WCPT_TIMER_ENAB_E_3_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_3_POS 3
#define IAXXX_AF_WCPT_TIMER_ENAB_E_3_SIZE 1
#define IAXXX_AF_WCPT_TIMER_ENAB_E_3_DECL 3

/*** AF_WCPT_TIMER_0 (0x44000124) ***/
/*
 * When written with a value corresponding to the LS 32 bits of a Wall Clock
 * value that will be achieved in the next 131 seconds, or that had been
 * achieved in the previous 43 seconds, a corresponding Wall Clock Timer
 * interrupt will be generated.  The interrupt will occur immediately for
 * values in the past, and at the time the Wall Clock achieves the written
 * value for values in the future.  Writing a new value while a previous
 * value is pending cancels pre-empts the previous interrupt request.
 * Reading the register always returns 0.
 */
#define IAXXX_AF_WCPT_TIMER_0_ADDR (0x44000124)
#define IAXXX_AF_WCPT_TIMER_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_0_RMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_TIMER_0_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_0_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (32 bits) for Timer 0
 */
#define IAXXX_AF_WCPT_TIMER_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_TIMER_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_0_VAL_POS 0
#define IAXXX_AF_WCPT_TIMER_0_VAL_SIZE 32
#define IAXXX_AF_WCPT_TIMER_0_VAL_DECL (31:0)

/*** AF_WCPT_TIMER_1 (0x44000128) ***/
/*
 * When written with a value corresponding to the LS 32 bits of a Wall Clock
 * value that will be achieved in the next 131 seconds, or that had been
 * achieved in the previous 43 seconds, a corresponding Wall Clock Timer
 * interrupt will be generated.  The interrupt will occur immediately for
 * values in the past, and at the time the Wall Clock achieves the written
 * value for values in the future.  Writing a new value while a previous
 * value is pending cancels pre-empts the previous interrupt request.
 * Reading the register always returns 0.
 */
#define IAXXX_AF_WCPT_TIMER_1_ADDR (0x44000128)
#define IAXXX_AF_WCPT_TIMER_1_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_1_RMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_TIMER_1_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_1_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (32 bits) for Timer 1
 */
#define IAXXX_AF_WCPT_TIMER_1_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_TIMER_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_1_VAL_POS 0
#define IAXXX_AF_WCPT_TIMER_1_VAL_SIZE 32
#define IAXXX_AF_WCPT_TIMER_1_VAL_DECL (31:0)

/*** AF_WCPT_TIMER_2 (0x4400012c) ***/
/*
 * When written with a value corresponding to the LS 32 bits of a Wall Clock
 * value that will be achieved in the next 131 seconds, or that had been
 * achieved in the previous 43 seconds, a corresponding Wall Clock Timer
 * interrupt will be generated.  The interrupt will occur immediately for
 * values in the past, and at the time the Wall Clock achieves the written
 * value for values in the future.  Writing a new value while a previous
 * value is pending cancels pre-empts the previous interrupt request.
 * Reading the register always returns 0.
 */
#define IAXXX_AF_WCPT_TIMER_2_ADDR (0x4400012c)
#define IAXXX_AF_WCPT_TIMER_2_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_2_RMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_TIMER_2_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_2_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (32 bits) for Timer 2
 */
#define IAXXX_AF_WCPT_TIMER_2_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_TIMER_2_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_2_VAL_POS 0
#define IAXXX_AF_WCPT_TIMER_2_VAL_SIZE 32
#define IAXXX_AF_WCPT_TIMER_2_VAL_DECL (31:0)

/*** AF_WCPT_TIMER_3 (0x44000130) ***/
/*
 * When written with a value corresponding to the LS 32 bits of a Wall Clock
 * value that will be achieved in the next 131 seconds, or that had been
 * achieved in the previous 43 seconds, a corresponding Wall Clock Timer
 * interrupt will be generated.  The interrupt will occur immediately for
 * values in the past, and at the time the Wall Clock achieves the written
 * value for values in the future.  Writing a new value while a previous
 * value is pending cancels pre-empts the previous interrupt request.
 * Reading the register always returns 0.
 */
#define IAXXX_AF_WCPT_TIMER_3_ADDR (0x44000130)
#define IAXXX_AF_WCPT_TIMER_3_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_3_RMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_TIMER_3_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_3_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (32 bits) for Timer 3
 */
#define IAXXX_AF_WCPT_TIMER_3_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_TIMER_3_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_3_VAL_POS 0
#define IAXXX_AF_WCPT_TIMER_3_VAL_SIZE 32
#define IAXXX_AF_WCPT_TIMER_3_VAL_DECL (31:0)

/*** AF_WCPT_SCALE (0x44000134) ***/
/*
 * Must be programmed in combination with the Wall Clock NR Divider Register
 * to accommodate the Audio Clock rate and keep the Wall Clock LS bit
 * corresponding to a toggle rate of 24.576 MHz.
 * If the wall clock is less than 3.072 MHz, then the 3.072MHz tic to the
 * deadline scheduler will be at the lower rate, so any time stamps need to
 * be adjusted.
 * Note that if we don't need time stamps, the CPT_ALWAYS_INC field in
 * MISC_CTRL allows the AF to operate deadlines based on AF clock rather then
 * the scaled 3.072 MHz tic from the wcpt unit.
 */
#define IAXXX_AF_WCPT_SCALE_ADDR (0x44000134)
#define IAXXX_AF_WCPT_SCALE_MASK_VAL 0x00000003
#define IAXXX_AF_WCPT_SCALE_RMASK_VAL 0x00000003
#define IAXXX_AF_WCPT_SCALE_WMASK_VAL 0x00000003
#define IAXXX_AF_WCPT_SCALE_RESET_VAL 0x00000000

/*
 * Post NR WCPT Clock Scaling Factor
 * The fields should be programmed according to this table:
 * 00 - Wall Clock is greater than or equal to 24.576 MHz.
 * 01 - Wall Clock is less than 24.546 MHz, but greater than or equal to
 * 12.288 MHz.
 * 10 - Wall Clock is less than 12.288 MHz, but greater than or equal to
 * 6.144  MHz.
 * 11 - Wall Clock is less than 6.144  MHz, but greater than or equal to
 * 3.0732 MHz.
 *
 Field encoding values:
 *   0x0: grtr_or_eq_to_24_576
 *   0x1: grtr_or_eq_to_12_288
 *   0x2: grtr_or_eq_to_6_144
 *   0x3: grtr_or_eq_to_3_072
 */
#define IAXXX_AF_WCPT_SCALE_VAL_MASK 0x00000003
#define IAXXX_AF_WCPT_SCALE_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_SCALE_VAL_POS 0
#define IAXXX_AF_WCPT_SCALE_VAL_SIZE 2
#define IAXXX_AF_WCPT_SCALE_VAL_DECL (1:0)

/*** AF_WCPT_WALL_CLOCK_0 (0x44000138) ***/
/*
 * See WCPT_WALL_CLOCK_1.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_0_ADDR (0x44000138)
#define IAXXX_AF_WCPT_WALL_CLOCK_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_0_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_0_RESET_VAL 0x00000000

/*
 * Wall Clock Value to write (Lower bits)
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_WALL_CLOCK_0_VAL_POS 0
#define IAXXX_AF_WCPT_WALL_CLOCK_0_VAL_SIZE 32
#define IAXXX_AF_WCPT_WALL_CLOCK_0_VAL_DECL (31:0)

/*** AF_WCPT_WALL_CLOCK_1 (0x4400013c) ***/
/*
 * Upper bits to write for the Wall Clock Value.  Writing this register
 * triggers the transfer.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_1_ADDR (0x4400013c)
#define IAXXX_AF_WCPT_WALL_CLOCK_1_MASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_1_RMASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_1_WMASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_1_RESET_VAL 0x00000000

/*
 * Wall Clock Value to write (Upper bits).  The write to this field triggers
 * the transfer of {WCPT_WALL_CLOCK_1, WCPT_WALL_CLOCK_0}.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_WALL_CLOCK_1_VAL_POS 0
#define IAXXX_AF_WCPT_WALL_CLOCK_1_VAL_SIZE 20
#define IAXXX_AF_WCPT_WALL_CLOCK_1_VAL_DECL (19:0)

/*** AF_WCPT_WALL_CLOCK_RD_0 (0x44000140) ***/
/*
 * Lower bits to read for the Wall Clock Value.  This readback path is for
 * debug only as it is unsynchronized.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_ADDR (0x44000140)
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_RESET_VAL 0x00000000

/*
 * Wall Clock Value to read (Lower bits)
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_VAL_POS 0
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_VAL_SIZE 32
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_VAL_DECL (31:0)

/*** AF_WCPT_WALL_CLOCK_RD_1 (0x44000144) ***/
/*
 * Upper bits to read for the Wall Clock Value.  This readback path is for
 * debug only as it is unsynchronized.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_ADDR (0x44000144)
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_MASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_RMASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_RESET_VAL 0x00000000

/*
 * Wall Clock Value to read (Upper bits).  The write to this field triggers
 * the transfer of {WCPT_WALL_CLOCK_1, WCPT_WALL_CLOCK_0}.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_VAL_POS 0
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_VAL_SIZE 20
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_VAL_DECL (19:0)

/*** AF_LS_AFS_FIFO_ERR_UNMASK (0x44000148) ***/
/*
 * Contains the unmask control for the AFS FIFO error flags for each logical
 * stream. These bits are ANDed with the corresponding RAW FIFO Error flags
 * to generate actual interrupts.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_ADDR (0x44000148)
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the AFS FIFO Error Condition for logical stream 0.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_0_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_0_DECL 0

/*
 * Unmask the AFS FIFO Error Condition for logical stream 1.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_1_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_1_DECL 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 2.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_2_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_2_DECL 2

/*
 * Unmask the AFS FIFO Error Condition for logical stream 3.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_3_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_3_DECL 3

/*
 * Unmask the AFS FIFO Error Condition for logical stream 4.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_4_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_4_DECL 4

/*
 * Unmask the AFS FIFO Error Condition for logical stream 5.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_5_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_5_DECL 5

/*
 * Unmask the AFS FIFO Error Condition for logical stream 6.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_6_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_6_DECL 6

/*
 * Unmask the AFS FIFO Error Condition for logical stream 7.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_7_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_7_DECL 7

/*
 * Unmask the AFS FIFO Error Condition for logical stream 8.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_8_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_8_DECL 8

/*
 * Unmask the AFS FIFO Error Condition for logical stream 9.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_9_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_9_DECL 9

/*
 * Unmask the AFS FIFO Error Condition for logical stream 10.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_10_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_10_DECL 10

/*
 * Unmask the AFS FIFO Error Condition for logical stream 11.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_11_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_11_DECL 11

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 0.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_0_MASK 0x00010000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_0_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_0_POS 16
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_0_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_0_DECL 16

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 1.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_1_MASK 0x00020000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_1_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_1_POS 17
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_1_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_1_DECL 17

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 2.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_2_MASK 0x00040000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_2_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_2_POS 18
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_2_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_2_DECL 18

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 3.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_3_MASK 0x00080000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_3_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_3_POS 19
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_3_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_3_DECL 19

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 4.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_4_MASK 0x00100000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_4_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_4_POS 20
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_4_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_4_DECL 20

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 5.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_5_MASK 0x00200000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_5_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_5_POS 21
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_5_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_5_DECL 21

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 6.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_6_MASK 0x00400000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_6_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_6_POS 22
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_6_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_6_DECL 22

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 7.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_7_MASK 0x00800000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_7_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_7_POS 23
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_7_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_7_DECL 23

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 8.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_8_MASK 0x01000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_8_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_8_POS 24
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_8_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_8_DECL 24

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 9.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_9_MASK 0x02000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_9_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_9_POS 25
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_9_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_9_DECL 25

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 10.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_10_MASK 0x04000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_10_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_10_POS 26
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_10_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_10_DECL 26

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 11.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_11_MASK 0x08000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_11_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_11_POS 27
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_11_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_11_DECL 27

/*** AF_LS_AFS_FIFO_ERR (0x4400014c) ***/
/*
 * Contains the (post-mask) latched (sticky bit) AFS FIFO error flags for
 * each logical streams.  AFS_FIFO_ERROR indicates, for RX logical streams,
 * "popping" an empty FIFO; for TX streams, "pushing" a full FIFO.
 * AFS_FIFO_OVERWRITE indicates TX logical streams only, a data write to a
 * full FIFO.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_ADDR (0x4400014c)
#define IAXXX_AF_LS_AFS_FIFO_ERR_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_AFS_FIFO_ERR_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_AFS_FIFO_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_RESET_VAL 0x00000000

/*
 * A AFS FIFO Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_0_POS 0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_0_DECL 0

/*
 * A AFS FIFO Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_1_POS 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_1_DECL 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_2_POS 2
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_2_DECL 2

/*
 * A AFS FIFO Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_3_POS 3
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_3_DECL 3

/*
 * A AFS FIFO Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_4_POS 4
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_4_DECL 4

/*
 * A AFS FIFO Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_5_POS 5
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_5_DECL 5

/*
 * A AFS FIFO Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_6_POS 6
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_6_DECL 6

/*
 * A AFS FIFO Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_7_POS 7
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_7_DECL 7

/*
 * A AFS FIFO Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_8_POS 8
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_8_DECL 8

/*
 * A AFS FIFO Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_9_POS 9
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_9_DECL 9

/*
 * A AFS FIFO Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_10_POS 10
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_10_DECL 10

/*
 * A AFS FIFO Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_11_POS 11
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_11_DECL 11

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_0_MASK 0x00010000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_0_POS 16
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_0_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_0_DECL 16

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_1_MASK 0x00020000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_1_POS 17
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_1_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_1_DECL 17

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_2_MASK 0x00040000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_2_POS 18
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_2_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_2_DECL 18

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_3_MASK 0x00080000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_3_POS 19
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_3_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_3_DECL 19

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_4_MASK 0x00100000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_4_POS 20
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_4_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_4_DECL 20

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_5_MASK 0x00200000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_5_POS 21
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_5_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_5_DECL 21

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_6_MASK 0x00400000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_6_POS 22
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_6_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_6_DECL 22

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_7_MASK 0x00800000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_7_POS 23
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_7_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_7_DECL 23

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_8_MASK 0x01000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_8_POS 24
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_8_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_8_DECL 24

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_9_MASK 0x02000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_9_POS 25
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_9_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_9_DECL 25

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_10_MASK 0x04000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_10_POS 26
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_10_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_10_DECL 26

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_11_MASK 0x08000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_11_POS 27
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_11_SIZE 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_11_DECL 27

/*** AF_LS_RAW_AFS_FIFO_ERR (0x44000150) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) AFS FIFO error flags for
 * each logical streams.  AFS_FIFO_ERROR indicates, for RX logical streams,
 * "popping" an empty FIFO; for TX streams, "pushing" a full FIFO.
 * AFS_FIFO_OVERWRITE indicates TX logical streams only, a data write to a
 * full FIFO.  A write of a "1" to any bit will clear that bit.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_ADDR (0x44000150)
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_RESET_VAL 0x00000000

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_0_DECL 0

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_1_DECL 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_2_DECL 2

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_3_DECL 3

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_4_DECL 4

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_5_DECL 5

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_6_DECL 6

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_7_DECL 7

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_8_DECL 8

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_9_DECL 9

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_10_DECL 10

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_11_DECL 11

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_0_MASK 0x00010000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_0_POS 16
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_0_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_0_DECL 16

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_1_MASK 0x00020000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_1_POS 17
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_1_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_1_DECL 17

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_2_MASK 0x00040000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_2_POS 18
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_2_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_2_DECL 18

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_3_MASK 0x00080000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_3_POS 19
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_3_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_3_DECL 19

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_4_MASK 0x00100000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_4_POS 20
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_4_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_4_DECL 20

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_5_MASK 0x00200000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_5_POS 21
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_5_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_5_DECL 21

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_6_MASK 0x00400000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_6_POS 22
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_6_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_6_DECL 22

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_7_MASK 0x00800000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_7_POS 23
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_7_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_7_DECL 23

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_8_MASK 0x01000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_8_POS 24
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_8_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_8_DECL 24

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_9_MASK 0x02000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_9_POS 25
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_9_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_9_DECL 25

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_10_MASK 0x04000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_10_POS 26
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_10_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_10_DECL 26

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_11_MASK 0x08000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_11_POS 27
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_11_SIZE 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_11_DECL 27

/*** AF_LS_TUS_FIFO_ERR_UNMASK (0x44000154) ***/
/*
 * Contains the unmask control for the TUS FIFO error flags for each logical
 * stream. These bits are ANDed with the corresponding RAW FIFO Error flags
 * to generate actual interrupts.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_ADDR (0x44000154)
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the TUS FIFO Error Condition for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_0_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_0_DECL 0

/*
 * Unmask the TUS FIFO Error Condition for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_1_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_1_DECL 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_2_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_2_DECL 2

/*
 * Unmask the TUS FIFO Error Condition for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_3_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_3_DECL 3

/*
 * Unmask the TUS FIFO Error Condition for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_4_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_4_DECL 4

/*
 * Unmask the TUS FIFO Error Condition for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_5_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_5_DECL 5

/*
 * Unmask the TUS FIFO Error Condition for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_6_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_6_DECL 6

/*
 * Unmask the TUS FIFO Error Condition for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_7_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_7_DECL 7

/*
 * Unmask the TUS FIFO Error Condition for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_8_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_8_DECL 8

/*
 * Unmask the TUS FIFO Error Condition for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_9_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_9_DECL 9

/*
 * Unmask the TUS FIFO Error Condition for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_10_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_10_DECL 10

/*
 * Unmask the TUS FIFO Error Condition for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_11_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_11_DECL 11

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_0_MASK 0x00010000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_0_POS 16
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_0_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_0_DECL 16

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_1_MASK 0x00020000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_1_POS 17
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_1_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_1_DECL 17

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_2_MASK 0x00040000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_2_POS 18
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_2_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_2_DECL 18

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_3_MASK 0x00080000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_3_POS 19
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_3_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_3_DECL 19

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_4_MASK 0x00100000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_4_POS 20
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_4_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_4_DECL 20

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_5_MASK 0x00200000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_5_POS 21
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_5_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_5_DECL 21

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_6_MASK 0x00400000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_6_POS 22
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_6_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_6_DECL 22

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_7_MASK 0x00800000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_7_POS 23
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_7_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_7_DECL 23

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_8_MASK 0x01000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_8_POS 24
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_8_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_8_DECL 24

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_9_MASK 0x02000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_9_POS 25
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_9_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_9_DECL 25

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_10_MASK 0x04000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_10_POS 26
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_10_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_10_DECL 26

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_11_MASK 0x08000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_11_POS 27
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_11_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_11_DECL 27

/*** AF_LS_TUS_FIFO_ERR (0x44000158) ***/
/*
 * Contains the (post-mask) latched (sticky bit) TUS FIFO error flags for
 * each logical streams.  TUS_FIFO_ERROR indicates, for TX logical streams,
 * "popping" an empty FIFO. TUS_FIFO_OVERWRITE indicates RX logical streams
 * only, a data write to a full FIFO.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_ADDR (0x44000158)
#define IAXXX_AF_LS_TUS_FIFO_ERR_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_TUS_FIFO_ERR_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_TUS_FIFO_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_RESET_VAL 0x00000000

/*
 * A TUS FIFO Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_0_POS 0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_0_DECL 0

/*
 * A TUS FIFO Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_1_POS 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_1_DECL 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_2_POS 2
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_2_DECL 2

/*
 * A TUS FIFO Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_3_POS 3
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_3_DECL 3

/*
 * A TUS FIFO Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_4_POS 4
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_4_DECL 4

/*
 * A TUS FIFO Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_5_POS 5
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_5_DECL 5

/*
 * A TUS FIFO Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_6_POS 6
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_6_DECL 6

/*
 * A TUS FIFO Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_7_POS 7
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_7_DECL 7

/*
 * A TUS FIFO Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_8_POS 8
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_8_DECL 8

/*
 * A TUS FIFO Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_9_POS 9
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_9_DECL 9

/*
 * A TUS FIFO Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_10_POS 10
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_10_DECL 10

/*
 * A TUS FIFO Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_11_POS 11
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_11_DECL 11

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_0_MASK 0x00010000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_0_POS 16
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_0_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_0_DECL 16

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_1_MASK 0x00020000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_1_POS 17
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_1_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_1_DECL 17

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_2_MASK 0x00040000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_2_POS 18
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_2_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_2_DECL 18

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_3_MASK 0x00080000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_3_POS 19
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_3_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_3_DECL 19

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_4_MASK 0x00100000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_4_POS 20
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_4_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_4_DECL 20

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_5_MASK 0x00200000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_5_POS 21
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_5_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_5_DECL 21

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_6_MASK 0x00400000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_6_POS 22
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_6_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_6_DECL 22

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_7_MASK 0x00800000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_7_POS 23
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_7_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_7_DECL 23

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_8_MASK 0x01000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_8_POS 24
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_8_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_8_DECL 24

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_9_MASK 0x02000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_9_POS 25
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_9_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_9_DECL 25

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_10_MASK 0x04000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_10_POS 26
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_10_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_10_DECL 26

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_11_MASK 0x08000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_11_POS 27
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_11_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_11_DECL 27

/*** AF_LS_RAW_TUS_FIFO_ERR (0x4400015c) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) TUS FIFO error flags for
 * each logical streams.  TUS_FIFO_ERROR indicates, for TX logical streams,
 * "popping" an empty FIFO. TUS_FIFO_OVERWRITE indicates RX logical streams
 * only, a data write to a full FIFO.  A write of a "1" to any bit will clear
 * that bit.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_ADDR (0x4400015c)
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_RESET_VAL 0x00000000

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_0_DECL 0

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_1_DECL 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_2_DECL 2

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_3_DECL 3

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_4_DECL 4

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_5_DECL 5

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_6_DECL 6

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_7_DECL 7

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_8_DECL 8

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_9_DECL 9

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_10_DECL 10

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_11_DECL 11

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_0_MASK 0x00010000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_0_POS 16
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_0_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_0_DECL 16

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_1_MASK 0x00020000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_1_POS 17
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_1_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_1_DECL 17

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_2_MASK 0x00040000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_2_POS 18
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_2_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_2_DECL 18

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_3_MASK 0x00080000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_3_POS 19
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_3_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_3_DECL 19

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_4_MASK 0x00100000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_4_POS 20
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_4_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_4_DECL 20

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_5_MASK 0x00200000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_5_POS 21
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_5_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_5_DECL 21

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_6_MASK 0x00400000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_6_POS 22
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_6_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_6_DECL 22

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_7_MASK 0x00800000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_7_POS 23
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_7_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_7_DECL 23

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_8_MASK 0x01000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_8_POS 24
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_8_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_8_DECL 24

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_9_MASK 0x02000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_9_POS 25
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_9_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_9_DECL 25

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_10_MASK 0x04000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_10_POS 26
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_10_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_10_DECL 26

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_11_MASK 0x08000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_11_POS 27
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_11_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_11_DECL 27

/*** AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK (0x44000160) ***/
/*
 * Contains the unmask control for the TUS FIFO Coherency error flags for
 * each logical stream. These bits are ANDed with the corresponding RAW TUS
 * FIFO Coherency error flags to generate actual interrupts.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_ADDR (0x44000160)
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_0_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_0_DECL 0

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_1_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_1_DECL 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_2_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_2_DECL 2

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_3_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_3_DECL 3

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_4_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_4_DECL 4

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_5_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_5_DECL 5

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_6_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_6_DECL 6

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_7_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_7_DECL 7

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_8_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_8_DECL 8

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_9_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_9_DECL 9

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_10_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_10_DECL 10

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_11_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_11_DECL 11

/*** AF_LS_TUS_FIFO_COHERENCY_ERR (0x44000164) ***/
/*
 * Contains the (post-mask) latched (sticky bit) TUS FIFO Coherency error
 * flag for each logical stream.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_ADDR (0x44000164)
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_RESET_VAL 0x00000000

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_0_POS 0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_0_DECL 0

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_1_POS 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_1_DECL 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_2_POS 2
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_2_DECL 2

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_3_POS 3
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_3_DECL 3

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_4_POS 4
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_4_DECL 4

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_5_POS 5
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_5_DECL 5

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_6_POS 6
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_6_DECL 6

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_7_POS 7
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_7_DECL 7

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_8_POS 8
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_8_DECL 8

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_9_POS 9
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_9_DECL 9

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_10_POS 10
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_10_DECL 10

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_11_POS 11
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_11_DECL 11

/*** AF_LS_RAW_TUS_FIFO_COHERENCY_ERR (0x44000168) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) TUS FIFO Coherency error
 * flag for each logical stream. A write of a '1' to any bit will clear that
 * bit.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_ADDR (0x44000168)
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_RESET_VAL 0x00000000

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 0.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_0_DECL 0

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 1.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_1_DECL 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 2.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_2_DECL 2

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 3.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_3_DECL 3

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 4.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_4_DECL 4

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 5.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_5_DECL 5

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 6.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_6_DECL 6

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 7.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_7_DECL 7

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 8.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_8_DECL 8

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 9.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_9_DECL 9

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 10.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_10_DECL 10

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 11.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_11_DECL 11

/*** AF_LS_DEADLINE_ERR_UNMASK (0x4400016c) ***/
/*
 * Contains the unmask control for the Deadline error flags for each logical
 * stream. These bits are ANDed with the corresponding RAW Deadline error
 * flags to generate actual interrupts.  These error conditions are for debug
 * use
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_ADDR (0x4400016c)
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the Deadline Not Met Condition for logical stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_0_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_0_DECL 0

/*
 * Unmask the Deadline Not Met Condition for logical stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_1_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_1_DECL 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_2_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_2_DECL 2

/*
 * Unmask the Deadline Not Met Condition for logical stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_3_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_3_DECL 3

/*
 * Unmask the Deadline Not Met Condition for logical stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_4_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_4_DECL 4

/*
 * Unmask the Deadline Not Met Condition for logical stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_5_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_5_DECL 5

/*
 * Unmask the Deadline Not Met Condition for logical stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_6_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_6_DECL 6

/*
 * Unmask the Deadline Not Met Condition for logical stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_7_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_7_DECL 7

/*
 * Unmask the Deadline Not Met Condition for logical stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_8_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_8_DECL 8

/*
 * Unmask the Deadline Not Met Condition for logical stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_9_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_9_DECL 9

/*
 * Unmask the Deadline Not Met Condition for logical stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_10_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_10_DECL 10

/*
 * Unmask the Deadline Not Met Condition for logical stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_11_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_11_DECL 11

/*** AF_LS_DEADLINE_ERR (0x44000170) ***/
/*
 * Contains the (post-mask) latched (sticky bit) Deadline error flag for each
 * logical streams.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_ADDR (0x44000170)
#define IAXXX_AF_LS_DEADLINE_ERR_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_DEADLINE_ERR_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_DEADLINE_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_DEADLINE_ERR_RESET_VAL 0x00000000

/*
 * A Deadline Not Met Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_DEADLINE_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_0_POS 0
#define IAXXX_AF_LS_DEADLINE_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_0_DECL 0

/*
 * A Deadline Not Met Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_DEADLINE_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_1_POS 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_1_DECL 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_DEADLINE_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_2_POS 2
#define IAXXX_AF_LS_DEADLINE_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_2_DECL 2

/*
 * A Deadline Not Met Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_DEADLINE_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_3_POS 3
#define IAXXX_AF_LS_DEADLINE_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_3_DECL 3

/*
 * A Deadline Not Met Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_DEADLINE_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_4_POS 4
#define IAXXX_AF_LS_DEADLINE_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_4_DECL 4

/*
 * A Deadline Not Met Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_DEADLINE_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_5_POS 5
#define IAXXX_AF_LS_DEADLINE_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_5_DECL 5

/*
 * A Deadline Not Met Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_DEADLINE_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_6_POS 6
#define IAXXX_AF_LS_DEADLINE_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_6_DECL 6

/*
 * A Deadline Not Met Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_DEADLINE_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_7_POS 7
#define IAXXX_AF_LS_DEADLINE_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_7_DECL 7

/*
 * A Deadline Not Met Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_DEADLINE_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_8_POS 8
#define IAXXX_AF_LS_DEADLINE_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_8_DECL 8

/*
 * A Deadline Not Met Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_DEADLINE_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_9_POS 9
#define IAXXX_AF_LS_DEADLINE_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_9_DECL 9

/*
 * A Deadline Not Met Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_DEADLINE_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_10_POS 10
#define IAXXX_AF_LS_DEADLINE_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_10_DECL 10

/*
 * A Deadline Not Met Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_DEADLINE_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_11_POS 11
#define IAXXX_AF_LS_DEADLINE_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_11_DECL 11

/*** AF_LS_RAW_DEADLINE_ERR (0x44000174) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) Deadline error flag for
 * each logical streams. A write of a '1' to any bit will clear that bit.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_ADDR (0x44000174)
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_RESET_VAL 0x00000000

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_0_DECL 0

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_1_DECL 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_2_DECL 2

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_3_DECL 3

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_4_DECL 4

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_5_DECL 5

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_6_DECL 6

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_7_DECL 7

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_8_DECL 8

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_9_DECL 9

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_10_DECL 10

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_11_DECL 11

/*** AF_LS_TIMEOUT_ERR_UNMASK (0x44000178) ***/
/*
 * Contains the unmask control for the Timeout error flags for each logical
 * stream. These bits are ANDed with the corresponding RAW Timeout error
 * flags to generate actual interrupts.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_ADDR (0x44000178)
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the Timeout Condition for logical stream 0.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_0_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_0_DECL 0

/*
 * Unmask the Timeout Condition for logical stream 1.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_1_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_1_DECL 1

/*
 * Unmask the Timeout Condition for logical stream 2.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_2_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_2_DECL 2

/*
 * Unmask the Timeout Condition for logical stream 3.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_3_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_3_DECL 3

/*
 * Unmask the Timeout Condition for logical stream 4.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_4_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_4_DECL 4

/*
 * Unmask the Timeout Condition for logical stream 5.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_5_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_5_DECL 5

/*
 * Unmask the Timeout Condition for logical stream 6.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_6_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_6_DECL 6

/*
 * Unmask the Timeout Condition for logical stream 7.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_7_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_7_DECL 7

/*
 * Unmask the Timeout Condition for logical stream 8.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_8_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_8_DECL 8

/*
 * Unmask the Timeout Condition for logical stream 9.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_9_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_9_DECL 9

/*
 * Unmask the Timeout Condition for logical stream 10.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_10_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_10_DECL 10

/*
 * Unmask the Timeout Condition for logical stream 11.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_11_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_11_DECL 11

/*** AF_LS_TIMEOUT_ERR (0x4400017c) ***/
/*
 * Contains the (post-mask) latched (sticky bit) Timeout error flag for each
 * logical streams.  Indicates that a new sample was not transferred by the
 * port within the selected timeout period.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_ADDR (0x4400017c)
#define IAXXX_AF_LS_TIMEOUT_ERR_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_ERR_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_TIMEOUT_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_TIMEOUT_ERR_RESET_VAL 0x00000000

/*
 * A Timeout Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_TIMEOUT_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_0_POS 0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_0_DECL 0

/*
 * A Timeout Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_TIMEOUT_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_1_POS 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_1_DECL 1

/*
 * A Timeout Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_TIMEOUT_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_2_POS 2
#define IAXXX_AF_LS_TIMEOUT_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_2_DECL 2

/*
 * A Timeout Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_TIMEOUT_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_3_POS 3
#define IAXXX_AF_LS_TIMEOUT_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_3_DECL 3

/*
 * A Timeout Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_TIMEOUT_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_4_POS 4
#define IAXXX_AF_LS_TIMEOUT_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_4_DECL 4

/*
 * A Timeout Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_TIMEOUT_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_5_POS 5
#define IAXXX_AF_LS_TIMEOUT_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_5_DECL 5

/*
 * A Timeout Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_TIMEOUT_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_6_POS 6
#define IAXXX_AF_LS_TIMEOUT_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_6_DECL 6

/*
 * A Timeout Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_TIMEOUT_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_7_POS 7
#define IAXXX_AF_LS_TIMEOUT_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_7_DECL 7

/*
 * A Timeout Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_TIMEOUT_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_8_POS 8
#define IAXXX_AF_LS_TIMEOUT_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_8_DECL 8

/*
 * A Timeout Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_TIMEOUT_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_9_POS 9
#define IAXXX_AF_LS_TIMEOUT_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_9_DECL 9

/*
 * A Timeout Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_TIMEOUT_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_10_POS 10
#define IAXXX_AF_LS_TIMEOUT_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_10_DECL 10

/*
 * A Timeout Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_TIMEOUT_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_11_POS 11
#define IAXXX_AF_LS_TIMEOUT_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_11_DECL 11

/*** AF_LS_RAW_TIMEOUT_ERR (0x44000180) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) Timeout error flag for
 * each logical streams.  Indicates that a new sample was not transferred by
 * the port within the selected timeout period.  A write of a '1' to any bit
 * will clear that bit.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_ADDR (0x44000180)
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_RESET_VAL 0x00000000

/*
 * A Raw Timeout Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_0_DECL 0

/*
 * A Raw Timeout Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_1_DECL 1

/*
 * A Raw Timeout Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_2_DECL 2

/*
 * A Raw Timeout Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_3_DECL 3

/*
 * A Raw Timeout Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_4_DECL 4

/*
 * A Raw Timeout Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_5_DECL 5

/*
 * A Raw Timeout Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_6_DECL 6

/*
 * A Raw Timeout Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_7_DECL 7

/*
 * A Raw Timeout Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_8_DECL 8

/*
 * A Raw Timeout Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_9_DECL 9

/*
 * A Raw Timeout Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_10_DECL 10

/*
 * A Raw Timeout Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_11_DECL 11

/*** AF_LS_PHY_ERR_UNMASK (0x44000184) ***/
/*
 * Contains the unmask control for the Phy error flags for each logical
 * stream (currently only available for pcm streams). These bits are ANDed
 * with the corresponding RAW Phy error flags to generate actual interrupts.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_ADDR (0x44000184)
#define IAXXX_AF_LS_PHY_ERR_UNMASK_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_PHY_ERR_UNMASK_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_PHY_ERR_UNMASK_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_PHY_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the Phy Error Condition for logical stream 0.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_0_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_0_DECL 0

/*
 * Unmask the Phy Error Condition for logical stream 1.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_1_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_1_DECL 1

/*
 * Unmask the Phy Error Condition for logical stream 2.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_2_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_2_DECL 2

/*
 * Unmask the Phy Error Condition for logical stream 3.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_3_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_3_DECL 3

/*
 * Unmask the Phy Error Condition for logical stream 4.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_4_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_4_DECL 4

/*
 * Unmask the Phy Error Condition for logical stream 5.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_5_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_5_DECL 5

/*
 * Unmask the Phy Error Condition for logical stream 6.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_6_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_6_DECL 6

/*
 * Unmask the Phy Error Condition for logical stream 7.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_7_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_7_DECL 7

/*
 * Unmask the Phy Error Condition for logical stream 8.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_8_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_8_DECL 8

/*
 * Unmask the Phy Error Condition for logical stream 9.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_9_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_9_DECL 9

/*
 * Unmask the Phy Error Condition for logical stream 10.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_10_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_10_DECL 10

/*
 * Unmask the Phy Error Condition for logical stream 11.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_11_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_11_DECL 11

/*** AF_LS_PHY_ERR (0x44000188) ***/
/*
 * Contains the (post-mask) latched (sticky bit) Phy error flag for each
 * logical stream (currently only available for pcm streams).  Indicates that
 * a new sample was not transferred by the port within the selected timeout
 * period.
 */
#define IAXXX_AF_LS_PHY_ERR_ADDR (0x44000188)
#define IAXXX_AF_LS_PHY_ERR_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_PHY_ERR_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_PHY_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_PHY_ERR_RESET_VAL 0x00000000

/*
 * A Phy Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_PHY_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_PHY_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_0_POS 0
#define IAXXX_AF_LS_PHY_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_0_DECL 0

/*
 * A Phy Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_PHY_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_PHY_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_1_POS 1
#define IAXXX_AF_LS_PHY_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_1_DECL 1

/*
 * A Phy Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_PHY_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_PHY_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_2_POS 2
#define IAXXX_AF_LS_PHY_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_2_DECL 2

/*
 * A Phy Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_PHY_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_PHY_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_3_POS 3
#define IAXXX_AF_LS_PHY_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_3_DECL 3

/*
 * A Phy Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_PHY_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_PHY_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_4_POS 4
#define IAXXX_AF_LS_PHY_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_4_DECL 4

/*
 * A Phy Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_PHY_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_PHY_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_5_POS 5
#define IAXXX_AF_LS_PHY_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_5_DECL 5

/*
 * A Phy Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_PHY_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_PHY_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_6_POS 6
#define IAXXX_AF_LS_PHY_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_6_DECL 6

/*
 * A Phy Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_PHY_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_PHY_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_7_POS 7
#define IAXXX_AF_LS_PHY_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_7_DECL 7

/*
 * A Phy Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_PHY_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_PHY_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_8_POS 8
#define IAXXX_AF_LS_PHY_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_8_DECL 8

/*
 * A Phy Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_PHY_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_PHY_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_9_POS 9
#define IAXXX_AF_LS_PHY_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_9_DECL 9

/*
 * A Phy Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_PHY_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_PHY_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_10_POS 10
#define IAXXX_AF_LS_PHY_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_10_DECL 10

/*
 * A Phy Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_PHY_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_PHY_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_11_POS 11
#define IAXXX_AF_LS_PHY_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_PHY_ERR_E_11_DECL 11

/*** AF_LS_RAW_PHY_ERR (0x4400018c) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) Phy error flag for each
 * logical stream (currently only available for pcm streams).  Indicates that
 * a new sample was not transferred by the port within the selected timeout
 * period.  A write of a '1' to any bit will clear that bit.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_ADDR (0x4400018c)
#define IAXXX_AF_LS_RAW_PHY_ERR_MASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_PHY_ERR_RMASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_PHY_ERR_WMASK_VAL 0x00000fff
#define IAXXX_AF_LS_RAW_PHY_ERR_RESET_VAL 0x00000000

/*
 * A Raw Phy Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_PHY_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_0_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_0_DECL 0

/*
 * A Raw Phy Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_PHY_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_1_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_1_DECL 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_PHY_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_PHY_ERR_E_2_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_2_DECL 2

/*
 * A Raw Phy Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_PHY_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_PHY_ERR_E_3_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_3_DECL 3

/*
 * A Raw Phy Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_PHY_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_PHY_ERR_E_4_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_4_DECL 4

/*
 * A Raw Phy Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_PHY_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_PHY_ERR_E_5_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_5_DECL 5

/*
 * A Raw Phy Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_PHY_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_PHY_ERR_E_6_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_6_DECL 6

/*
 * A Raw Phy Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_PHY_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_PHY_ERR_E_7_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_7_DECL 7

/*
 * A Raw Phy Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_PHY_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_PHY_ERR_E_8_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_8_DECL 8

/*
 * A Raw Phy Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_PHY_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_PHY_ERR_E_9_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_9_DECL 9

/*
 * A Raw Phy Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_PHY_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_PHY_ERR_E_10_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_10_DECL 10

/*
 * A Raw Phy Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_PHY_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_PHY_ERR_E_11_SIZE 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_11_DECL 11

/*** AF_LS_DEADLINE_LINE_DBG_A (0x44000190) ***/
/*
 * Debug state A for sm for ls 0 - 7.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_ADDR (0x44000190)
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_RESET_VAL 0x33333333

/*
 * The Deadline state machine line number for logical stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_0_MASK 0x0000000f
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_0_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_0_POS 0
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_0_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_0_DECL (3:0)

/*
 * The Deadline state machine line number for logical stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_1_MASK 0x000000f0
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_1_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_1_POS 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_1_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_1_DECL (7:4)

/*
 * The Deadline state machine line number for logical stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_2_MASK 0x00000f00
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_2_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_2_POS 8
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_2_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_2_DECL (11:8)

/*
 * The Deadline state machine line number for logical stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_3_MASK 0x0000f000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_3_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_3_POS 12
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_3_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_3_DECL (15:12)

/*
 * The Deadline state machine line number for logical stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_4_MASK 0x000f0000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_4_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_4_POS 16
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_4_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_4_DECL (19:16)

/*
 * The Deadline state machine line number for logical stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_5_MASK 0x00f00000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_5_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_5_POS 20
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_5_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_5_DECL (23:20)

/*
 * The Deadline state machine line number for logical stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_6_MASK 0x0f000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_6_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_6_POS 24
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_6_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_6_DECL (27:24)

/*
 * The Deadline state machine line number for logical stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_7_MASK 0xf0000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_7_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_7_POS 28
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_7_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_7_DECL (31:28)

/*** AF_LS_DEADLINE_LINE_DBG_B (0x44000194) ***/
/*
 * Debug state B for sm for ls 8 - 16.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_ADDR (0x44000194)
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_RESET_VAL 0x00003333

/*
 * The Deadline state machine line number for logical stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_8_MASK 0x0000000f
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_8_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_8_POS 0
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_8_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_8_DECL (3:0)

/*
 * The Deadline state machine line number for logical stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_9_MASK 0x000000f0
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_9_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_9_POS 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_9_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_9_DECL (7:4)

/*
 * The Deadline state machine line number for logical stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_10_MASK 0x00000f00
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_10_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_10_POS 8
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_10_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_10_DECL (11:8)

/*
 * The Deadline state machine line number for logical stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_11_MASK 0x0000f000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_11_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_11_POS 12
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_11_SIZE 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_11_DECL (15:12)

/*** AF_LS_DEADLINE_STATUS (0x44000198) ***/
/*
 * Contains the quiescent and urgent status for all logical streams (these
 * are the inputs to the deadline scheduler).
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_ADDR (0x44000198)
#define IAXXX_AF_LS_DEADLINE_STATUS_MASK_VAL 0x00ffffff
#define IAXXX_AF_LS_DEADLINE_STATUS_RMASK_VAL 0x00ffffff
#define IAXXX_AF_LS_DEADLINE_STATUS_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_DEADLINE_STATUS_RESET_VAL 0x00555555

/*
 * The Deadline state machine quiescent status for logical stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_0_MASK 0x00000001
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_0_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_0_POS 0
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_0_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_0_DECL 0

/*
 * The Deadline state machine urgent status for logical stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_0_MASK 0x00000002
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_0_POS 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_0_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_0_DECL 1

/*
 * The Deadline state machine quiescent status for logical stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_1_MASK 0x00000004
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_1_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_1_POS 2
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_1_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_1_DECL 2

/*
 * The Deadline state machine urgent status for logical stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_1_MASK 0x00000008
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_1_POS 3
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_1_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_1_DECL 3

/*
 * The Deadline state machine quiescent status for logical stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_2_MASK 0x00000010
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_2_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_2_POS 4
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_2_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_2_DECL 4

/*
 * The Deadline state machine urgent status for logical stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_2_MASK 0x00000020
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_2_POS 5
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_2_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_2_DECL 5

/*
 * The Deadline state machine quiescent status for logical stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_3_MASK 0x00000040
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_3_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_3_POS 6
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_3_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_3_DECL 6

/*
 * The Deadline state machine urgent status for logical stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_3_MASK 0x00000080
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_3_POS 7
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_3_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_3_DECL 7

/*
 * The Deadline state machine quiescent status for logical stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_4_MASK 0x00000100
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_4_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_4_POS 8
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_4_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_4_DECL 8

/*
 * The Deadline state machine urgent status for logical stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_4_MASK 0x00000200
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_4_POS 9
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_4_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_4_DECL 9

/*
 * The Deadline state machine quiescent status for logical stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_5_MASK 0x00000400
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_5_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_5_POS 10
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_5_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_5_DECL 10

/*
 * The Deadline state machine urgent status for logical stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_5_MASK 0x00000800
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_5_POS 11
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_5_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_5_DECL 11

/*
 * The Deadline state machine quiescent status for logical stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_6_MASK 0x00001000
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_6_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_6_POS 12
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_6_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_6_DECL 12

/*
 * The Deadline state machine urgent status for logical stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_6_MASK 0x00002000
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_6_POS 13
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_6_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_6_DECL 13

/*
 * The Deadline state machine quiescent status for logical stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_7_MASK 0x00004000
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_7_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_7_POS 14
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_7_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_7_DECL 14

/*
 * The Deadline state machine urgent status for logical stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_7_MASK 0x00008000
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_7_POS 15
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_7_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_7_DECL 15

/*
 * The Deadline state machine quiescent status for logical stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_8_MASK 0x00010000
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_8_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_8_POS 16
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_8_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_8_DECL 16

/*
 * The Deadline state machine urgent status for logical stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_8_MASK 0x00020000
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_8_POS 17
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_8_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_8_DECL 17

/*
 * The Deadline state machine quiescent status for logical stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_9_MASK 0x00040000
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_9_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_9_POS 18
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_9_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_9_DECL 18

/*
 * The Deadline state machine urgent status for logical stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_9_MASK 0x00080000
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_9_POS 19
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_9_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_9_DECL 19

/*
 * The Deadline state machine quiescent status for logical stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_10_MASK 0x00100000
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_10_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_10_POS 20
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_10_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_10_DECL 20

/*
 * The Deadline state machine urgent status for logical stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_10_MASK 0x00200000
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_10_POS 21
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_10_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_10_DECL 21

/*
 * The Deadline state machine quiescent status for logical stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_11_MASK 0x00400000
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_11_RESET_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_11_POS 22
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_11_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_QUIESCENT_11_DECL 22

/*
 * The Deadline state machine urgent status for logical stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_11_MASK 0x00800000
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_11_POS 23
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_11_SIZE 1
#define IAXXX_AF_LS_DEADLINE_STATUS_URGENT_11_DECL 23

/*** AF_H2X_MSTR_ACC (0x4400019c) ***/
/*
 * This register has the protection access registers.
 */
#define IAXXX_AF_H2X_MSTR_ACC_ADDR (0x4400019c)
#define IAXXX_AF_H2X_MSTR_ACC_MASK_VAL 0x000000f8
#define IAXXX_AF_H2X_MSTR_ACC_RMASK_VAL 0x000000f8
#define IAXXX_AF_H2X_MSTR_ACC_WMASK_VAL 0x00000078
#define IAXXX_AF_H2X_MSTR_ACC_RESET_VAL 0x00000080

/*
 * Controls HMD access to XLMI registers through AHB. 1 means access is
 * granted
 */
#define IAXXX_AF_H2X_MSTR_ACC_HMD_MASK 0x00000008
#define IAXXX_AF_H2X_MSTR_ACC_HMD_RESET_VAL 0x0
#define IAXXX_AF_H2X_MSTR_ACC_HMD_POS 3
#define IAXXX_AF_H2X_MSTR_ACC_HMD_SIZE 1
#define IAXXX_AF_H2X_MSTR_ACC_HMD_DECL 3

/*
 * Controls DMX access to XLMI registers through AHB. 1 means access is
 * granted
 */
#define IAXXX_AF_H2X_MSTR_ACC_DMX_MASK 0x00000010
#define IAXXX_AF_H2X_MSTR_ACC_DMX_RESET_VAL 0x0
#define IAXXX_AF_H2X_MSTR_ACC_DMX_POS 4
#define IAXXX_AF_H2X_MSTR_ACC_DMX_SIZE 1
#define IAXXX_AF_H2X_MSTR_ACC_DMX_DECL 4

/*
 * Controls DMA M0 access to XLMI registers through AHB. 1 means access is
 * granted
 */
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M0_MASK 0x00000020
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M0_RESET_VAL 0x0
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M0_POS 5
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M0_SIZE 1
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M0_DECL 5

/*
 * Controls DMA M1 access to XLMI registers through AHB. 1 means access is
 * granted
 */
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M1_MASK 0x00000040
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M1_RESET_VAL 0x0
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M1_POS 6
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M1_SIZE 1
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M1_DECL 6

/*
 * DAP master will always have access to XLMI registers
 */
#define IAXXX_AF_H2X_MSTR_ACC_DAP_MASK 0x00000080
#define IAXXX_AF_H2X_MSTR_ACC_DAP_RESET_VAL 0x1
#define IAXXX_AF_H2X_MSTR_ACC_DAP_POS 7
#define IAXXX_AF_H2X_MSTR_ACC_DAP_SIZE 1
#define IAXXX_AF_H2X_MSTR_ACC_DAP_DECL 7

/*** AF_ACC_ERR (0x440001a0) ***/
/*
 * This register has information on H2X accesses that have been denied
 */
#define IAXXX_AF_ACC_ERR_ADDR (0x440001a0)
#define IAXXX_AF_ACC_ERR_MASK_VAL 0x3ffe00f8
#define IAXXX_AF_ACC_ERR_RMASK_VAL 0x3ffe00f8
#define IAXXX_AF_ACC_ERR_WMASK_VAL 0x00000078
#define IAXXX_AF_ACC_ERR_RESET_VAL 0x00000000

/*
 * HMD access to AF registers has been denied as indicated by H2X_MSTR_ACC
 * register
 */
#define IAXXX_AF_ACC_ERR_HMD_MASK 0x00000008
#define IAXXX_AF_ACC_ERR_HMD_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_HMD_POS 3
#define IAXXX_AF_ACC_ERR_HMD_SIZE 1
#define IAXXX_AF_ACC_ERR_HMD_DECL 3

/*
 * DMX access to AF registers has been denied as indicated by H2X_MSTR_ACC
 * register
 */
#define IAXXX_AF_ACC_ERR_DMX_MASK 0x00000010
#define IAXXX_AF_ACC_ERR_DMX_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_DMX_POS 4
#define IAXXX_AF_ACC_ERR_DMX_SIZE 1
#define IAXXX_AF_ACC_ERR_DMX_DECL 4

/*
 * DMA Master 0 access to AF registers has been denied as indicated by
 * H2X_MSTR_ACC register
 */
#define IAXXX_AF_ACC_ERR_DMA_M0_MASK 0x00000020
#define IAXXX_AF_ACC_ERR_DMA_M0_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_DMA_M0_POS 5
#define IAXXX_AF_ACC_ERR_DMA_M0_SIZE 1
#define IAXXX_AF_ACC_ERR_DMA_M0_DECL 5

/*
 * DMA Master 1 access to AF registers has been denied as indicated by
 * H2X_MSTR_ACC register
 */
#define IAXXX_AF_ACC_ERR_DMA_M1_MASK 0x00000040
#define IAXXX_AF_ACC_ERR_DMA_M1_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_DMA_M1_POS 6
#define IAXXX_AF_ACC_ERR_DMA_M1_SIZE 1
#define IAXXX_AF_ACC_ERR_DMA_M1_DECL 6

/*
 * DAP accesses are always allowed and therefore this bit will never be set
 */
#define IAXXX_AF_ACC_ERR_DAP_MASK 0x00000080
#define IAXXX_AF_ACC_ERR_DAP_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_DAP_POS 7
#define IAXXX_AF_ACC_ERR_DAP_SIZE 1
#define IAXXX_AF_ACC_ERR_DAP_DECL 7

/*
 * Address for which access is denied (Address is trimmed according to AF reg
 * space; Hence contains only lower significant bits)
 */
#define IAXXX_AF_ACC_ERR_ADDRESS_MASK 0x3ffe0000
#define IAXXX_AF_ACC_ERR_ADDRESS_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_ADDRESS_POS 17
#define IAXXX_AF_ACC_ERR_ADDRESS_SIZE 13
#define IAXXX_AF_ACC_ERR_ADDRESS_DECL (29:17)

/*** AF_BACKGROUND_TASK1 (0x440001a4) ***/
/*
 * Any write to this register, regardless of data value, causes a Background
 * Task request 1 to be asserted by the Deadline Scheduler.  This request
 * will remain asserted until serviced by being popped from the TIE Priority
 * Queue1.  The register always reads 0.
 */
#define IAXXX_AF_BACKGROUND_TASK1_ADDR (0x440001a4)
#define IAXXX_AF_BACKGROUND_TASK1_MASK_VAL 0x00000001
#define IAXXX_AF_BACKGROUND_TASK1_RMASK_VAL 0x00000000
#define IAXXX_AF_BACKGROUND_TASK1_WMASK_VAL 0x00000001
#define IAXXX_AF_BACKGROUND_TASK1_RESET_VAL 0x00000000

/*
 * Write of any data requests a Background Task 1 (compare tree 1); always
 * reads 0.
 */
#define IAXXX_AF_BACKGROUND_TASK1_CT1_MASK 0x00000001
#define IAXXX_AF_BACKGROUND_TASK1_CT1_RESET_VAL 0x0
#define IAXXX_AF_BACKGROUND_TASK1_CT1_POS 0
#define IAXXX_AF_BACKGROUND_TASK1_CT1_SIZE 1
#define IAXXX_AF_BACKGROUND_TASK1_CT1_DECL 0

/*** AF_SPARE_GATES_AF_0 (0x440001a8) ***/
/*
 * This is a dummy register which is tied to the spare_gates module. It does
 * not serve any functional purpose.
 */
#define IAXXX_AF_SPARE_GATES_AF_0_ADDR (0x440001a8)
#define IAXXX_AF_SPARE_GATES_AF_0_MASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_AF_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_AF_0_WMASK_VAL 0x0000ffff
#define IAXXX_AF_SPARE_GATES_AF_0_RESET_VAL 0x00000000

/*
 * Dummy field whose output goes in to the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_1_MASK 0x0000ffff
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_1_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_1_POS 0
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_1_SIZE 16
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_1_DECL (15:0)

/*
 * Dummy field which reads the output of the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_2_MASK 0xffff0000
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_2_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_2_POS 16
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_2_SIZE 16
#define IAXXX_AF_SPARE_GATES_AF_0_FIELD_2_DECL (31:16)

/*** AF_SPARE_GATES_AF_1 (0x440001ac) ***/
/*
 * This is a dummy register which is tied to the spare_gates module. It does
 * not serve any functional purpose.
 */
#define IAXXX_AF_SPARE_GATES_AF_1_ADDR (0x440001ac)
#define IAXXX_AF_SPARE_GATES_AF_1_MASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_AF_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_AF_1_WMASK_VAL 0x0000ffff
#define IAXXX_AF_SPARE_GATES_AF_1_RESET_VAL 0x00000000

/*
 * Dummy field whose output goes in to the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_1_MASK 0x0000ffff
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_1_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_1_POS 0
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_1_SIZE 16
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_1_DECL (15:0)

/*
 * Dummy field which reads the output of the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_2_MASK 0xffff0000
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_2_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_2_POS 16
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_2_SIZE 16
#define IAXXX_AF_SPARE_GATES_AF_1_FIELD_2_DECL (31:16)

/*** AF_SPARE_GATES_WCPT (0x440001b0) ***/
/*
 * This is a dummy register which is tied to the spare_gates module. It does
 * not serve any functional purpose.
 */
#define IAXXX_AF_SPARE_GATES_WCPT_ADDR (0x440001b0)
#define IAXXX_AF_SPARE_GATES_WCPT_MASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_WCPT_RMASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_WCPT_WMASK_VAL 0x0000ffff
#define IAXXX_AF_SPARE_GATES_WCPT_RESET_VAL 0x00000000

/*
 * Dummy field whose output goes in to the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_1_MASK 0x0000ffff
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_1_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_1_POS 0
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_1_SIZE 16
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_1_DECL (15:0)

/*
 * Dummy field which reads the output of the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_2_MASK 0xffff0000
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_2_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_2_POS 16
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_2_SIZE 16
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_2_DECL (31:16)

/*** AF_LS_0_CNL_0 (0x44000800) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_0_ADDR (0x44000800)
#define IAXXX_AF_LS_0_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_0_LS0_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_0_LS0_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_0_LS0_CH_0_POS 0
#define IAXXX_AF_LS_0_CNL_0_LS0_CH_0_SIZE 32
#define IAXXX_AF_LS_0_CNL_0_LS0_CH_0_DECL (31:0)

/*** AF_LS_0_CNL_1 (0x44000804) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_1_ADDR (0x44000804)
#define IAXXX_AF_LS_0_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_1_LS0_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_1_LS0_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_1_LS0_CH_1_POS 0
#define IAXXX_AF_LS_0_CNL_1_LS0_CH_1_SIZE 32
#define IAXXX_AF_LS_0_CNL_1_LS0_CH_1_DECL (31:0)

/*** AF_LS_0_CNL_2 (0x44000808) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_2_ADDR (0x44000808)
#define IAXXX_AF_LS_0_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_2_LS0_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_2_LS0_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_2_LS0_CH_2_POS 0
#define IAXXX_AF_LS_0_CNL_2_LS0_CH_2_SIZE 32
#define IAXXX_AF_LS_0_CNL_2_LS0_CH_2_DECL (31:0)

/*** AF_LS_0_CNL_3 (0x4400080c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_3_ADDR (0x4400080c)
#define IAXXX_AF_LS_0_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_3_LS0_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_3_LS0_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_3_LS0_CH_3_POS 0
#define IAXXX_AF_LS_0_CNL_3_LS0_CH_3_SIZE 32
#define IAXXX_AF_LS_0_CNL_3_LS0_CH_3_DECL (31:0)

/*** AF_LS_0_RESERVED_0 (0x44000810) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_0_ADDR (0x44000810)
#define IAXXX_AF_LS_0_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_1 (0x44000814) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_1_ADDR (0x44000814)
#define IAXXX_AF_LS_0_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_2 (0x44000818) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_2_ADDR (0x44000818)
#define IAXXX_AF_LS_0_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_3 (0x4400081c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_3_ADDR (0x4400081c)
#define IAXXX_AF_LS_0_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_4 (0x44000820) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_4_ADDR (0x44000820)
#define IAXXX_AF_LS_0_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_5 (0x44000824) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_5_ADDR (0x44000824)
#define IAXXX_AF_LS_0_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_6 (0x44000828) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_6_ADDR (0x44000828)
#define IAXXX_AF_LS_0_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_7 (0x4400082c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_7_ADDR (0x4400082c)
#define IAXXX_AF_LS_0_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_8 (0x44000830) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_8_ADDR (0x44000830)
#define IAXXX_AF_LS_0_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_9 (0x44000834) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_9_ADDR (0x44000834)
#define IAXXX_AF_LS_0_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_10 (0x44000838) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_10_ADDR (0x44000838)
#define IAXXX_AF_LS_0_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_11 (0x4400083c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_11_ADDR (0x4400083c)
#define IAXXX_AF_LS_0_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_12 (0x44000840) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_12_ADDR (0x44000840)
#define IAXXX_AF_LS_0_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_13 (0x44000844) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_13_ADDR (0x44000844)
#define IAXXX_AF_LS_0_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_14 (0x44000848) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_14_ADDR (0x44000848)
#define IAXXX_AF_LS_0_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_15 (0x4400084c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_15_ADDR (0x4400084c)
#define IAXXX_AF_LS_0_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_16 (0x44000850) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_16_ADDR (0x44000850)
#define IAXXX_AF_LS_0_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_17 (0x44000854) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_17_ADDR (0x44000854)
#define IAXXX_AF_LS_0_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_18 (0x44000858) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_18_ADDR (0x44000858)
#define IAXXX_AF_LS_0_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_19 (0x4400085c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_19_ADDR (0x4400085c)
#define IAXXX_AF_LS_0_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_20 (0x44000860) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_20_ADDR (0x44000860)
#define IAXXX_AF_LS_0_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_21 (0x44000864) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_21_ADDR (0x44000864)
#define IAXXX_AF_LS_0_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_22 (0x44000868) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_22_ADDR (0x44000868)
#define IAXXX_AF_LS_0_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_23 (0x4400086c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_23_ADDR (0x4400086c)
#define IAXXX_AF_LS_0_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_24 (0x44000870) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_24_ADDR (0x44000870)
#define IAXXX_AF_LS_0_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_25 (0x44000874) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_25_ADDR (0x44000874)
#define IAXXX_AF_LS_0_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_0_PT_0 (0x44000878) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_0_PT_0_ADDR (0x44000878)
#define IAXXX_AF_LS_0_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_0_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_0_PT_0_VAL_POS 0
#define IAXXX_AF_LS_0_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_0_PT_0_VAL_DECL (31:0)

/*** AF_LS_0_PT_1 (0x4400087c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 0,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_0_PT_1_ADDR (0x4400087c)
#define IAXXX_AF_LS_0_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_0_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_0_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_0_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_0_PT_1_VAL_POS 0
#define IAXXX_AF_LS_0_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_0_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[0] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_0_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_0_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_0_PT_1_VLD_POS 31
#define IAXXX_AF_LS_0_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_0_PT_1_VLD_DECL 31

/*** AF_LS_1_CNL_0 (0x44000880) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_0_ADDR (0x44000880)
#define IAXXX_AF_LS_1_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_0_LS1_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_0_LS1_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_0_LS1_CH_0_POS 0
#define IAXXX_AF_LS_1_CNL_0_LS1_CH_0_SIZE 32
#define IAXXX_AF_LS_1_CNL_0_LS1_CH_0_DECL (31:0)

/*** AF_LS_1_CNL_1 (0x44000884) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_1_ADDR (0x44000884)
#define IAXXX_AF_LS_1_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_1_LS1_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_1_LS1_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_1_LS1_CH_1_POS 0
#define IAXXX_AF_LS_1_CNL_1_LS1_CH_1_SIZE 32
#define IAXXX_AF_LS_1_CNL_1_LS1_CH_1_DECL (31:0)

/*** AF_LS_1_CNL_2 (0x44000888) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_2_ADDR (0x44000888)
#define IAXXX_AF_LS_1_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_2_LS1_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_2_LS1_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_2_LS1_CH_2_POS 0
#define IAXXX_AF_LS_1_CNL_2_LS1_CH_2_SIZE 32
#define IAXXX_AF_LS_1_CNL_2_LS1_CH_2_DECL (31:0)

/*** AF_LS_1_CNL_3 (0x4400088c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_3_ADDR (0x4400088c)
#define IAXXX_AF_LS_1_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_3_LS1_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_3_LS1_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_3_LS1_CH_3_POS 0
#define IAXXX_AF_LS_1_CNL_3_LS1_CH_3_SIZE 32
#define IAXXX_AF_LS_1_CNL_3_LS1_CH_3_DECL (31:0)

/*** AF_LS_1_RESERVED_0 (0x44000890) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_0_ADDR (0x44000890)
#define IAXXX_AF_LS_1_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_1 (0x44000894) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_1_ADDR (0x44000894)
#define IAXXX_AF_LS_1_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_2 (0x44000898) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_2_ADDR (0x44000898)
#define IAXXX_AF_LS_1_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_3 (0x4400089c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_3_ADDR (0x4400089c)
#define IAXXX_AF_LS_1_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_4 (0x440008a0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_4_ADDR (0x440008a0)
#define IAXXX_AF_LS_1_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_5 (0x440008a4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_5_ADDR (0x440008a4)
#define IAXXX_AF_LS_1_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_6 (0x440008a8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_6_ADDR (0x440008a8)
#define IAXXX_AF_LS_1_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_7 (0x440008ac) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_7_ADDR (0x440008ac)
#define IAXXX_AF_LS_1_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_8 (0x440008b0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_8_ADDR (0x440008b0)
#define IAXXX_AF_LS_1_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_9 (0x440008b4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_9_ADDR (0x440008b4)
#define IAXXX_AF_LS_1_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_10 (0x440008b8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_10_ADDR (0x440008b8)
#define IAXXX_AF_LS_1_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_11 (0x440008bc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_11_ADDR (0x440008bc)
#define IAXXX_AF_LS_1_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_12 (0x440008c0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_12_ADDR (0x440008c0)
#define IAXXX_AF_LS_1_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_13 (0x440008c4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_13_ADDR (0x440008c4)
#define IAXXX_AF_LS_1_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_14 (0x440008c8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_14_ADDR (0x440008c8)
#define IAXXX_AF_LS_1_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_15 (0x440008cc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_15_ADDR (0x440008cc)
#define IAXXX_AF_LS_1_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_16 (0x440008d0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_16_ADDR (0x440008d0)
#define IAXXX_AF_LS_1_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_17 (0x440008d4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_17_ADDR (0x440008d4)
#define IAXXX_AF_LS_1_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_18 (0x440008d8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_18_ADDR (0x440008d8)
#define IAXXX_AF_LS_1_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_19 (0x440008dc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_19_ADDR (0x440008dc)
#define IAXXX_AF_LS_1_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_20 (0x440008e0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_20_ADDR (0x440008e0)
#define IAXXX_AF_LS_1_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_21 (0x440008e4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_21_ADDR (0x440008e4)
#define IAXXX_AF_LS_1_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_22 (0x440008e8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_22_ADDR (0x440008e8)
#define IAXXX_AF_LS_1_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_23 (0x440008ec) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_23_ADDR (0x440008ec)
#define IAXXX_AF_LS_1_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_24 (0x440008f0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_24_ADDR (0x440008f0)
#define IAXXX_AF_LS_1_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_25 (0x440008f4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_25_ADDR (0x440008f4)
#define IAXXX_AF_LS_1_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_1_PT_0 (0x440008f8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_1_PT_0_ADDR (0x440008f8)
#define IAXXX_AF_LS_1_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_1_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_1_PT_0_VAL_POS 0
#define IAXXX_AF_LS_1_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_1_PT_0_VAL_DECL (31:0)

/*** AF_LS_1_PT_1 (0x440008fc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 1,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_1_PT_1_ADDR (0x440008fc)
#define IAXXX_AF_LS_1_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_1_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_1_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_1_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_1_PT_1_VAL_POS 0
#define IAXXX_AF_LS_1_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_1_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[1] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_1_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_1_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_1_PT_1_VLD_POS 31
#define IAXXX_AF_LS_1_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_1_PT_1_VLD_DECL 31

/*** AF_LS_2_CNL_0 (0x44000900) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_0_ADDR (0x44000900)
#define IAXXX_AF_LS_2_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_0_LS2_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_0_LS2_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_0_LS2_CH_0_POS 0
#define IAXXX_AF_LS_2_CNL_0_LS2_CH_0_SIZE 32
#define IAXXX_AF_LS_2_CNL_0_LS2_CH_0_DECL (31:0)

/*** AF_LS_2_CNL_1 (0x44000904) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_1_ADDR (0x44000904)
#define IAXXX_AF_LS_2_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_1_LS2_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_1_LS2_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_1_LS2_CH_1_POS 0
#define IAXXX_AF_LS_2_CNL_1_LS2_CH_1_SIZE 32
#define IAXXX_AF_LS_2_CNL_1_LS2_CH_1_DECL (31:0)

/*** AF_LS_2_CNL_2 (0x44000908) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_2_ADDR (0x44000908)
#define IAXXX_AF_LS_2_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_2_LS2_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_2_LS2_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_2_LS2_CH_2_POS 0
#define IAXXX_AF_LS_2_CNL_2_LS2_CH_2_SIZE 32
#define IAXXX_AF_LS_2_CNL_2_LS2_CH_2_DECL (31:0)

/*** AF_LS_2_CNL_3 (0x4400090c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_3_ADDR (0x4400090c)
#define IAXXX_AF_LS_2_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_3_LS2_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_3_LS2_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_3_LS2_CH_3_POS 0
#define IAXXX_AF_LS_2_CNL_3_LS2_CH_3_SIZE 32
#define IAXXX_AF_LS_2_CNL_3_LS2_CH_3_DECL (31:0)

/*** AF_LS_2_RESERVED_0 (0x44000910) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_0_ADDR (0x44000910)
#define IAXXX_AF_LS_2_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_1 (0x44000914) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_1_ADDR (0x44000914)
#define IAXXX_AF_LS_2_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_2 (0x44000918) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_2_ADDR (0x44000918)
#define IAXXX_AF_LS_2_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_3 (0x4400091c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_3_ADDR (0x4400091c)
#define IAXXX_AF_LS_2_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_4 (0x44000920) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_4_ADDR (0x44000920)
#define IAXXX_AF_LS_2_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_5 (0x44000924) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_5_ADDR (0x44000924)
#define IAXXX_AF_LS_2_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_6 (0x44000928) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_6_ADDR (0x44000928)
#define IAXXX_AF_LS_2_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_7 (0x4400092c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_7_ADDR (0x4400092c)
#define IAXXX_AF_LS_2_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_8 (0x44000930) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_8_ADDR (0x44000930)
#define IAXXX_AF_LS_2_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_9 (0x44000934) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_9_ADDR (0x44000934)
#define IAXXX_AF_LS_2_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_10 (0x44000938) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_10_ADDR (0x44000938)
#define IAXXX_AF_LS_2_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_11 (0x4400093c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_11_ADDR (0x4400093c)
#define IAXXX_AF_LS_2_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_12 (0x44000940) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_12_ADDR (0x44000940)
#define IAXXX_AF_LS_2_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_13 (0x44000944) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_13_ADDR (0x44000944)
#define IAXXX_AF_LS_2_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_14 (0x44000948) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_14_ADDR (0x44000948)
#define IAXXX_AF_LS_2_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_15 (0x4400094c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_15_ADDR (0x4400094c)
#define IAXXX_AF_LS_2_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_16 (0x44000950) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_16_ADDR (0x44000950)
#define IAXXX_AF_LS_2_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_17 (0x44000954) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_17_ADDR (0x44000954)
#define IAXXX_AF_LS_2_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_18 (0x44000958) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_18_ADDR (0x44000958)
#define IAXXX_AF_LS_2_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_19 (0x4400095c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_19_ADDR (0x4400095c)
#define IAXXX_AF_LS_2_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_20 (0x44000960) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_20_ADDR (0x44000960)
#define IAXXX_AF_LS_2_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_21 (0x44000964) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_21_ADDR (0x44000964)
#define IAXXX_AF_LS_2_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_22 (0x44000968) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_22_ADDR (0x44000968)
#define IAXXX_AF_LS_2_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_23 (0x4400096c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_23_ADDR (0x4400096c)
#define IAXXX_AF_LS_2_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_24 (0x44000970) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_24_ADDR (0x44000970)
#define IAXXX_AF_LS_2_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_25 (0x44000974) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_25_ADDR (0x44000974)
#define IAXXX_AF_LS_2_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_2_PT_0 (0x44000978) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_2_PT_0_ADDR (0x44000978)
#define IAXXX_AF_LS_2_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_2_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_2_PT_0_VAL_POS 0
#define IAXXX_AF_LS_2_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_2_PT_0_VAL_DECL (31:0)

/*** AF_LS_2_PT_1 (0x4400097c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 2,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_2_PT_1_ADDR (0x4400097c)
#define IAXXX_AF_LS_2_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_2_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_2_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_2_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_2_PT_1_VAL_POS 0
#define IAXXX_AF_LS_2_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_2_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[2] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_2_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_2_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_2_PT_1_VLD_POS 31
#define IAXXX_AF_LS_2_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_2_PT_1_VLD_DECL 31

/*** AF_LS_3_CNL_0 (0x44000980) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_0_ADDR (0x44000980)
#define IAXXX_AF_LS_3_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_0_LS3_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_0_LS3_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_0_LS3_CH_0_POS 0
#define IAXXX_AF_LS_3_CNL_0_LS3_CH_0_SIZE 32
#define IAXXX_AF_LS_3_CNL_0_LS3_CH_0_DECL (31:0)

/*** AF_LS_3_CNL_1 (0x44000984) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_1_ADDR (0x44000984)
#define IAXXX_AF_LS_3_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_1_LS3_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_1_LS3_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_1_LS3_CH_1_POS 0
#define IAXXX_AF_LS_3_CNL_1_LS3_CH_1_SIZE 32
#define IAXXX_AF_LS_3_CNL_1_LS3_CH_1_DECL (31:0)

/*** AF_LS_3_CNL_2 (0x44000988) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_2_ADDR (0x44000988)
#define IAXXX_AF_LS_3_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_2_LS3_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_2_LS3_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_2_LS3_CH_2_POS 0
#define IAXXX_AF_LS_3_CNL_2_LS3_CH_2_SIZE 32
#define IAXXX_AF_LS_3_CNL_2_LS3_CH_2_DECL (31:0)

/*** AF_LS_3_CNL_3 (0x4400098c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_3_ADDR (0x4400098c)
#define IAXXX_AF_LS_3_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_3_LS3_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_3_LS3_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_3_LS3_CH_3_POS 0
#define IAXXX_AF_LS_3_CNL_3_LS3_CH_3_SIZE 32
#define IAXXX_AF_LS_3_CNL_3_LS3_CH_3_DECL (31:0)

/*** AF_LS_3_RESERVED_0 (0x44000990) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_0_ADDR (0x44000990)
#define IAXXX_AF_LS_3_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_1 (0x44000994) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_1_ADDR (0x44000994)
#define IAXXX_AF_LS_3_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_2 (0x44000998) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_2_ADDR (0x44000998)
#define IAXXX_AF_LS_3_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_3 (0x4400099c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_3_ADDR (0x4400099c)
#define IAXXX_AF_LS_3_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_4 (0x440009a0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_4_ADDR (0x440009a0)
#define IAXXX_AF_LS_3_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_5 (0x440009a4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_5_ADDR (0x440009a4)
#define IAXXX_AF_LS_3_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_6 (0x440009a8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_6_ADDR (0x440009a8)
#define IAXXX_AF_LS_3_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_7 (0x440009ac) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_7_ADDR (0x440009ac)
#define IAXXX_AF_LS_3_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_8 (0x440009b0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_8_ADDR (0x440009b0)
#define IAXXX_AF_LS_3_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_9 (0x440009b4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_9_ADDR (0x440009b4)
#define IAXXX_AF_LS_3_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_10 (0x440009b8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_10_ADDR (0x440009b8)
#define IAXXX_AF_LS_3_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_11 (0x440009bc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_11_ADDR (0x440009bc)
#define IAXXX_AF_LS_3_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_12 (0x440009c0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_12_ADDR (0x440009c0)
#define IAXXX_AF_LS_3_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_13 (0x440009c4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_13_ADDR (0x440009c4)
#define IAXXX_AF_LS_3_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_14 (0x440009c8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_14_ADDR (0x440009c8)
#define IAXXX_AF_LS_3_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_15 (0x440009cc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_15_ADDR (0x440009cc)
#define IAXXX_AF_LS_3_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_16 (0x440009d0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_16_ADDR (0x440009d0)
#define IAXXX_AF_LS_3_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_17 (0x440009d4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_17_ADDR (0x440009d4)
#define IAXXX_AF_LS_3_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_18 (0x440009d8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_18_ADDR (0x440009d8)
#define IAXXX_AF_LS_3_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_19 (0x440009dc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_19_ADDR (0x440009dc)
#define IAXXX_AF_LS_3_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_20 (0x440009e0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_20_ADDR (0x440009e0)
#define IAXXX_AF_LS_3_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_21 (0x440009e4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_21_ADDR (0x440009e4)
#define IAXXX_AF_LS_3_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_22 (0x440009e8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_22_ADDR (0x440009e8)
#define IAXXX_AF_LS_3_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_23 (0x440009ec) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_23_ADDR (0x440009ec)
#define IAXXX_AF_LS_3_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_24 (0x440009f0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_24_ADDR (0x440009f0)
#define IAXXX_AF_LS_3_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_25 (0x440009f4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_25_ADDR (0x440009f4)
#define IAXXX_AF_LS_3_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_3_PT_0 (0x440009f8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_3_PT_0_ADDR (0x440009f8)
#define IAXXX_AF_LS_3_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_3_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_3_PT_0_VAL_POS 0
#define IAXXX_AF_LS_3_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_3_PT_0_VAL_DECL (31:0)

/*** AF_LS_3_PT_1 (0x440009fc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 3,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_3_PT_1_ADDR (0x440009fc)
#define IAXXX_AF_LS_3_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_3_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_3_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_3_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_3_PT_1_VAL_POS 0
#define IAXXX_AF_LS_3_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_3_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[3] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_3_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_3_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_3_PT_1_VLD_POS 31
#define IAXXX_AF_LS_3_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_3_PT_1_VLD_DECL 31

/*** AF_LS_4_CNL_0 (0x44000a00) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_0_ADDR (0x44000a00)
#define IAXXX_AF_LS_4_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_0_LS4_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_0_LS4_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_0_LS4_CH_0_POS 0
#define IAXXX_AF_LS_4_CNL_0_LS4_CH_0_SIZE 32
#define IAXXX_AF_LS_4_CNL_0_LS4_CH_0_DECL (31:0)

/*** AF_LS_4_CNL_1 (0x44000a04) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_1_ADDR (0x44000a04)
#define IAXXX_AF_LS_4_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_1_LS4_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_1_LS4_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_1_LS4_CH_1_POS 0
#define IAXXX_AF_LS_4_CNL_1_LS4_CH_1_SIZE 32
#define IAXXX_AF_LS_4_CNL_1_LS4_CH_1_DECL (31:0)

/*** AF_LS_4_CNL_2 (0x44000a08) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_2_ADDR (0x44000a08)
#define IAXXX_AF_LS_4_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_2_LS4_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_2_LS4_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_2_LS4_CH_2_POS 0
#define IAXXX_AF_LS_4_CNL_2_LS4_CH_2_SIZE 32
#define IAXXX_AF_LS_4_CNL_2_LS4_CH_2_DECL (31:0)

/*** AF_LS_4_CNL_3 (0x44000a0c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_3_ADDR (0x44000a0c)
#define IAXXX_AF_LS_4_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_3_LS4_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_3_LS4_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_3_LS4_CH_3_POS 0
#define IAXXX_AF_LS_4_CNL_3_LS4_CH_3_SIZE 32
#define IAXXX_AF_LS_4_CNL_3_LS4_CH_3_DECL (31:0)

/*** AF_LS_4_RESERVED_0 (0x44000a10) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_0_ADDR (0x44000a10)
#define IAXXX_AF_LS_4_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_1 (0x44000a14) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_1_ADDR (0x44000a14)
#define IAXXX_AF_LS_4_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_2 (0x44000a18) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_2_ADDR (0x44000a18)
#define IAXXX_AF_LS_4_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_3 (0x44000a1c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_3_ADDR (0x44000a1c)
#define IAXXX_AF_LS_4_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_4 (0x44000a20) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_4_ADDR (0x44000a20)
#define IAXXX_AF_LS_4_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_5 (0x44000a24) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_5_ADDR (0x44000a24)
#define IAXXX_AF_LS_4_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_6 (0x44000a28) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_6_ADDR (0x44000a28)
#define IAXXX_AF_LS_4_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_7 (0x44000a2c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_7_ADDR (0x44000a2c)
#define IAXXX_AF_LS_4_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_8 (0x44000a30) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_8_ADDR (0x44000a30)
#define IAXXX_AF_LS_4_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_9 (0x44000a34) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_9_ADDR (0x44000a34)
#define IAXXX_AF_LS_4_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_10 (0x44000a38) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_10_ADDR (0x44000a38)
#define IAXXX_AF_LS_4_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_11 (0x44000a3c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_11_ADDR (0x44000a3c)
#define IAXXX_AF_LS_4_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_12 (0x44000a40) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_12_ADDR (0x44000a40)
#define IAXXX_AF_LS_4_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_13 (0x44000a44) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_13_ADDR (0x44000a44)
#define IAXXX_AF_LS_4_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_14 (0x44000a48) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_14_ADDR (0x44000a48)
#define IAXXX_AF_LS_4_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_15 (0x44000a4c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_15_ADDR (0x44000a4c)
#define IAXXX_AF_LS_4_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_16 (0x44000a50) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_16_ADDR (0x44000a50)
#define IAXXX_AF_LS_4_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_17 (0x44000a54) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_17_ADDR (0x44000a54)
#define IAXXX_AF_LS_4_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_18 (0x44000a58) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_18_ADDR (0x44000a58)
#define IAXXX_AF_LS_4_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_19 (0x44000a5c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_19_ADDR (0x44000a5c)
#define IAXXX_AF_LS_4_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_20 (0x44000a60) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_20_ADDR (0x44000a60)
#define IAXXX_AF_LS_4_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_21 (0x44000a64) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_21_ADDR (0x44000a64)
#define IAXXX_AF_LS_4_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_22 (0x44000a68) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_22_ADDR (0x44000a68)
#define IAXXX_AF_LS_4_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_23 (0x44000a6c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_23_ADDR (0x44000a6c)
#define IAXXX_AF_LS_4_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_24 (0x44000a70) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_24_ADDR (0x44000a70)
#define IAXXX_AF_LS_4_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_25 (0x44000a74) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_25_ADDR (0x44000a74)
#define IAXXX_AF_LS_4_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_4_PT_0 (0x44000a78) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_4_PT_0_ADDR (0x44000a78)
#define IAXXX_AF_LS_4_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_4_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_4_PT_0_VAL_POS 0
#define IAXXX_AF_LS_4_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_4_PT_0_VAL_DECL (31:0)

/*** AF_LS_4_PT_1 (0x44000a7c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 4,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_4_PT_1_ADDR (0x44000a7c)
#define IAXXX_AF_LS_4_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_4_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_4_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_4_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_4_PT_1_VAL_POS 0
#define IAXXX_AF_LS_4_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_4_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[4] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_4_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_4_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_4_PT_1_VLD_POS 31
#define IAXXX_AF_LS_4_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_4_PT_1_VLD_DECL 31

/*** AF_LS_5_CNL_0 (0x44000a80) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_0_ADDR (0x44000a80)
#define IAXXX_AF_LS_5_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_0_LS5_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_0_LS5_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_0_LS5_CH_0_POS 0
#define IAXXX_AF_LS_5_CNL_0_LS5_CH_0_SIZE 32
#define IAXXX_AF_LS_5_CNL_0_LS5_CH_0_DECL (31:0)

/*** AF_LS_5_CNL_1 (0x44000a84) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_1_ADDR (0x44000a84)
#define IAXXX_AF_LS_5_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_1_LS5_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_1_LS5_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_1_LS5_CH_1_POS 0
#define IAXXX_AF_LS_5_CNL_1_LS5_CH_1_SIZE 32
#define IAXXX_AF_LS_5_CNL_1_LS5_CH_1_DECL (31:0)

/*** AF_LS_5_CNL_2 (0x44000a88) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_2_ADDR (0x44000a88)
#define IAXXX_AF_LS_5_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_2_LS5_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_2_LS5_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_2_LS5_CH_2_POS 0
#define IAXXX_AF_LS_5_CNL_2_LS5_CH_2_SIZE 32
#define IAXXX_AF_LS_5_CNL_2_LS5_CH_2_DECL (31:0)

/*** AF_LS_5_CNL_3 (0x44000a8c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_3_ADDR (0x44000a8c)
#define IAXXX_AF_LS_5_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_3_LS5_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_3_LS5_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_3_LS5_CH_3_POS 0
#define IAXXX_AF_LS_5_CNL_3_LS5_CH_3_SIZE 32
#define IAXXX_AF_LS_5_CNL_3_LS5_CH_3_DECL (31:0)

/*** AF_LS_5_RESERVED_0 (0x44000a90) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_0_ADDR (0x44000a90)
#define IAXXX_AF_LS_5_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_1 (0x44000a94) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_1_ADDR (0x44000a94)
#define IAXXX_AF_LS_5_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_2 (0x44000a98) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_2_ADDR (0x44000a98)
#define IAXXX_AF_LS_5_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_3 (0x44000a9c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_3_ADDR (0x44000a9c)
#define IAXXX_AF_LS_5_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_4 (0x44000aa0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_4_ADDR (0x44000aa0)
#define IAXXX_AF_LS_5_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_5 (0x44000aa4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_5_ADDR (0x44000aa4)
#define IAXXX_AF_LS_5_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_6 (0x44000aa8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_6_ADDR (0x44000aa8)
#define IAXXX_AF_LS_5_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_7 (0x44000aac) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_7_ADDR (0x44000aac)
#define IAXXX_AF_LS_5_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_8 (0x44000ab0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_8_ADDR (0x44000ab0)
#define IAXXX_AF_LS_5_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_9 (0x44000ab4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_9_ADDR (0x44000ab4)
#define IAXXX_AF_LS_5_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_10 (0x44000ab8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_10_ADDR (0x44000ab8)
#define IAXXX_AF_LS_5_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_11 (0x44000abc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_11_ADDR (0x44000abc)
#define IAXXX_AF_LS_5_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_12 (0x44000ac0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_12_ADDR (0x44000ac0)
#define IAXXX_AF_LS_5_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_13 (0x44000ac4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_13_ADDR (0x44000ac4)
#define IAXXX_AF_LS_5_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_14 (0x44000ac8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_14_ADDR (0x44000ac8)
#define IAXXX_AF_LS_5_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_15 (0x44000acc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_15_ADDR (0x44000acc)
#define IAXXX_AF_LS_5_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_16 (0x44000ad0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_16_ADDR (0x44000ad0)
#define IAXXX_AF_LS_5_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_17 (0x44000ad4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_17_ADDR (0x44000ad4)
#define IAXXX_AF_LS_5_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_18 (0x44000ad8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_18_ADDR (0x44000ad8)
#define IAXXX_AF_LS_5_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_19 (0x44000adc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_19_ADDR (0x44000adc)
#define IAXXX_AF_LS_5_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_20 (0x44000ae0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_20_ADDR (0x44000ae0)
#define IAXXX_AF_LS_5_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_21 (0x44000ae4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_21_ADDR (0x44000ae4)
#define IAXXX_AF_LS_5_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_22 (0x44000ae8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_22_ADDR (0x44000ae8)
#define IAXXX_AF_LS_5_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_23 (0x44000aec) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_23_ADDR (0x44000aec)
#define IAXXX_AF_LS_5_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_24 (0x44000af0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_24_ADDR (0x44000af0)
#define IAXXX_AF_LS_5_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_25 (0x44000af4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_25_ADDR (0x44000af4)
#define IAXXX_AF_LS_5_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_5_PT_0 (0x44000af8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_5_PT_0_ADDR (0x44000af8)
#define IAXXX_AF_LS_5_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_5_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_5_PT_0_VAL_POS 0
#define IAXXX_AF_LS_5_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_5_PT_0_VAL_DECL (31:0)

/*** AF_LS_5_PT_1 (0x44000afc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 5,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_5_PT_1_ADDR (0x44000afc)
#define IAXXX_AF_LS_5_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_5_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_5_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_5_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_5_PT_1_VAL_POS 0
#define IAXXX_AF_LS_5_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_5_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[5] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_5_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_5_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_5_PT_1_VLD_POS 31
#define IAXXX_AF_LS_5_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_5_PT_1_VLD_DECL 31

/*** AF_LS_6_CNL_0 (0x44000b00) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_0_ADDR (0x44000b00)
#define IAXXX_AF_LS_6_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_0_LS6_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_0_LS6_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_0_LS6_CH_0_POS 0
#define IAXXX_AF_LS_6_CNL_0_LS6_CH_0_SIZE 32
#define IAXXX_AF_LS_6_CNL_0_LS6_CH_0_DECL (31:0)

/*** AF_LS_6_CNL_1 (0x44000b04) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_1_ADDR (0x44000b04)
#define IAXXX_AF_LS_6_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_1_LS6_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_1_LS6_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_1_LS6_CH_1_POS 0
#define IAXXX_AF_LS_6_CNL_1_LS6_CH_1_SIZE 32
#define IAXXX_AF_LS_6_CNL_1_LS6_CH_1_DECL (31:0)

/*** AF_LS_6_CNL_2 (0x44000b08) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_2_ADDR (0x44000b08)
#define IAXXX_AF_LS_6_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_2_LS6_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_2_LS6_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_2_LS6_CH_2_POS 0
#define IAXXX_AF_LS_6_CNL_2_LS6_CH_2_SIZE 32
#define IAXXX_AF_LS_6_CNL_2_LS6_CH_2_DECL (31:0)

/*** AF_LS_6_CNL_3 (0x44000b0c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_3_ADDR (0x44000b0c)
#define IAXXX_AF_LS_6_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_3_LS6_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_3_LS6_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_3_LS6_CH_3_POS 0
#define IAXXX_AF_LS_6_CNL_3_LS6_CH_3_SIZE 32
#define IAXXX_AF_LS_6_CNL_3_LS6_CH_3_DECL (31:0)

/*** AF_LS_6_RESERVED_0 (0x44000b10) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_0_ADDR (0x44000b10)
#define IAXXX_AF_LS_6_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_1 (0x44000b14) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_1_ADDR (0x44000b14)
#define IAXXX_AF_LS_6_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_2 (0x44000b18) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_2_ADDR (0x44000b18)
#define IAXXX_AF_LS_6_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_3 (0x44000b1c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_3_ADDR (0x44000b1c)
#define IAXXX_AF_LS_6_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_4 (0x44000b20) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_4_ADDR (0x44000b20)
#define IAXXX_AF_LS_6_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_5 (0x44000b24) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_5_ADDR (0x44000b24)
#define IAXXX_AF_LS_6_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_6 (0x44000b28) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_6_ADDR (0x44000b28)
#define IAXXX_AF_LS_6_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_7 (0x44000b2c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_7_ADDR (0x44000b2c)
#define IAXXX_AF_LS_6_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_8 (0x44000b30) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_8_ADDR (0x44000b30)
#define IAXXX_AF_LS_6_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_9 (0x44000b34) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_9_ADDR (0x44000b34)
#define IAXXX_AF_LS_6_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_10 (0x44000b38) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_10_ADDR (0x44000b38)
#define IAXXX_AF_LS_6_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_11 (0x44000b3c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_11_ADDR (0x44000b3c)
#define IAXXX_AF_LS_6_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_12 (0x44000b40) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_12_ADDR (0x44000b40)
#define IAXXX_AF_LS_6_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_13 (0x44000b44) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_13_ADDR (0x44000b44)
#define IAXXX_AF_LS_6_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_14 (0x44000b48) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_14_ADDR (0x44000b48)
#define IAXXX_AF_LS_6_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_15 (0x44000b4c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_15_ADDR (0x44000b4c)
#define IAXXX_AF_LS_6_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_16 (0x44000b50) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_16_ADDR (0x44000b50)
#define IAXXX_AF_LS_6_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_17 (0x44000b54) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_17_ADDR (0x44000b54)
#define IAXXX_AF_LS_6_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_18 (0x44000b58) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_18_ADDR (0x44000b58)
#define IAXXX_AF_LS_6_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_19 (0x44000b5c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_19_ADDR (0x44000b5c)
#define IAXXX_AF_LS_6_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_20 (0x44000b60) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_20_ADDR (0x44000b60)
#define IAXXX_AF_LS_6_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_21 (0x44000b64) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_21_ADDR (0x44000b64)
#define IAXXX_AF_LS_6_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_22 (0x44000b68) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_22_ADDR (0x44000b68)
#define IAXXX_AF_LS_6_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_23 (0x44000b6c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_23_ADDR (0x44000b6c)
#define IAXXX_AF_LS_6_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_24 (0x44000b70) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_24_ADDR (0x44000b70)
#define IAXXX_AF_LS_6_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_25 (0x44000b74) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_25_ADDR (0x44000b74)
#define IAXXX_AF_LS_6_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_6_PT_0 (0x44000b78) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_6_PT_0_ADDR (0x44000b78)
#define IAXXX_AF_LS_6_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_6_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_6_PT_0_VAL_POS 0
#define IAXXX_AF_LS_6_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_6_PT_0_VAL_DECL (31:0)

/*** AF_LS_6_PT_1 (0x44000b7c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 6,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_6_PT_1_ADDR (0x44000b7c)
#define IAXXX_AF_LS_6_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_6_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_6_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_6_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_6_PT_1_VAL_POS 0
#define IAXXX_AF_LS_6_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_6_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[6] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_6_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_6_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_6_PT_1_VLD_POS 31
#define IAXXX_AF_LS_6_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_6_PT_1_VLD_DECL 31

/*** AF_LS_7_CNL_0 (0x44000b80) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_0_ADDR (0x44000b80)
#define IAXXX_AF_LS_7_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_0_LS7_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_0_LS7_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_0_LS7_CH_0_POS 0
#define IAXXX_AF_LS_7_CNL_0_LS7_CH_0_SIZE 32
#define IAXXX_AF_LS_7_CNL_0_LS7_CH_0_DECL (31:0)

/*** AF_LS_7_CNL_1 (0x44000b84) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_1_ADDR (0x44000b84)
#define IAXXX_AF_LS_7_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_1_LS7_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_1_LS7_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_1_LS7_CH_1_POS 0
#define IAXXX_AF_LS_7_CNL_1_LS7_CH_1_SIZE 32
#define IAXXX_AF_LS_7_CNL_1_LS7_CH_1_DECL (31:0)

/*** AF_LS_7_CNL_2 (0x44000b88) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_2_ADDR (0x44000b88)
#define IAXXX_AF_LS_7_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_2_LS7_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_2_LS7_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_2_LS7_CH_2_POS 0
#define IAXXX_AF_LS_7_CNL_2_LS7_CH_2_SIZE 32
#define IAXXX_AF_LS_7_CNL_2_LS7_CH_2_DECL (31:0)

/*** AF_LS_7_CNL_3 (0x44000b8c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_3_ADDR (0x44000b8c)
#define IAXXX_AF_LS_7_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_3_LS7_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_3_LS7_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_3_LS7_CH_3_POS 0
#define IAXXX_AF_LS_7_CNL_3_LS7_CH_3_SIZE 32
#define IAXXX_AF_LS_7_CNL_3_LS7_CH_3_DECL (31:0)

/*** AF_LS_7_RESERVED_0 (0x44000b90) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_0_ADDR (0x44000b90)
#define IAXXX_AF_LS_7_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_1 (0x44000b94) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_1_ADDR (0x44000b94)
#define IAXXX_AF_LS_7_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_2 (0x44000b98) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_2_ADDR (0x44000b98)
#define IAXXX_AF_LS_7_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_3 (0x44000b9c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_3_ADDR (0x44000b9c)
#define IAXXX_AF_LS_7_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_4 (0x44000ba0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_4_ADDR (0x44000ba0)
#define IAXXX_AF_LS_7_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_5 (0x44000ba4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_5_ADDR (0x44000ba4)
#define IAXXX_AF_LS_7_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_6 (0x44000ba8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_6_ADDR (0x44000ba8)
#define IAXXX_AF_LS_7_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_7 (0x44000bac) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_7_ADDR (0x44000bac)
#define IAXXX_AF_LS_7_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_8 (0x44000bb0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_8_ADDR (0x44000bb0)
#define IAXXX_AF_LS_7_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_9 (0x44000bb4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_9_ADDR (0x44000bb4)
#define IAXXX_AF_LS_7_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_10 (0x44000bb8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_10_ADDR (0x44000bb8)
#define IAXXX_AF_LS_7_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_11 (0x44000bbc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_11_ADDR (0x44000bbc)
#define IAXXX_AF_LS_7_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_12 (0x44000bc0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_12_ADDR (0x44000bc0)
#define IAXXX_AF_LS_7_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_13 (0x44000bc4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_13_ADDR (0x44000bc4)
#define IAXXX_AF_LS_7_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_14 (0x44000bc8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_14_ADDR (0x44000bc8)
#define IAXXX_AF_LS_7_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_15 (0x44000bcc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_15_ADDR (0x44000bcc)
#define IAXXX_AF_LS_7_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_16 (0x44000bd0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_16_ADDR (0x44000bd0)
#define IAXXX_AF_LS_7_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_17 (0x44000bd4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_17_ADDR (0x44000bd4)
#define IAXXX_AF_LS_7_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_18 (0x44000bd8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_18_ADDR (0x44000bd8)
#define IAXXX_AF_LS_7_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_19 (0x44000bdc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_19_ADDR (0x44000bdc)
#define IAXXX_AF_LS_7_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_20 (0x44000be0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_20_ADDR (0x44000be0)
#define IAXXX_AF_LS_7_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_21 (0x44000be4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_21_ADDR (0x44000be4)
#define IAXXX_AF_LS_7_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_22 (0x44000be8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_22_ADDR (0x44000be8)
#define IAXXX_AF_LS_7_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_23 (0x44000bec) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_23_ADDR (0x44000bec)
#define IAXXX_AF_LS_7_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_24 (0x44000bf0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_24_ADDR (0x44000bf0)
#define IAXXX_AF_LS_7_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_25 (0x44000bf4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_25_ADDR (0x44000bf4)
#define IAXXX_AF_LS_7_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_7_PT_0 (0x44000bf8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_7_PT_0_ADDR (0x44000bf8)
#define IAXXX_AF_LS_7_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_7_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_7_PT_0_VAL_POS 0
#define IAXXX_AF_LS_7_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_7_PT_0_VAL_DECL (31:0)

/*** AF_LS_7_PT_1 (0x44000bfc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 7,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_7_PT_1_ADDR (0x44000bfc)
#define IAXXX_AF_LS_7_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_7_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_7_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_7_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_7_PT_1_VAL_POS 0
#define IAXXX_AF_LS_7_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_7_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[7] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_7_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_7_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_7_PT_1_VLD_POS 31
#define IAXXX_AF_LS_7_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_7_PT_1_VLD_DECL 31

/*** AF_LS_8_CNL_0 (0x44000c00) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_0_ADDR (0x44000c00)
#define IAXXX_AF_LS_8_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_0_LS8_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_0_LS8_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_0_LS8_CH_0_POS 0
#define IAXXX_AF_LS_8_CNL_0_LS8_CH_0_SIZE 32
#define IAXXX_AF_LS_8_CNL_0_LS8_CH_0_DECL (31:0)

/*** AF_LS_8_CNL_1 (0x44000c04) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_1_ADDR (0x44000c04)
#define IAXXX_AF_LS_8_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_1_LS8_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_1_LS8_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_1_LS8_CH_1_POS 0
#define IAXXX_AF_LS_8_CNL_1_LS8_CH_1_SIZE 32
#define IAXXX_AF_LS_8_CNL_1_LS8_CH_1_DECL (31:0)

/*** AF_LS_8_CNL_2 (0x44000c08) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_2_ADDR (0x44000c08)
#define IAXXX_AF_LS_8_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_2_LS8_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_2_LS8_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_2_LS8_CH_2_POS 0
#define IAXXX_AF_LS_8_CNL_2_LS8_CH_2_SIZE 32
#define IAXXX_AF_LS_8_CNL_2_LS8_CH_2_DECL (31:0)

/*** AF_LS_8_CNL_3 (0x44000c0c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_3_ADDR (0x44000c0c)
#define IAXXX_AF_LS_8_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_3_LS8_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_3_LS8_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_3_LS8_CH_3_POS 0
#define IAXXX_AF_LS_8_CNL_3_LS8_CH_3_SIZE 32
#define IAXXX_AF_LS_8_CNL_3_LS8_CH_3_DECL (31:0)

/*** AF_LS_8_RESERVED_0 (0x44000c10) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_0_ADDR (0x44000c10)
#define IAXXX_AF_LS_8_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_1 (0x44000c14) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_1_ADDR (0x44000c14)
#define IAXXX_AF_LS_8_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_2 (0x44000c18) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_2_ADDR (0x44000c18)
#define IAXXX_AF_LS_8_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_3 (0x44000c1c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_3_ADDR (0x44000c1c)
#define IAXXX_AF_LS_8_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_4 (0x44000c20) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_4_ADDR (0x44000c20)
#define IAXXX_AF_LS_8_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_5 (0x44000c24) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_5_ADDR (0x44000c24)
#define IAXXX_AF_LS_8_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_6 (0x44000c28) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_6_ADDR (0x44000c28)
#define IAXXX_AF_LS_8_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_7 (0x44000c2c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_7_ADDR (0x44000c2c)
#define IAXXX_AF_LS_8_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_8 (0x44000c30) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_8_ADDR (0x44000c30)
#define IAXXX_AF_LS_8_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_9 (0x44000c34) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_9_ADDR (0x44000c34)
#define IAXXX_AF_LS_8_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_10 (0x44000c38) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_10_ADDR (0x44000c38)
#define IAXXX_AF_LS_8_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_11 (0x44000c3c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_11_ADDR (0x44000c3c)
#define IAXXX_AF_LS_8_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_12 (0x44000c40) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_12_ADDR (0x44000c40)
#define IAXXX_AF_LS_8_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_13 (0x44000c44) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_13_ADDR (0x44000c44)
#define IAXXX_AF_LS_8_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_14 (0x44000c48) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_14_ADDR (0x44000c48)
#define IAXXX_AF_LS_8_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_15 (0x44000c4c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_15_ADDR (0x44000c4c)
#define IAXXX_AF_LS_8_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_16 (0x44000c50) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_16_ADDR (0x44000c50)
#define IAXXX_AF_LS_8_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_17 (0x44000c54) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_17_ADDR (0x44000c54)
#define IAXXX_AF_LS_8_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_18 (0x44000c58) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_18_ADDR (0x44000c58)
#define IAXXX_AF_LS_8_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_19 (0x44000c5c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_19_ADDR (0x44000c5c)
#define IAXXX_AF_LS_8_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_20 (0x44000c60) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_20_ADDR (0x44000c60)
#define IAXXX_AF_LS_8_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_21 (0x44000c64) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_21_ADDR (0x44000c64)
#define IAXXX_AF_LS_8_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_22 (0x44000c68) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_22_ADDR (0x44000c68)
#define IAXXX_AF_LS_8_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_23 (0x44000c6c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_23_ADDR (0x44000c6c)
#define IAXXX_AF_LS_8_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_24 (0x44000c70) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_24_ADDR (0x44000c70)
#define IAXXX_AF_LS_8_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_25 (0x44000c74) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_25_ADDR (0x44000c74)
#define IAXXX_AF_LS_8_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_8_PT_0 (0x44000c78) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_8_PT_0_ADDR (0x44000c78)
#define IAXXX_AF_LS_8_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_8_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_8_PT_0_VAL_POS 0
#define IAXXX_AF_LS_8_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_8_PT_0_VAL_DECL (31:0)

/*** AF_LS_8_PT_1 (0x44000c7c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 8,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_8_PT_1_ADDR (0x44000c7c)
#define IAXXX_AF_LS_8_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_8_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_8_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_8_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_8_PT_1_VAL_POS 0
#define IAXXX_AF_LS_8_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_8_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[8] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_8_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_8_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_8_PT_1_VLD_POS 31
#define IAXXX_AF_LS_8_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_8_PT_1_VLD_DECL 31

/*** AF_LS_9_CNL_0 (0x44000c80) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_0_ADDR (0x44000c80)
#define IAXXX_AF_LS_9_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_0_LS9_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_0_LS9_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_0_LS9_CH_0_POS 0
#define IAXXX_AF_LS_9_CNL_0_LS9_CH_0_SIZE 32
#define IAXXX_AF_LS_9_CNL_0_LS9_CH_0_DECL (31:0)

/*** AF_LS_9_CNL_1 (0x44000c84) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_1_ADDR (0x44000c84)
#define IAXXX_AF_LS_9_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_1_LS9_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_1_LS9_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_1_LS9_CH_1_POS 0
#define IAXXX_AF_LS_9_CNL_1_LS9_CH_1_SIZE 32
#define IAXXX_AF_LS_9_CNL_1_LS9_CH_1_DECL (31:0)

/*** AF_LS_9_CNL_2 (0x44000c88) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_2_ADDR (0x44000c88)
#define IAXXX_AF_LS_9_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_2_LS9_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_2_LS9_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_2_LS9_CH_2_POS 0
#define IAXXX_AF_LS_9_CNL_2_LS9_CH_2_SIZE 32
#define IAXXX_AF_LS_9_CNL_2_LS9_CH_2_DECL (31:0)

/*** AF_LS_9_CNL_3 (0x44000c8c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_3_ADDR (0x44000c8c)
#define IAXXX_AF_LS_9_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_3_LS9_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_3_LS9_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_3_LS9_CH_3_POS 0
#define IAXXX_AF_LS_9_CNL_3_LS9_CH_3_SIZE 32
#define IAXXX_AF_LS_9_CNL_3_LS9_CH_3_DECL (31:0)

/*** AF_LS_9_RESERVED_0 (0x44000c90) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_0_ADDR (0x44000c90)
#define IAXXX_AF_LS_9_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_1 (0x44000c94) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_1_ADDR (0x44000c94)
#define IAXXX_AF_LS_9_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_2 (0x44000c98) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_2_ADDR (0x44000c98)
#define IAXXX_AF_LS_9_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_3 (0x44000c9c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_3_ADDR (0x44000c9c)
#define IAXXX_AF_LS_9_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_4 (0x44000ca0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_4_ADDR (0x44000ca0)
#define IAXXX_AF_LS_9_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_5 (0x44000ca4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_5_ADDR (0x44000ca4)
#define IAXXX_AF_LS_9_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_6 (0x44000ca8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_6_ADDR (0x44000ca8)
#define IAXXX_AF_LS_9_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_7 (0x44000cac) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_7_ADDR (0x44000cac)
#define IAXXX_AF_LS_9_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_8 (0x44000cb0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_8_ADDR (0x44000cb0)
#define IAXXX_AF_LS_9_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_9 (0x44000cb4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_9_ADDR (0x44000cb4)
#define IAXXX_AF_LS_9_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_10 (0x44000cb8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_10_ADDR (0x44000cb8)
#define IAXXX_AF_LS_9_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_11 (0x44000cbc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_11_ADDR (0x44000cbc)
#define IAXXX_AF_LS_9_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_12 (0x44000cc0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_12_ADDR (0x44000cc0)
#define IAXXX_AF_LS_9_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_13 (0x44000cc4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_13_ADDR (0x44000cc4)
#define IAXXX_AF_LS_9_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_14 (0x44000cc8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_14_ADDR (0x44000cc8)
#define IAXXX_AF_LS_9_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_15 (0x44000ccc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_15_ADDR (0x44000ccc)
#define IAXXX_AF_LS_9_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_16 (0x44000cd0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_16_ADDR (0x44000cd0)
#define IAXXX_AF_LS_9_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_17 (0x44000cd4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_17_ADDR (0x44000cd4)
#define IAXXX_AF_LS_9_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_18 (0x44000cd8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_18_ADDR (0x44000cd8)
#define IAXXX_AF_LS_9_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_19 (0x44000cdc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_19_ADDR (0x44000cdc)
#define IAXXX_AF_LS_9_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_20 (0x44000ce0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_20_ADDR (0x44000ce0)
#define IAXXX_AF_LS_9_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_21 (0x44000ce4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_21_ADDR (0x44000ce4)
#define IAXXX_AF_LS_9_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_22 (0x44000ce8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_22_ADDR (0x44000ce8)
#define IAXXX_AF_LS_9_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_23 (0x44000cec) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_23_ADDR (0x44000cec)
#define IAXXX_AF_LS_9_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_24 (0x44000cf0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_24_ADDR (0x44000cf0)
#define IAXXX_AF_LS_9_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_25 (0x44000cf4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_25_ADDR (0x44000cf4)
#define IAXXX_AF_LS_9_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_9_PT_0 (0x44000cf8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_9_PT_0_ADDR (0x44000cf8)
#define IAXXX_AF_LS_9_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_9_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_9_PT_0_VAL_POS 0
#define IAXXX_AF_LS_9_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_9_PT_0_VAL_DECL (31:0)

/*** AF_LS_9_PT_1 (0x44000cfc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 9,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_9_PT_1_ADDR (0x44000cfc)
#define IAXXX_AF_LS_9_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_9_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_9_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_9_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_9_PT_1_VAL_POS 0
#define IAXXX_AF_LS_9_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_9_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[9] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_9_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_9_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_9_PT_1_VLD_POS 31
#define IAXXX_AF_LS_9_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_9_PT_1_VLD_DECL 31

/*** AF_LS_10_CNL_0 (0x44000d00) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_0_ADDR (0x44000d00)
#define IAXXX_AF_LS_10_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_0_LS10_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_0_LS10_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_0_LS10_CH_0_POS 0
#define IAXXX_AF_LS_10_CNL_0_LS10_CH_0_SIZE 32
#define IAXXX_AF_LS_10_CNL_0_LS10_CH_0_DECL (31:0)

/*** AF_LS_10_CNL_1 (0x44000d04) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_1_ADDR (0x44000d04)
#define IAXXX_AF_LS_10_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_1_LS10_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_1_LS10_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_1_LS10_CH_1_POS 0
#define IAXXX_AF_LS_10_CNL_1_LS10_CH_1_SIZE 32
#define IAXXX_AF_LS_10_CNL_1_LS10_CH_1_DECL (31:0)

/*** AF_LS_10_CNL_2 (0x44000d08) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_2_ADDR (0x44000d08)
#define IAXXX_AF_LS_10_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_2_LS10_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_2_LS10_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_2_LS10_CH_2_POS 0
#define IAXXX_AF_LS_10_CNL_2_LS10_CH_2_SIZE 32
#define IAXXX_AF_LS_10_CNL_2_LS10_CH_2_DECL (31:0)

/*** AF_LS_10_CNL_3 (0x44000d0c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_3_ADDR (0x44000d0c)
#define IAXXX_AF_LS_10_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_3_LS10_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_3_LS10_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_3_LS10_CH_3_POS 0
#define IAXXX_AF_LS_10_CNL_3_LS10_CH_3_SIZE 32
#define IAXXX_AF_LS_10_CNL_3_LS10_CH_3_DECL (31:0)

/*** AF_LS_10_RESERVED_0 (0x44000d10) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_0_ADDR (0x44000d10)
#define IAXXX_AF_LS_10_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_1 (0x44000d14) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_1_ADDR (0x44000d14)
#define IAXXX_AF_LS_10_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_2 (0x44000d18) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_2_ADDR (0x44000d18)
#define IAXXX_AF_LS_10_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_3 (0x44000d1c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_3_ADDR (0x44000d1c)
#define IAXXX_AF_LS_10_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_4 (0x44000d20) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_4_ADDR (0x44000d20)
#define IAXXX_AF_LS_10_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_5 (0x44000d24) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_5_ADDR (0x44000d24)
#define IAXXX_AF_LS_10_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_6 (0x44000d28) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_6_ADDR (0x44000d28)
#define IAXXX_AF_LS_10_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_7 (0x44000d2c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_7_ADDR (0x44000d2c)
#define IAXXX_AF_LS_10_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_8 (0x44000d30) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_8_ADDR (0x44000d30)
#define IAXXX_AF_LS_10_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_9 (0x44000d34) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_9_ADDR (0x44000d34)
#define IAXXX_AF_LS_10_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_10 (0x44000d38) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_10_ADDR (0x44000d38)
#define IAXXX_AF_LS_10_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_11 (0x44000d3c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_11_ADDR (0x44000d3c)
#define IAXXX_AF_LS_10_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_12 (0x44000d40) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_12_ADDR (0x44000d40)
#define IAXXX_AF_LS_10_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_13 (0x44000d44) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_13_ADDR (0x44000d44)
#define IAXXX_AF_LS_10_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_14 (0x44000d48) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_14_ADDR (0x44000d48)
#define IAXXX_AF_LS_10_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_15 (0x44000d4c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_15_ADDR (0x44000d4c)
#define IAXXX_AF_LS_10_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_16 (0x44000d50) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_16_ADDR (0x44000d50)
#define IAXXX_AF_LS_10_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_17 (0x44000d54) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_17_ADDR (0x44000d54)
#define IAXXX_AF_LS_10_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_18 (0x44000d58) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_18_ADDR (0x44000d58)
#define IAXXX_AF_LS_10_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_19 (0x44000d5c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_19_ADDR (0x44000d5c)
#define IAXXX_AF_LS_10_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_20 (0x44000d60) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_20_ADDR (0x44000d60)
#define IAXXX_AF_LS_10_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_21 (0x44000d64) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_21_ADDR (0x44000d64)
#define IAXXX_AF_LS_10_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_22 (0x44000d68) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_22_ADDR (0x44000d68)
#define IAXXX_AF_LS_10_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_23 (0x44000d6c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_23_ADDR (0x44000d6c)
#define IAXXX_AF_LS_10_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_24 (0x44000d70) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_24_ADDR (0x44000d70)
#define IAXXX_AF_LS_10_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_25 (0x44000d74) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_25_ADDR (0x44000d74)
#define IAXXX_AF_LS_10_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_10_PT_0 (0x44000d78) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_10_PT_0_ADDR (0x44000d78)
#define IAXXX_AF_LS_10_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_10_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_10_PT_0_VAL_POS 0
#define IAXXX_AF_LS_10_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_10_PT_0_VAL_DECL (31:0)

/*** AF_LS_10_PT_1 (0x44000d7c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 10,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_10_PT_1_ADDR (0x44000d7c)
#define IAXXX_AF_LS_10_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_10_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_10_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_10_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_10_PT_1_VAL_POS 0
#define IAXXX_AF_LS_10_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_10_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[10] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_10_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_10_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_10_PT_1_VLD_POS 31
#define IAXXX_AF_LS_10_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_10_PT_1_VLD_DECL 31

/*** AF_LS_11_CNL_0 (0x44000d80) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_0_ADDR (0x44000d80)
#define IAXXX_AF_LS_11_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_0_LS11_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_0_LS11_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_0_LS11_CH_0_POS 0
#define IAXXX_AF_LS_11_CNL_0_LS11_CH_0_SIZE 32
#define IAXXX_AF_LS_11_CNL_0_LS11_CH_0_DECL (31:0)

/*** AF_LS_11_CNL_1 (0x44000d84) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_1_ADDR (0x44000d84)
#define IAXXX_AF_LS_11_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_1_LS11_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_1_LS11_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_1_LS11_CH_1_POS 0
#define IAXXX_AF_LS_11_CNL_1_LS11_CH_1_SIZE 32
#define IAXXX_AF_LS_11_CNL_1_LS11_CH_1_DECL (31:0)

/*** AF_LS_11_CNL_2 (0x44000d88) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_2_ADDR (0x44000d88)
#define IAXXX_AF_LS_11_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_2_LS11_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_2_LS11_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_2_LS11_CH_2_POS 0
#define IAXXX_AF_LS_11_CNL_2_LS11_CH_2_SIZE 32
#define IAXXX_AF_LS_11_CNL_2_LS11_CH_2_DECL (31:0)

/*** AF_LS_11_CNL_3 (0x44000d8c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_3_ADDR (0x44000d8c)
#define IAXXX_AF_LS_11_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_3_LS11_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_3_LS11_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_3_LS11_CH_3_POS 0
#define IAXXX_AF_LS_11_CNL_3_LS11_CH_3_SIZE 32
#define IAXXX_AF_LS_11_CNL_3_LS11_CH_3_DECL (31:0)

/*** AF_LS_11_RESERVED_0 (0x44000d90) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_0_ADDR (0x44000d90)
#define IAXXX_AF_LS_11_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_1 (0x44000d94) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_1_ADDR (0x44000d94)
#define IAXXX_AF_LS_11_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_2 (0x44000d98) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_2_ADDR (0x44000d98)
#define IAXXX_AF_LS_11_RESERVED_2_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_2_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_2_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_3 (0x44000d9c) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_3_ADDR (0x44000d9c)
#define IAXXX_AF_LS_11_RESERVED_3_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_3_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_3_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_4 (0x44000da0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_4_ADDR (0x44000da0)
#define IAXXX_AF_LS_11_RESERVED_4_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_4_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_4_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_5 (0x44000da4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_5_ADDR (0x44000da4)
#define IAXXX_AF_LS_11_RESERVED_5_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_5_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_5_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_6 (0x44000da8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_6_ADDR (0x44000da8)
#define IAXXX_AF_LS_11_RESERVED_6_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_6_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_6_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_7 (0x44000dac) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_7_ADDR (0x44000dac)
#define IAXXX_AF_LS_11_RESERVED_7_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_7_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_7_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_8 (0x44000db0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_8_ADDR (0x44000db0)
#define IAXXX_AF_LS_11_RESERVED_8_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_8_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_8_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_9 (0x44000db4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_9_ADDR (0x44000db4)
#define IAXXX_AF_LS_11_RESERVED_9_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_9_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_9_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_10 (0x44000db8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_10_ADDR (0x44000db8)
#define IAXXX_AF_LS_11_RESERVED_10_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_10_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_10_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_11 (0x44000dbc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_11_ADDR (0x44000dbc)
#define IAXXX_AF_LS_11_RESERVED_11_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_11_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_11_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_12 (0x44000dc0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_12_ADDR (0x44000dc0)
#define IAXXX_AF_LS_11_RESERVED_12_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_12_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_12_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_12_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_13 (0x44000dc4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_13_ADDR (0x44000dc4)
#define IAXXX_AF_LS_11_RESERVED_13_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_13_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_13_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_13_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_14 (0x44000dc8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_14_ADDR (0x44000dc8)
#define IAXXX_AF_LS_11_RESERVED_14_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_14_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_14_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_14_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_15 (0x44000dcc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_15_ADDR (0x44000dcc)
#define IAXXX_AF_LS_11_RESERVED_15_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_15_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_15_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_15_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_16 (0x44000dd0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_16_ADDR (0x44000dd0)
#define IAXXX_AF_LS_11_RESERVED_16_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_16_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_16_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_16_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_17 (0x44000dd4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_17_ADDR (0x44000dd4)
#define IAXXX_AF_LS_11_RESERVED_17_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_17_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_17_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_17_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_18 (0x44000dd8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_18_ADDR (0x44000dd8)
#define IAXXX_AF_LS_11_RESERVED_18_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_18_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_18_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_18_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_19 (0x44000ddc) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_19_ADDR (0x44000ddc)
#define IAXXX_AF_LS_11_RESERVED_19_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_19_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_19_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_19_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_20 (0x44000de0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_20_ADDR (0x44000de0)
#define IAXXX_AF_LS_11_RESERVED_20_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_20_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_20_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_20_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_21 (0x44000de4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_21_ADDR (0x44000de4)
#define IAXXX_AF_LS_11_RESERVED_21_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_21_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_21_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_21_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_22 (0x44000de8) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_22_ADDR (0x44000de8)
#define IAXXX_AF_LS_11_RESERVED_22_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_22_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_22_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_22_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_23 (0x44000dec) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_23_ADDR (0x44000dec)
#define IAXXX_AF_LS_11_RESERVED_23_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_23_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_23_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_23_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_24 (0x44000df0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_24_ADDR (0x44000df0)
#define IAXXX_AF_LS_11_RESERVED_24_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_24_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_24_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_24_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_25 (0x44000df4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_25_ADDR (0x44000df4)
#define IAXXX_AF_LS_11_RESERVED_25_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_25_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_25_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_25_RESET_VAL 0x00000000

/*** AF_LS_11_PT_0 (0x44000df8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_11_PT_0_ADDR (0x44000df8)
#define IAXXX_AF_LS_11_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_11_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_11_PT_0_VAL_POS 0
#define IAXXX_AF_LS_11_PT_0_VAL_SIZE 32
#define IAXXX_AF_LS_11_PT_0_VAL_DECL (31:0)

/*** AF_LS_11_PT_1 (0x44000dfc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 11,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_11_PT_1_ADDR (0x44000dfc)
#define IAXXX_AF_LS_11_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_11_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_11_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_11_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_11_PT_1_VAL_POS 0
#define IAXXX_AF_LS_11_PT_1_VAL_SIZE 20
#define IAXXX_AF_LS_11_PT_1_VAL_DECL (19:0)

/*
 * Presentation Time Valid bit, if LS_DMA[11] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_11_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_11_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_11_PT_1_VLD_POS 31
#define IAXXX_AF_LS_11_PT_1_VLD_SIZE 1
#define IAXXX_AF_LS_11_PT_1_VLD_DECL 31

/* Field encodings for register LS_MAP_0's field PHY_STR_TYPE_0. */
/* Physical Stream Type mapped to Logical Stream 0. */
/* 0x0: PCM0 */
/* 0x1: PCM1 */
/* 0x2: PCM2 */
/* 0x3: Reserved */
/* 0x4: Reserved */
/* 0x5: Reserved */
/* 0x6: Reserved */
/* 0x7: CIC Combo */
/* 0x8-0xf: Reserved */

/* Field encoding values: */
/*   0x0: pcm0 */
/*   0x1: pcm1 */
/*   0x2: pcm2 */
/*   0x3: Reserved */
/*   0x4: Reserved */
/*   0x5: Reserved */
/*   0x7: cic_combo */
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_PCM0_VAL 0x0
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_PCM1_VAL 0x1
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_PCM2_VAL 0x2
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_RESERVED_VAL 0x3
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_CIC_COMBO_VAL 0x7

/* Field encodings for register LS_DEADLINE_0's field SR_FAMILY_0. */
/* Sample Rate Family Logical Stream 0. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_1's field SR_FAMILY_1. */
/* Sample Rate Family Logical Stream 1. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_2's field SR_FAMILY_2. */
/* Sample Rate Family Logical Stream 2. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_3's field SR_FAMILY_3. */
/* Sample Rate Family Logical Stream 3. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_4's field SR_FAMILY_4. */
/* Sample Rate Family Logical Stream 4. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_5's field SR_FAMILY_5. */
/* Sample Rate Family Logical Stream 5. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_6's field SR_FAMILY_6. */
/* Sample Rate Family Logical Stream 6. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_7's field SR_FAMILY_7. */
/* Sample Rate Family Logical Stream 7. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_8's field SR_FAMILY_8. */
/* Sample Rate Family Logical Stream 8. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_9's field SR_FAMILY_9. */
/* Sample Rate Family Logical Stream 9. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_10's field SR_FAMILY_10. */
/* Sample Rate Family Logical Stream 10. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register LS_DEADLINE_11's field SR_FAMILY_11. */
/* Sample Rate Family Logical Stream 11. */
/* Field encoding values: */
/*   0x0: unused_family */
/*   0x1: 4khz_family */
/*   0x2: 5_5khz_family */
/*   0x3: 6khz_family */
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_6KHZ_FAMILY_VAL 0x3

/* Field encodings for register WCPT_SCALE's field VAL. */
/* Post NR WCPT Clock Scaling Factor */
/* The fields should be programmed according to this table: */
/* 00 - Wall Clock is greater than or equal to 24.576 MHz. */
/* 01 - Wall Clock is less than 24.546 MHz, but greater than or equal to 12.288 */
/* MHz. */
/* 10 - Wall Clock is less than 12.288 MHz, but greater than or equal to 6.144 */
/* MHz. */
/* 11 - Wall Clock is less than 6.144  MHz, but greater than or equal to 3.0732 */
/* MHz. */

/* Field encoding values: */
/*   0x0: grtr_or_eq_to_24_576 */
/*   0x1: grtr_or_eq_to_12_288 */
/*   0x2: grtr_or_eq_to_6_144 */
/*   0x3: grtr_or_eq_to_3_072 */
#define IAXXX_AF_WCPT_SCALE_VAL_GRTR_OR_EQ_TO_24_576_VAL 0x0
#define IAXXX_AF_WCPT_SCALE_VAL_GRTR_OR_EQ_TO_12_288_VAL 0x1
#define IAXXX_AF_WCPT_SCALE_VAL_GRTR_OR_EQ_TO_6_144_VAL 0x2
#define IAXXX_AF_WCPT_SCALE_VAL_GRTR_OR_EQ_TO_3_072_VAL 0x3

/* Number of registers in the module */
#define IAXXX_AF_REG_NUM 475

#endif /* __IAXXX_REGISTER_DEFS_AF_H__*/
