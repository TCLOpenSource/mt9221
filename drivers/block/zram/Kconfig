# SPDX-License-Identifier: GPL-2.0
config ZRAM
	tristate "Compressed RAM block device support"
	depends on BLOCK && SYSFS && ZSMALLOC && CRYPTO
	select CRYPTO_LZO
	default n
	help
	  Creates virtual block devices called /dev/zramX (X = 0, 1, ...).
	  Pages written to these disks are compressed and stored in memory
	  itself. These disks allow very fast I/O and compression provides
	  good amounts of memory savings.

	  It has several use cases, for example: /tmp storage, use as swap
	  disks and maybe many more.

	  See Documentation/blockdev/zram.txt for more information.

config ZRAM_WRITEBACK
       bool "Write back incompressible or idle page to backing device"
       depends on ZRAM
       default n
       help
	 With incompressible page, there is no memory saving to keep it
	 in memory. Instead, write it out to backing device.
	 For this feature, admin should set up backing device via
	 /sys/block/zramX/backing_dev.

	 With /sys/block/zramX/{idle,writeback}, application could ask
	 idle page's writeback to the backing device to save in memory.

	 See Documentation/blockdev/zram.txt for more information.

config ZRAM_MEMORY_TRACKING
	bool "Track zRam block status"
	depends on ZRAM && DEBUG_FS
	help
	  With this feature, admin can track the state of allocated blocks
	  of zRAM. Admin could see the information via
	  /sys/kernel/debug/zram/zramX/block_state.

	  See Documentation/blockdev/zram.txt for more information.

config MP_ZSM
	bool "ZRAM same page merging"
	depends on ZRAM
	default y
	help
	  The maximum zram size for the implementation is about 1024MB-4KB (18bits).
	  This feature will find same page in zram and merge these same pages
	  in order to save memory with some zram execution overhead.
	  Turn on "ZSM" with "/sys/block/zram0/zsm_on"

config MP_ZSM_STAT
	bool "ZSM statistics"
	depends on MP_ZSM
	default y
	help
	  Providing basic statistics to show the influence of ZSM.

config MP_ZSM_DEBUG
	bool "ZSM debug information"
	depends on MP_ZSM
	default n
	help
	  Providing debug information of ZSM as histories for each zram_table_entry.
	  Also provide ZSM metadata verification.
